# extract_data_and_plot, extracting data from the reports generated by PROLEAD
# and plotting.
# Copyright (C) 2024, Cankun Zhao, Leibo Liu. All rights reserved.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTERS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please see LICENSE and README for license and further instructions.
#
# Contact: zhaock97@gmail.com

import numpy as np
import matplotlib.pyplot as plt

report_file_path_list = ['../500million_notrans/Report.dat',
                         '../500million_trans/Report.dat']
data_save_path_list = ['./prolead-500M-g.npy',
                       './prolead-500M-gt.npy']

# Extract data from PROLEAD Report
for i, report_file_path in enumerate(report_file_path_list):
    data_save_path = data_save_path_list[i]

    data = []
    with open(report_file_path, 'r') as file_r:
        for line in file_r:
            if len(line) < 137:
                continue
            elif line[0] == '-':
                continue
            elif line[:21] == '|      Elapsed Time |':
                data.append([])
            else:
                n_sim = int(line[41:64])
                p_log = float(line[113:124])
                data[-1].append((n_sim, p_log))

        data_np = np.array(data)
        np.save(data_save_path, data_np)

# Import data
tw_g_path = data_save_path_list[0]
tw_gt_path = data_save_path_list[1]

tw_g = np.load(tw_g_path)
tw_gt = np.load(tw_gt_path)

# Calculate max. and min. p value
tw_g_max = np.amax(tw_g, axis=0)
tw_g_min = np.amin(tw_g, axis=0)

tw_gt_max = np.amax(tw_gt, axis=0)
tw_gt_min = np.amin(tw_gt, axis=0)

# Plot
plt.figure(figsize=(6, 2.5))
SIZE = 13

plt.plot(tw_gt_max[:,0]/1e6, tw_gt_max[:,1], label='glitch+transition')
plt.plot(tw_g_max[:,0]/1e6, tw_g_max[:,1], label='glitch')
plt.axhline(y=6, color='r', linestyle='--')
plt.xlabel('Number of simulations (million)', fontsize=SIZE)
plt.ylabel('max(-log10(p))')
plt.ylim(4,10)
plt.xlim(0,500)
plt.tick_params(axis='x', labelsize=SIZE)
plt.tick_params(axis='y', labelsize=SIZE)
plt.title('This work', fontsize=SIZE)
plt.legend(loc='upper left', fontsize=SIZE)

plt.savefig('./prolead.png', dpi=300)