//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Mon Dec 18 15:56:43 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// c2m_done_lvl                   O     1 reg
// m2c_dout                       O    16 reg
// m2c_en_lvl                     O     1 reg
// device_rdy                     O     1 reg
// trigger                        O     1
// clk                            I     1 clock
// rst_n                          I     1 reset
// c2m_din                        I    16 reg
// c2m_en_lvl                     I     1 reg
// m2c_done_lvl                   I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMainFPGA(clk,
		  rst_n,

		  c2m_din,
		  c2m_en_lvl,

		  c2m_done_lvl,

		  m2c_dout,

		  m2c_en_lvl,

		  m2c_done_lvl,

		  device_rdy,

		  trigger);
  input  clk;
  input  rst_n;

  // action method c2m_put
  input  [15 : 0] c2m_din;
  input  c2m_en_lvl;

  // value method c2m_doneLvl
  output c2m_done_lvl;

  // value method m2c_dout
  output [15 : 0] m2c_dout;

  // value method m2c_enLvl
  output m2c_en_lvl;

  // action method m2c_put
  input  m2c_done_lvl;

  // value method deviceRdy
  output device_rdy;

  // value method trigger
  output trigger;

  // signals for module outputs
  wire [15 : 0] m2c_dout;
  wire c2m_done_lvl, device_rdy, m2c_en_lvl, trigger;

  // register c2mCDCProc_dataReg
  reg [15 : 0] c2mCDCProc_dataReg;
  wire [15 : 0] c2mCDCProc_dataReg$D_IN;
  wire c2mCDCProc_dataReg$EN;

  // register c2mCDCProc_doneLvlReg
  reg c2mCDCProc_doneLvlReg;
  wire c2mCDCProc_doneLvlReg$D_IN, c2mCDCProc_doneLvlReg$EN;

  // register c2mCDCProc_enLvlReg1
  reg c2mCDCProc_enLvlReg1;
  wire c2mCDCProc_enLvlReg1$D_IN, c2mCDCProc_enLvlReg1$EN;

  // register c2mCDCProc_enLvlReg2
  reg c2mCDCProc_enLvlReg2;
  wire c2mCDCProc_enLvlReg2$D_IN, c2mCDCProc_enLvlReg2$EN;

  // register c2mCDCProc_enLvlReg3
  reg c2mCDCProc_enLvlReg3;
  wire c2mCDCProc_enLvlReg3$D_IN, c2mCDCProc_enLvlReg3$EN;

  // register c2mCDCProc_rxVld
  reg c2mCDCProc_rxVld;
  wire c2mCDCProc_rxVld$D_IN, c2mCDCProc_rxVld$EN;

  // register ctrlComm_addr
  reg [13 : 0] ctrlComm_addr;
  wire [13 : 0] ctrlComm_addr$D_IN;
  wire ctrlComm_addr$EN;

  // register ctrlComm_cphsh0VReg_0
  reg [15 : 0] ctrlComm_cphsh0VReg_0;
  wire [15 : 0] ctrlComm_cphsh0VReg_0$D_IN;
  wire ctrlComm_cphsh0VReg_0$EN;

  // register ctrlComm_cphsh0VReg_1
  reg [15 : 0] ctrlComm_cphsh0VReg_1;
  wire [15 : 0] ctrlComm_cphsh0VReg_1$D_IN;
  wire ctrlComm_cphsh0VReg_1$EN;

  // register ctrlComm_cphsh0VReg_10
  reg [15 : 0] ctrlComm_cphsh0VReg_10;
  wire [15 : 0] ctrlComm_cphsh0VReg_10$D_IN;
  wire ctrlComm_cphsh0VReg_10$EN;

  // register ctrlComm_cphsh0VReg_11
  reg [15 : 0] ctrlComm_cphsh0VReg_11;
  wire [15 : 0] ctrlComm_cphsh0VReg_11$D_IN;
  wire ctrlComm_cphsh0VReg_11$EN;

  // register ctrlComm_cphsh0VReg_12
  reg [15 : 0] ctrlComm_cphsh0VReg_12;
  wire [15 : 0] ctrlComm_cphsh0VReg_12$D_IN;
  wire ctrlComm_cphsh0VReg_12$EN;

  // register ctrlComm_cphsh0VReg_13
  reg [15 : 0] ctrlComm_cphsh0VReg_13;
  wire [15 : 0] ctrlComm_cphsh0VReg_13$D_IN;
  wire ctrlComm_cphsh0VReg_13$EN;

  // register ctrlComm_cphsh0VReg_14
  reg [15 : 0] ctrlComm_cphsh0VReg_14;
  wire [15 : 0] ctrlComm_cphsh0VReg_14$D_IN;
  wire ctrlComm_cphsh0VReg_14$EN;

  // register ctrlComm_cphsh0VReg_15
  reg [15 : 0] ctrlComm_cphsh0VReg_15;
  wire [15 : 0] ctrlComm_cphsh0VReg_15$D_IN;
  wire ctrlComm_cphsh0VReg_15$EN;

  // register ctrlComm_cphsh0VReg_16
  reg [15 : 0] ctrlComm_cphsh0VReg_16;
  wire [15 : 0] ctrlComm_cphsh0VReg_16$D_IN;
  wire ctrlComm_cphsh0VReg_16$EN;

  // register ctrlComm_cphsh0VReg_17
  reg [15 : 0] ctrlComm_cphsh0VReg_17;
  wire [15 : 0] ctrlComm_cphsh0VReg_17$D_IN;
  wire ctrlComm_cphsh0VReg_17$EN;

  // register ctrlComm_cphsh0VReg_18
  reg [15 : 0] ctrlComm_cphsh0VReg_18;
  wire [15 : 0] ctrlComm_cphsh0VReg_18$D_IN;
  wire ctrlComm_cphsh0VReg_18$EN;

  // register ctrlComm_cphsh0VReg_19
  reg [15 : 0] ctrlComm_cphsh0VReg_19;
  wire [15 : 0] ctrlComm_cphsh0VReg_19$D_IN;
  wire ctrlComm_cphsh0VReg_19$EN;

  // register ctrlComm_cphsh0VReg_2
  reg [15 : 0] ctrlComm_cphsh0VReg_2;
  wire [15 : 0] ctrlComm_cphsh0VReg_2$D_IN;
  wire ctrlComm_cphsh0VReg_2$EN;

  // register ctrlComm_cphsh0VReg_20
  reg [15 : 0] ctrlComm_cphsh0VReg_20;
  wire [15 : 0] ctrlComm_cphsh0VReg_20$D_IN;
  wire ctrlComm_cphsh0VReg_20$EN;

  // register ctrlComm_cphsh0VReg_21
  reg [15 : 0] ctrlComm_cphsh0VReg_21;
  wire [15 : 0] ctrlComm_cphsh0VReg_21$D_IN;
  wire ctrlComm_cphsh0VReg_21$EN;

  // register ctrlComm_cphsh0VReg_22
  reg [15 : 0] ctrlComm_cphsh0VReg_22;
  wire [15 : 0] ctrlComm_cphsh0VReg_22$D_IN;
  wire ctrlComm_cphsh0VReg_22$EN;

  // register ctrlComm_cphsh0VReg_23
  reg [15 : 0] ctrlComm_cphsh0VReg_23;
  wire [15 : 0] ctrlComm_cphsh0VReg_23$D_IN;
  wire ctrlComm_cphsh0VReg_23$EN;

  // register ctrlComm_cphsh0VReg_24
  reg [15 : 0] ctrlComm_cphsh0VReg_24;
  wire [15 : 0] ctrlComm_cphsh0VReg_24$D_IN;
  wire ctrlComm_cphsh0VReg_24$EN;

  // register ctrlComm_cphsh0VReg_25
  reg [15 : 0] ctrlComm_cphsh0VReg_25;
  wire [15 : 0] ctrlComm_cphsh0VReg_25$D_IN;
  wire ctrlComm_cphsh0VReg_25$EN;

  // register ctrlComm_cphsh0VReg_26
  reg [15 : 0] ctrlComm_cphsh0VReg_26;
  wire [15 : 0] ctrlComm_cphsh0VReg_26$D_IN;
  wire ctrlComm_cphsh0VReg_26$EN;

  // register ctrlComm_cphsh0VReg_27
  reg [15 : 0] ctrlComm_cphsh0VReg_27;
  wire [15 : 0] ctrlComm_cphsh0VReg_27$D_IN;
  wire ctrlComm_cphsh0VReg_27$EN;

  // register ctrlComm_cphsh0VReg_28
  reg [15 : 0] ctrlComm_cphsh0VReg_28;
  wire [15 : 0] ctrlComm_cphsh0VReg_28$D_IN;
  wire ctrlComm_cphsh0VReg_28$EN;

  // register ctrlComm_cphsh0VReg_29
  reg [15 : 0] ctrlComm_cphsh0VReg_29;
  wire [15 : 0] ctrlComm_cphsh0VReg_29$D_IN;
  wire ctrlComm_cphsh0VReg_29$EN;

  // register ctrlComm_cphsh0VReg_3
  reg [15 : 0] ctrlComm_cphsh0VReg_3;
  wire [15 : 0] ctrlComm_cphsh0VReg_3$D_IN;
  wire ctrlComm_cphsh0VReg_3$EN;

  // register ctrlComm_cphsh0VReg_30
  reg [15 : 0] ctrlComm_cphsh0VReg_30;
  wire [15 : 0] ctrlComm_cphsh0VReg_30$D_IN;
  wire ctrlComm_cphsh0VReg_30$EN;

  // register ctrlComm_cphsh0VReg_31
  reg [15 : 0] ctrlComm_cphsh0VReg_31;
  wire [15 : 0] ctrlComm_cphsh0VReg_31$D_IN;
  wire ctrlComm_cphsh0VReg_31$EN;

  // register ctrlComm_cphsh0VReg_32
  reg [15 : 0] ctrlComm_cphsh0VReg_32;
  wire [15 : 0] ctrlComm_cphsh0VReg_32$D_IN;
  wire ctrlComm_cphsh0VReg_32$EN;

  // register ctrlComm_cphsh0VReg_33
  reg [15 : 0] ctrlComm_cphsh0VReg_33;
  wire [15 : 0] ctrlComm_cphsh0VReg_33$D_IN;
  wire ctrlComm_cphsh0VReg_33$EN;

  // register ctrlComm_cphsh0VReg_34
  reg [15 : 0] ctrlComm_cphsh0VReg_34;
  wire [15 : 0] ctrlComm_cphsh0VReg_34$D_IN;
  wire ctrlComm_cphsh0VReg_34$EN;

  // register ctrlComm_cphsh0VReg_35
  reg [15 : 0] ctrlComm_cphsh0VReg_35;
  wire [15 : 0] ctrlComm_cphsh0VReg_35$D_IN;
  wire ctrlComm_cphsh0VReg_35$EN;

  // register ctrlComm_cphsh0VReg_36
  reg [15 : 0] ctrlComm_cphsh0VReg_36;
  wire [15 : 0] ctrlComm_cphsh0VReg_36$D_IN;
  wire ctrlComm_cphsh0VReg_36$EN;

  // register ctrlComm_cphsh0VReg_37
  reg [15 : 0] ctrlComm_cphsh0VReg_37;
  wire [15 : 0] ctrlComm_cphsh0VReg_37$D_IN;
  wire ctrlComm_cphsh0VReg_37$EN;

  // register ctrlComm_cphsh0VReg_38
  reg [15 : 0] ctrlComm_cphsh0VReg_38;
  wire [15 : 0] ctrlComm_cphsh0VReg_38$D_IN;
  wire ctrlComm_cphsh0VReg_38$EN;

  // register ctrlComm_cphsh0VReg_39
  reg [15 : 0] ctrlComm_cphsh0VReg_39;
  wire [15 : 0] ctrlComm_cphsh0VReg_39$D_IN;
  wire ctrlComm_cphsh0VReg_39$EN;

  // register ctrlComm_cphsh0VReg_4
  reg [15 : 0] ctrlComm_cphsh0VReg_4;
  wire [15 : 0] ctrlComm_cphsh0VReg_4$D_IN;
  wire ctrlComm_cphsh0VReg_4$EN;

  // register ctrlComm_cphsh0VReg_40
  reg [15 : 0] ctrlComm_cphsh0VReg_40;
  wire [15 : 0] ctrlComm_cphsh0VReg_40$D_IN;
  wire ctrlComm_cphsh0VReg_40$EN;

  // register ctrlComm_cphsh0VReg_41
  reg [15 : 0] ctrlComm_cphsh0VReg_41;
  wire [15 : 0] ctrlComm_cphsh0VReg_41$D_IN;
  wire ctrlComm_cphsh0VReg_41$EN;

  // register ctrlComm_cphsh0VReg_42
  reg [15 : 0] ctrlComm_cphsh0VReg_42;
  wire [15 : 0] ctrlComm_cphsh0VReg_42$D_IN;
  wire ctrlComm_cphsh0VReg_42$EN;

  // register ctrlComm_cphsh0VReg_43
  reg [15 : 0] ctrlComm_cphsh0VReg_43;
  wire [15 : 0] ctrlComm_cphsh0VReg_43$D_IN;
  wire ctrlComm_cphsh0VReg_43$EN;

  // register ctrlComm_cphsh0VReg_44
  reg [15 : 0] ctrlComm_cphsh0VReg_44;
  wire [15 : 0] ctrlComm_cphsh0VReg_44$D_IN;
  wire ctrlComm_cphsh0VReg_44$EN;

  // register ctrlComm_cphsh0VReg_45
  reg [15 : 0] ctrlComm_cphsh0VReg_45;
  wire [15 : 0] ctrlComm_cphsh0VReg_45$D_IN;
  wire ctrlComm_cphsh0VReg_45$EN;

  // register ctrlComm_cphsh0VReg_46
  reg [15 : 0] ctrlComm_cphsh0VReg_46;
  wire [15 : 0] ctrlComm_cphsh0VReg_46$D_IN;
  wire ctrlComm_cphsh0VReg_46$EN;

  // register ctrlComm_cphsh0VReg_47
  reg [15 : 0] ctrlComm_cphsh0VReg_47;
  wire [15 : 0] ctrlComm_cphsh0VReg_47$D_IN;
  wire ctrlComm_cphsh0VReg_47$EN;

  // register ctrlComm_cphsh0VReg_48
  reg [15 : 0] ctrlComm_cphsh0VReg_48;
  wire [15 : 0] ctrlComm_cphsh0VReg_48$D_IN;
  wire ctrlComm_cphsh0VReg_48$EN;

  // register ctrlComm_cphsh0VReg_49
  reg [15 : 0] ctrlComm_cphsh0VReg_49;
  wire [15 : 0] ctrlComm_cphsh0VReg_49$D_IN;
  wire ctrlComm_cphsh0VReg_49$EN;

  // register ctrlComm_cphsh0VReg_5
  reg [15 : 0] ctrlComm_cphsh0VReg_5;
  wire [15 : 0] ctrlComm_cphsh0VReg_5$D_IN;
  wire ctrlComm_cphsh0VReg_5$EN;

  // register ctrlComm_cphsh0VReg_50
  reg [15 : 0] ctrlComm_cphsh0VReg_50;
  wire [15 : 0] ctrlComm_cphsh0VReg_50$D_IN;
  wire ctrlComm_cphsh0VReg_50$EN;

  // register ctrlComm_cphsh0VReg_51
  reg [15 : 0] ctrlComm_cphsh0VReg_51;
  wire [15 : 0] ctrlComm_cphsh0VReg_51$D_IN;
  wire ctrlComm_cphsh0VReg_51$EN;

  // register ctrlComm_cphsh0VReg_52
  reg [15 : 0] ctrlComm_cphsh0VReg_52;
  wire [15 : 0] ctrlComm_cphsh0VReg_52$D_IN;
  wire ctrlComm_cphsh0VReg_52$EN;

  // register ctrlComm_cphsh0VReg_53
  reg [15 : 0] ctrlComm_cphsh0VReg_53;
  wire [15 : 0] ctrlComm_cphsh0VReg_53$D_IN;
  wire ctrlComm_cphsh0VReg_53$EN;

  // register ctrlComm_cphsh0VReg_54
  reg [15 : 0] ctrlComm_cphsh0VReg_54;
  wire [15 : 0] ctrlComm_cphsh0VReg_54$D_IN;
  wire ctrlComm_cphsh0VReg_54$EN;

  // register ctrlComm_cphsh0VReg_55
  reg [15 : 0] ctrlComm_cphsh0VReg_55;
  wire [15 : 0] ctrlComm_cphsh0VReg_55$D_IN;
  wire ctrlComm_cphsh0VReg_55$EN;

  // register ctrlComm_cphsh0VReg_56
  reg [15 : 0] ctrlComm_cphsh0VReg_56;
  wire [15 : 0] ctrlComm_cphsh0VReg_56$D_IN;
  wire ctrlComm_cphsh0VReg_56$EN;

  // register ctrlComm_cphsh0VReg_57
  reg [15 : 0] ctrlComm_cphsh0VReg_57;
  wire [15 : 0] ctrlComm_cphsh0VReg_57$D_IN;
  wire ctrlComm_cphsh0VReg_57$EN;

  // register ctrlComm_cphsh0VReg_58
  reg [15 : 0] ctrlComm_cphsh0VReg_58;
  wire [15 : 0] ctrlComm_cphsh0VReg_58$D_IN;
  wire ctrlComm_cphsh0VReg_58$EN;

  // register ctrlComm_cphsh0VReg_59
  reg [15 : 0] ctrlComm_cphsh0VReg_59;
  wire [15 : 0] ctrlComm_cphsh0VReg_59$D_IN;
  wire ctrlComm_cphsh0VReg_59$EN;

  // register ctrlComm_cphsh0VReg_6
  reg [15 : 0] ctrlComm_cphsh0VReg_6;
  wire [15 : 0] ctrlComm_cphsh0VReg_6$D_IN;
  wire ctrlComm_cphsh0VReg_6$EN;

  // register ctrlComm_cphsh0VReg_60
  reg [15 : 0] ctrlComm_cphsh0VReg_60;
  wire [15 : 0] ctrlComm_cphsh0VReg_60$D_IN;
  wire ctrlComm_cphsh0VReg_60$EN;

  // register ctrlComm_cphsh0VReg_61
  reg [15 : 0] ctrlComm_cphsh0VReg_61;
  wire [15 : 0] ctrlComm_cphsh0VReg_61$D_IN;
  wire ctrlComm_cphsh0VReg_61$EN;

  // register ctrlComm_cphsh0VReg_62
  reg [15 : 0] ctrlComm_cphsh0VReg_62;
  wire [15 : 0] ctrlComm_cphsh0VReg_62$D_IN;
  wire ctrlComm_cphsh0VReg_62$EN;

  // register ctrlComm_cphsh0VReg_63
  reg [15 : 0] ctrlComm_cphsh0VReg_63;
  wire [15 : 0] ctrlComm_cphsh0VReg_63$D_IN;
  wire ctrlComm_cphsh0VReg_63$EN;

  // register ctrlComm_cphsh0VReg_64
  reg [15 : 0] ctrlComm_cphsh0VReg_64;
  wire [15 : 0] ctrlComm_cphsh0VReg_64$D_IN;
  wire ctrlComm_cphsh0VReg_64$EN;

  // register ctrlComm_cphsh0VReg_65
  reg [15 : 0] ctrlComm_cphsh0VReg_65;
  wire [15 : 0] ctrlComm_cphsh0VReg_65$D_IN;
  wire ctrlComm_cphsh0VReg_65$EN;

  // register ctrlComm_cphsh0VReg_66
  reg [15 : 0] ctrlComm_cphsh0VReg_66;
  wire [15 : 0] ctrlComm_cphsh0VReg_66$D_IN;
  wire ctrlComm_cphsh0VReg_66$EN;

  // register ctrlComm_cphsh0VReg_67
  reg [15 : 0] ctrlComm_cphsh0VReg_67;
  wire [15 : 0] ctrlComm_cphsh0VReg_67$D_IN;
  wire ctrlComm_cphsh0VReg_67$EN;

  // register ctrlComm_cphsh0VReg_68
  reg [15 : 0] ctrlComm_cphsh0VReg_68;
  wire [15 : 0] ctrlComm_cphsh0VReg_68$D_IN;
  wire ctrlComm_cphsh0VReg_68$EN;

  // register ctrlComm_cphsh0VReg_69
  reg [15 : 0] ctrlComm_cphsh0VReg_69;
  wire [15 : 0] ctrlComm_cphsh0VReg_69$D_IN;
  wire ctrlComm_cphsh0VReg_69$EN;

  // register ctrlComm_cphsh0VReg_7
  reg [15 : 0] ctrlComm_cphsh0VReg_7;
  wire [15 : 0] ctrlComm_cphsh0VReg_7$D_IN;
  wire ctrlComm_cphsh0VReg_7$EN;

  // register ctrlComm_cphsh0VReg_70
  reg [15 : 0] ctrlComm_cphsh0VReg_70;
  wire [15 : 0] ctrlComm_cphsh0VReg_70$D_IN;
  wire ctrlComm_cphsh0VReg_70$EN;

  // register ctrlComm_cphsh0VReg_71
  reg [15 : 0] ctrlComm_cphsh0VReg_71;
  wire [15 : 0] ctrlComm_cphsh0VReg_71$D_IN;
  wire ctrlComm_cphsh0VReg_71$EN;

  // register ctrlComm_cphsh0VReg_72
  reg [15 : 0] ctrlComm_cphsh0VReg_72;
  wire [15 : 0] ctrlComm_cphsh0VReg_72$D_IN;
  wire ctrlComm_cphsh0VReg_72$EN;

  // register ctrlComm_cphsh0VReg_73
  reg [15 : 0] ctrlComm_cphsh0VReg_73;
  wire [15 : 0] ctrlComm_cphsh0VReg_73$D_IN;
  wire ctrlComm_cphsh0VReg_73$EN;

  // register ctrlComm_cphsh0VReg_74
  reg [15 : 0] ctrlComm_cphsh0VReg_74;
  wire [15 : 0] ctrlComm_cphsh0VReg_74$D_IN;
  wire ctrlComm_cphsh0VReg_74$EN;

  // register ctrlComm_cphsh0VReg_75
  reg [15 : 0] ctrlComm_cphsh0VReg_75;
  wire [15 : 0] ctrlComm_cphsh0VReg_75$D_IN;
  wire ctrlComm_cphsh0VReg_75$EN;

  // register ctrlComm_cphsh0VReg_76
  reg [15 : 0] ctrlComm_cphsh0VReg_76;
  wire [15 : 0] ctrlComm_cphsh0VReg_76$D_IN;
  wire ctrlComm_cphsh0VReg_76$EN;

  // register ctrlComm_cphsh0VReg_77
  reg [15 : 0] ctrlComm_cphsh0VReg_77;
  wire [15 : 0] ctrlComm_cphsh0VReg_77$D_IN;
  wire ctrlComm_cphsh0VReg_77$EN;

  // register ctrlComm_cphsh0VReg_78
  reg [15 : 0] ctrlComm_cphsh0VReg_78;
  wire [15 : 0] ctrlComm_cphsh0VReg_78$D_IN;
  wire ctrlComm_cphsh0VReg_78$EN;

  // register ctrlComm_cphsh0VReg_79
  reg [15 : 0] ctrlComm_cphsh0VReg_79;
  wire [15 : 0] ctrlComm_cphsh0VReg_79$D_IN;
  wire ctrlComm_cphsh0VReg_79$EN;

  // register ctrlComm_cphsh0VReg_8
  reg [15 : 0] ctrlComm_cphsh0VReg_8;
  wire [15 : 0] ctrlComm_cphsh0VReg_8$D_IN;
  wire ctrlComm_cphsh0VReg_8$EN;

  // register ctrlComm_cphsh0VReg_80
  reg [15 : 0] ctrlComm_cphsh0VReg_80;
  wire [15 : 0] ctrlComm_cphsh0VReg_80$D_IN;
  wire ctrlComm_cphsh0VReg_80$EN;

  // register ctrlComm_cphsh0VReg_81
  reg [15 : 0] ctrlComm_cphsh0VReg_81;
  wire [15 : 0] ctrlComm_cphsh0VReg_81$D_IN;
  wire ctrlComm_cphsh0VReg_81$EN;

  // register ctrlComm_cphsh0VReg_82
  reg [15 : 0] ctrlComm_cphsh0VReg_82;
  wire [15 : 0] ctrlComm_cphsh0VReg_82$D_IN;
  wire ctrlComm_cphsh0VReg_82$EN;

  // register ctrlComm_cphsh0VReg_83
  reg [15 : 0] ctrlComm_cphsh0VReg_83;
  wire [15 : 0] ctrlComm_cphsh0VReg_83$D_IN;
  wire ctrlComm_cphsh0VReg_83$EN;

  // register ctrlComm_cphsh0VReg_84
  reg [15 : 0] ctrlComm_cphsh0VReg_84;
  wire [15 : 0] ctrlComm_cphsh0VReg_84$D_IN;
  wire ctrlComm_cphsh0VReg_84$EN;

  // register ctrlComm_cphsh0VReg_85
  reg [15 : 0] ctrlComm_cphsh0VReg_85;
  wire [15 : 0] ctrlComm_cphsh0VReg_85$D_IN;
  wire ctrlComm_cphsh0VReg_85$EN;

  // register ctrlComm_cphsh0VReg_86
  reg [15 : 0] ctrlComm_cphsh0VReg_86;
  wire [15 : 0] ctrlComm_cphsh0VReg_86$D_IN;
  wire ctrlComm_cphsh0VReg_86$EN;

  // register ctrlComm_cphsh0VReg_87
  reg [15 : 0] ctrlComm_cphsh0VReg_87;
  wire [15 : 0] ctrlComm_cphsh0VReg_87$D_IN;
  wire ctrlComm_cphsh0VReg_87$EN;

  // register ctrlComm_cphsh0VReg_88
  reg [15 : 0] ctrlComm_cphsh0VReg_88;
  wire [15 : 0] ctrlComm_cphsh0VReg_88$D_IN;
  wire ctrlComm_cphsh0VReg_88$EN;

  // register ctrlComm_cphsh0VReg_89
  reg [15 : 0] ctrlComm_cphsh0VReg_89;
  wire [15 : 0] ctrlComm_cphsh0VReg_89$D_IN;
  wire ctrlComm_cphsh0VReg_89$EN;

  // register ctrlComm_cphsh0VReg_9
  reg [15 : 0] ctrlComm_cphsh0VReg_9;
  wire [15 : 0] ctrlComm_cphsh0VReg_9$D_IN;
  wire ctrlComm_cphsh0VReg_9$EN;

  // register ctrlComm_cphsh0VReg_90
  reg [15 : 0] ctrlComm_cphsh0VReg_90;
  wire [15 : 0] ctrlComm_cphsh0VReg_90$D_IN;
  wire ctrlComm_cphsh0VReg_90$EN;

  // register ctrlComm_cphsh0VReg_91
  reg [15 : 0] ctrlComm_cphsh0VReg_91;
  wire [15 : 0] ctrlComm_cphsh0VReg_91$D_IN;
  wire ctrlComm_cphsh0VReg_91$EN;

  // register ctrlComm_cphsh0VReg_92
  reg [15 : 0] ctrlComm_cphsh0VReg_92;
  wire [15 : 0] ctrlComm_cphsh0VReg_92$D_IN;
  wire ctrlComm_cphsh0VReg_92$EN;

  // register ctrlComm_cphsh0VReg_93
  reg [15 : 0] ctrlComm_cphsh0VReg_93;
  wire [15 : 0] ctrlComm_cphsh0VReg_93$D_IN;
  wire ctrlComm_cphsh0VReg_93$EN;

  // register ctrlComm_cphsh0VReg_94
  reg [15 : 0] ctrlComm_cphsh0VReg_94;
  wire [15 : 0] ctrlComm_cphsh0VReg_94$D_IN;
  wire ctrlComm_cphsh0VReg_94$EN;

  // register ctrlComm_cphsh0VReg_95
  reg [15 : 0] ctrlComm_cphsh0VReg_95;
  wire [15 : 0] ctrlComm_cphsh0VReg_95$D_IN;
  wire ctrlComm_cphsh0VReg_95$EN;

  // register ctrlComm_cphsh0VReg_96
  reg [15 : 0] ctrlComm_cphsh0VReg_96;
  wire [15 : 0] ctrlComm_cphsh0VReg_96$D_IN;
  wire ctrlComm_cphsh0VReg_96$EN;

  // register ctrlComm_cphsh0VReg_97
  reg [15 : 0] ctrlComm_cphsh0VReg_97;
  wire [15 : 0] ctrlComm_cphsh0VReg_97$D_IN;
  wire ctrlComm_cphsh0VReg_97$EN;

  // register ctrlComm_cphsh0VReg_98
  reg [15 : 0] ctrlComm_cphsh0VReg_98;
  wire [15 : 0] ctrlComm_cphsh0VReg_98$D_IN;
  wire ctrlComm_cphsh0VReg_98$EN;

  // register ctrlComm_cphsh0VReg_99
  reg [15 : 0] ctrlComm_cphsh0VReg_99;
  wire [15 : 0] ctrlComm_cphsh0VReg_99$D_IN;
  wire ctrlComm_cphsh0VReg_99$EN;

  // register ctrlComm_cphsh1VReg_0
  reg [15 : 0] ctrlComm_cphsh1VReg_0;
  wire [15 : 0] ctrlComm_cphsh1VReg_0$D_IN;
  wire ctrlComm_cphsh1VReg_0$EN;

  // register ctrlComm_cphsh1VReg_1
  reg [15 : 0] ctrlComm_cphsh1VReg_1;
  wire [15 : 0] ctrlComm_cphsh1VReg_1$D_IN;
  wire ctrlComm_cphsh1VReg_1$EN;

  // register ctrlComm_cphsh1VReg_10
  reg [15 : 0] ctrlComm_cphsh1VReg_10;
  wire [15 : 0] ctrlComm_cphsh1VReg_10$D_IN;
  wire ctrlComm_cphsh1VReg_10$EN;

  // register ctrlComm_cphsh1VReg_11
  reg [15 : 0] ctrlComm_cphsh1VReg_11;
  wire [15 : 0] ctrlComm_cphsh1VReg_11$D_IN;
  wire ctrlComm_cphsh1VReg_11$EN;

  // register ctrlComm_cphsh1VReg_12
  reg [15 : 0] ctrlComm_cphsh1VReg_12;
  wire [15 : 0] ctrlComm_cphsh1VReg_12$D_IN;
  wire ctrlComm_cphsh1VReg_12$EN;

  // register ctrlComm_cphsh1VReg_13
  reg [15 : 0] ctrlComm_cphsh1VReg_13;
  wire [15 : 0] ctrlComm_cphsh1VReg_13$D_IN;
  wire ctrlComm_cphsh1VReg_13$EN;

  // register ctrlComm_cphsh1VReg_14
  reg [15 : 0] ctrlComm_cphsh1VReg_14;
  wire [15 : 0] ctrlComm_cphsh1VReg_14$D_IN;
  wire ctrlComm_cphsh1VReg_14$EN;

  // register ctrlComm_cphsh1VReg_15
  reg [15 : 0] ctrlComm_cphsh1VReg_15;
  wire [15 : 0] ctrlComm_cphsh1VReg_15$D_IN;
  wire ctrlComm_cphsh1VReg_15$EN;

  // register ctrlComm_cphsh1VReg_16
  reg [15 : 0] ctrlComm_cphsh1VReg_16;
  wire [15 : 0] ctrlComm_cphsh1VReg_16$D_IN;
  wire ctrlComm_cphsh1VReg_16$EN;

  // register ctrlComm_cphsh1VReg_17
  reg [15 : 0] ctrlComm_cphsh1VReg_17;
  wire [15 : 0] ctrlComm_cphsh1VReg_17$D_IN;
  wire ctrlComm_cphsh1VReg_17$EN;

  // register ctrlComm_cphsh1VReg_18
  reg [15 : 0] ctrlComm_cphsh1VReg_18;
  wire [15 : 0] ctrlComm_cphsh1VReg_18$D_IN;
  wire ctrlComm_cphsh1VReg_18$EN;

  // register ctrlComm_cphsh1VReg_19
  reg [15 : 0] ctrlComm_cphsh1VReg_19;
  wire [15 : 0] ctrlComm_cphsh1VReg_19$D_IN;
  wire ctrlComm_cphsh1VReg_19$EN;

  // register ctrlComm_cphsh1VReg_2
  reg [15 : 0] ctrlComm_cphsh1VReg_2;
  wire [15 : 0] ctrlComm_cphsh1VReg_2$D_IN;
  wire ctrlComm_cphsh1VReg_2$EN;

  // register ctrlComm_cphsh1VReg_20
  reg [15 : 0] ctrlComm_cphsh1VReg_20;
  wire [15 : 0] ctrlComm_cphsh1VReg_20$D_IN;
  wire ctrlComm_cphsh1VReg_20$EN;

  // register ctrlComm_cphsh1VReg_21
  reg [15 : 0] ctrlComm_cphsh1VReg_21;
  wire [15 : 0] ctrlComm_cphsh1VReg_21$D_IN;
  wire ctrlComm_cphsh1VReg_21$EN;

  // register ctrlComm_cphsh1VReg_22
  reg [15 : 0] ctrlComm_cphsh1VReg_22;
  wire [15 : 0] ctrlComm_cphsh1VReg_22$D_IN;
  wire ctrlComm_cphsh1VReg_22$EN;

  // register ctrlComm_cphsh1VReg_23
  reg [15 : 0] ctrlComm_cphsh1VReg_23;
  wire [15 : 0] ctrlComm_cphsh1VReg_23$D_IN;
  wire ctrlComm_cphsh1VReg_23$EN;

  // register ctrlComm_cphsh1VReg_24
  reg [15 : 0] ctrlComm_cphsh1VReg_24;
  wire [15 : 0] ctrlComm_cphsh1VReg_24$D_IN;
  wire ctrlComm_cphsh1VReg_24$EN;

  // register ctrlComm_cphsh1VReg_25
  reg [15 : 0] ctrlComm_cphsh1VReg_25;
  wire [15 : 0] ctrlComm_cphsh1VReg_25$D_IN;
  wire ctrlComm_cphsh1VReg_25$EN;

  // register ctrlComm_cphsh1VReg_26
  reg [15 : 0] ctrlComm_cphsh1VReg_26;
  wire [15 : 0] ctrlComm_cphsh1VReg_26$D_IN;
  wire ctrlComm_cphsh1VReg_26$EN;

  // register ctrlComm_cphsh1VReg_27
  reg [15 : 0] ctrlComm_cphsh1VReg_27;
  wire [15 : 0] ctrlComm_cphsh1VReg_27$D_IN;
  wire ctrlComm_cphsh1VReg_27$EN;

  // register ctrlComm_cphsh1VReg_28
  reg [15 : 0] ctrlComm_cphsh1VReg_28;
  wire [15 : 0] ctrlComm_cphsh1VReg_28$D_IN;
  wire ctrlComm_cphsh1VReg_28$EN;

  // register ctrlComm_cphsh1VReg_29
  reg [15 : 0] ctrlComm_cphsh1VReg_29;
  wire [15 : 0] ctrlComm_cphsh1VReg_29$D_IN;
  wire ctrlComm_cphsh1VReg_29$EN;

  // register ctrlComm_cphsh1VReg_3
  reg [15 : 0] ctrlComm_cphsh1VReg_3;
  wire [15 : 0] ctrlComm_cphsh1VReg_3$D_IN;
  wire ctrlComm_cphsh1VReg_3$EN;

  // register ctrlComm_cphsh1VReg_30
  reg [15 : 0] ctrlComm_cphsh1VReg_30;
  wire [15 : 0] ctrlComm_cphsh1VReg_30$D_IN;
  wire ctrlComm_cphsh1VReg_30$EN;

  // register ctrlComm_cphsh1VReg_31
  reg [15 : 0] ctrlComm_cphsh1VReg_31;
  wire [15 : 0] ctrlComm_cphsh1VReg_31$D_IN;
  wire ctrlComm_cphsh1VReg_31$EN;

  // register ctrlComm_cphsh1VReg_32
  reg [15 : 0] ctrlComm_cphsh1VReg_32;
  wire [15 : 0] ctrlComm_cphsh1VReg_32$D_IN;
  wire ctrlComm_cphsh1VReg_32$EN;

  // register ctrlComm_cphsh1VReg_33
  reg [15 : 0] ctrlComm_cphsh1VReg_33;
  wire [15 : 0] ctrlComm_cphsh1VReg_33$D_IN;
  wire ctrlComm_cphsh1VReg_33$EN;

  // register ctrlComm_cphsh1VReg_34
  reg [15 : 0] ctrlComm_cphsh1VReg_34;
  wire [15 : 0] ctrlComm_cphsh1VReg_34$D_IN;
  wire ctrlComm_cphsh1VReg_34$EN;

  // register ctrlComm_cphsh1VReg_35
  reg [15 : 0] ctrlComm_cphsh1VReg_35;
  wire [15 : 0] ctrlComm_cphsh1VReg_35$D_IN;
  wire ctrlComm_cphsh1VReg_35$EN;

  // register ctrlComm_cphsh1VReg_36
  reg [15 : 0] ctrlComm_cphsh1VReg_36;
  wire [15 : 0] ctrlComm_cphsh1VReg_36$D_IN;
  wire ctrlComm_cphsh1VReg_36$EN;

  // register ctrlComm_cphsh1VReg_37
  reg [15 : 0] ctrlComm_cphsh1VReg_37;
  wire [15 : 0] ctrlComm_cphsh1VReg_37$D_IN;
  wire ctrlComm_cphsh1VReg_37$EN;

  // register ctrlComm_cphsh1VReg_38
  reg [15 : 0] ctrlComm_cphsh1VReg_38;
  wire [15 : 0] ctrlComm_cphsh1VReg_38$D_IN;
  wire ctrlComm_cphsh1VReg_38$EN;

  // register ctrlComm_cphsh1VReg_39
  reg [15 : 0] ctrlComm_cphsh1VReg_39;
  wire [15 : 0] ctrlComm_cphsh1VReg_39$D_IN;
  wire ctrlComm_cphsh1VReg_39$EN;

  // register ctrlComm_cphsh1VReg_4
  reg [15 : 0] ctrlComm_cphsh1VReg_4;
  wire [15 : 0] ctrlComm_cphsh1VReg_4$D_IN;
  wire ctrlComm_cphsh1VReg_4$EN;

  // register ctrlComm_cphsh1VReg_40
  reg [15 : 0] ctrlComm_cphsh1VReg_40;
  wire [15 : 0] ctrlComm_cphsh1VReg_40$D_IN;
  wire ctrlComm_cphsh1VReg_40$EN;

  // register ctrlComm_cphsh1VReg_41
  reg [15 : 0] ctrlComm_cphsh1VReg_41;
  wire [15 : 0] ctrlComm_cphsh1VReg_41$D_IN;
  wire ctrlComm_cphsh1VReg_41$EN;

  // register ctrlComm_cphsh1VReg_42
  reg [15 : 0] ctrlComm_cphsh1VReg_42;
  wire [15 : 0] ctrlComm_cphsh1VReg_42$D_IN;
  wire ctrlComm_cphsh1VReg_42$EN;

  // register ctrlComm_cphsh1VReg_43
  reg [15 : 0] ctrlComm_cphsh1VReg_43;
  wire [15 : 0] ctrlComm_cphsh1VReg_43$D_IN;
  wire ctrlComm_cphsh1VReg_43$EN;

  // register ctrlComm_cphsh1VReg_44
  reg [15 : 0] ctrlComm_cphsh1VReg_44;
  wire [15 : 0] ctrlComm_cphsh1VReg_44$D_IN;
  wire ctrlComm_cphsh1VReg_44$EN;

  // register ctrlComm_cphsh1VReg_45
  reg [15 : 0] ctrlComm_cphsh1VReg_45;
  wire [15 : 0] ctrlComm_cphsh1VReg_45$D_IN;
  wire ctrlComm_cphsh1VReg_45$EN;

  // register ctrlComm_cphsh1VReg_46
  reg [15 : 0] ctrlComm_cphsh1VReg_46;
  wire [15 : 0] ctrlComm_cphsh1VReg_46$D_IN;
  wire ctrlComm_cphsh1VReg_46$EN;

  // register ctrlComm_cphsh1VReg_47
  reg [15 : 0] ctrlComm_cphsh1VReg_47;
  wire [15 : 0] ctrlComm_cphsh1VReg_47$D_IN;
  wire ctrlComm_cphsh1VReg_47$EN;

  // register ctrlComm_cphsh1VReg_48
  reg [15 : 0] ctrlComm_cphsh1VReg_48;
  wire [15 : 0] ctrlComm_cphsh1VReg_48$D_IN;
  wire ctrlComm_cphsh1VReg_48$EN;

  // register ctrlComm_cphsh1VReg_49
  reg [15 : 0] ctrlComm_cphsh1VReg_49;
  wire [15 : 0] ctrlComm_cphsh1VReg_49$D_IN;
  wire ctrlComm_cphsh1VReg_49$EN;

  // register ctrlComm_cphsh1VReg_5
  reg [15 : 0] ctrlComm_cphsh1VReg_5;
  wire [15 : 0] ctrlComm_cphsh1VReg_5$D_IN;
  wire ctrlComm_cphsh1VReg_5$EN;

  // register ctrlComm_cphsh1VReg_50
  reg [15 : 0] ctrlComm_cphsh1VReg_50;
  wire [15 : 0] ctrlComm_cphsh1VReg_50$D_IN;
  wire ctrlComm_cphsh1VReg_50$EN;

  // register ctrlComm_cphsh1VReg_51
  reg [15 : 0] ctrlComm_cphsh1VReg_51;
  wire [15 : 0] ctrlComm_cphsh1VReg_51$D_IN;
  wire ctrlComm_cphsh1VReg_51$EN;

  // register ctrlComm_cphsh1VReg_52
  reg [15 : 0] ctrlComm_cphsh1VReg_52;
  wire [15 : 0] ctrlComm_cphsh1VReg_52$D_IN;
  wire ctrlComm_cphsh1VReg_52$EN;

  // register ctrlComm_cphsh1VReg_53
  reg [15 : 0] ctrlComm_cphsh1VReg_53;
  wire [15 : 0] ctrlComm_cphsh1VReg_53$D_IN;
  wire ctrlComm_cphsh1VReg_53$EN;

  // register ctrlComm_cphsh1VReg_54
  reg [15 : 0] ctrlComm_cphsh1VReg_54;
  wire [15 : 0] ctrlComm_cphsh1VReg_54$D_IN;
  wire ctrlComm_cphsh1VReg_54$EN;

  // register ctrlComm_cphsh1VReg_55
  reg [15 : 0] ctrlComm_cphsh1VReg_55;
  wire [15 : 0] ctrlComm_cphsh1VReg_55$D_IN;
  wire ctrlComm_cphsh1VReg_55$EN;

  // register ctrlComm_cphsh1VReg_56
  reg [15 : 0] ctrlComm_cphsh1VReg_56;
  wire [15 : 0] ctrlComm_cphsh1VReg_56$D_IN;
  wire ctrlComm_cphsh1VReg_56$EN;

  // register ctrlComm_cphsh1VReg_57
  reg [15 : 0] ctrlComm_cphsh1VReg_57;
  wire [15 : 0] ctrlComm_cphsh1VReg_57$D_IN;
  wire ctrlComm_cphsh1VReg_57$EN;

  // register ctrlComm_cphsh1VReg_58
  reg [15 : 0] ctrlComm_cphsh1VReg_58;
  wire [15 : 0] ctrlComm_cphsh1VReg_58$D_IN;
  wire ctrlComm_cphsh1VReg_58$EN;

  // register ctrlComm_cphsh1VReg_59
  reg [15 : 0] ctrlComm_cphsh1VReg_59;
  wire [15 : 0] ctrlComm_cphsh1VReg_59$D_IN;
  wire ctrlComm_cphsh1VReg_59$EN;

  // register ctrlComm_cphsh1VReg_6
  reg [15 : 0] ctrlComm_cphsh1VReg_6;
  wire [15 : 0] ctrlComm_cphsh1VReg_6$D_IN;
  wire ctrlComm_cphsh1VReg_6$EN;

  // register ctrlComm_cphsh1VReg_60
  reg [15 : 0] ctrlComm_cphsh1VReg_60;
  wire [15 : 0] ctrlComm_cphsh1VReg_60$D_IN;
  wire ctrlComm_cphsh1VReg_60$EN;

  // register ctrlComm_cphsh1VReg_61
  reg [15 : 0] ctrlComm_cphsh1VReg_61;
  wire [15 : 0] ctrlComm_cphsh1VReg_61$D_IN;
  wire ctrlComm_cphsh1VReg_61$EN;

  // register ctrlComm_cphsh1VReg_62
  reg [15 : 0] ctrlComm_cphsh1VReg_62;
  wire [15 : 0] ctrlComm_cphsh1VReg_62$D_IN;
  wire ctrlComm_cphsh1VReg_62$EN;

  // register ctrlComm_cphsh1VReg_63
  reg [15 : 0] ctrlComm_cphsh1VReg_63;
  wire [15 : 0] ctrlComm_cphsh1VReg_63$D_IN;
  wire ctrlComm_cphsh1VReg_63$EN;

  // register ctrlComm_cphsh1VReg_64
  reg [15 : 0] ctrlComm_cphsh1VReg_64;
  wire [15 : 0] ctrlComm_cphsh1VReg_64$D_IN;
  wire ctrlComm_cphsh1VReg_64$EN;

  // register ctrlComm_cphsh1VReg_65
  reg [15 : 0] ctrlComm_cphsh1VReg_65;
  wire [15 : 0] ctrlComm_cphsh1VReg_65$D_IN;
  wire ctrlComm_cphsh1VReg_65$EN;

  // register ctrlComm_cphsh1VReg_66
  reg [15 : 0] ctrlComm_cphsh1VReg_66;
  wire [15 : 0] ctrlComm_cphsh1VReg_66$D_IN;
  wire ctrlComm_cphsh1VReg_66$EN;

  // register ctrlComm_cphsh1VReg_67
  reg [15 : 0] ctrlComm_cphsh1VReg_67;
  wire [15 : 0] ctrlComm_cphsh1VReg_67$D_IN;
  wire ctrlComm_cphsh1VReg_67$EN;

  // register ctrlComm_cphsh1VReg_68
  reg [15 : 0] ctrlComm_cphsh1VReg_68;
  wire [15 : 0] ctrlComm_cphsh1VReg_68$D_IN;
  wire ctrlComm_cphsh1VReg_68$EN;

  // register ctrlComm_cphsh1VReg_69
  reg [15 : 0] ctrlComm_cphsh1VReg_69;
  wire [15 : 0] ctrlComm_cphsh1VReg_69$D_IN;
  wire ctrlComm_cphsh1VReg_69$EN;

  // register ctrlComm_cphsh1VReg_7
  reg [15 : 0] ctrlComm_cphsh1VReg_7;
  wire [15 : 0] ctrlComm_cphsh1VReg_7$D_IN;
  wire ctrlComm_cphsh1VReg_7$EN;

  // register ctrlComm_cphsh1VReg_70
  reg [15 : 0] ctrlComm_cphsh1VReg_70;
  wire [15 : 0] ctrlComm_cphsh1VReg_70$D_IN;
  wire ctrlComm_cphsh1VReg_70$EN;

  // register ctrlComm_cphsh1VReg_71
  reg [15 : 0] ctrlComm_cphsh1VReg_71;
  wire [15 : 0] ctrlComm_cphsh1VReg_71$D_IN;
  wire ctrlComm_cphsh1VReg_71$EN;

  // register ctrlComm_cphsh1VReg_72
  reg [15 : 0] ctrlComm_cphsh1VReg_72;
  wire [15 : 0] ctrlComm_cphsh1VReg_72$D_IN;
  wire ctrlComm_cphsh1VReg_72$EN;

  // register ctrlComm_cphsh1VReg_73
  reg [15 : 0] ctrlComm_cphsh1VReg_73;
  wire [15 : 0] ctrlComm_cphsh1VReg_73$D_IN;
  wire ctrlComm_cphsh1VReg_73$EN;

  // register ctrlComm_cphsh1VReg_74
  reg [15 : 0] ctrlComm_cphsh1VReg_74;
  wire [15 : 0] ctrlComm_cphsh1VReg_74$D_IN;
  wire ctrlComm_cphsh1VReg_74$EN;

  // register ctrlComm_cphsh1VReg_75
  reg [15 : 0] ctrlComm_cphsh1VReg_75;
  wire [15 : 0] ctrlComm_cphsh1VReg_75$D_IN;
  wire ctrlComm_cphsh1VReg_75$EN;

  // register ctrlComm_cphsh1VReg_76
  reg [15 : 0] ctrlComm_cphsh1VReg_76;
  wire [15 : 0] ctrlComm_cphsh1VReg_76$D_IN;
  wire ctrlComm_cphsh1VReg_76$EN;

  // register ctrlComm_cphsh1VReg_77
  reg [15 : 0] ctrlComm_cphsh1VReg_77;
  wire [15 : 0] ctrlComm_cphsh1VReg_77$D_IN;
  wire ctrlComm_cphsh1VReg_77$EN;

  // register ctrlComm_cphsh1VReg_78
  reg [15 : 0] ctrlComm_cphsh1VReg_78;
  wire [15 : 0] ctrlComm_cphsh1VReg_78$D_IN;
  wire ctrlComm_cphsh1VReg_78$EN;

  // register ctrlComm_cphsh1VReg_79
  reg [15 : 0] ctrlComm_cphsh1VReg_79;
  wire [15 : 0] ctrlComm_cphsh1VReg_79$D_IN;
  wire ctrlComm_cphsh1VReg_79$EN;

  // register ctrlComm_cphsh1VReg_8
  reg [15 : 0] ctrlComm_cphsh1VReg_8;
  wire [15 : 0] ctrlComm_cphsh1VReg_8$D_IN;
  wire ctrlComm_cphsh1VReg_8$EN;

  // register ctrlComm_cphsh1VReg_80
  reg [15 : 0] ctrlComm_cphsh1VReg_80;
  wire [15 : 0] ctrlComm_cphsh1VReg_80$D_IN;
  wire ctrlComm_cphsh1VReg_80$EN;

  // register ctrlComm_cphsh1VReg_81
  reg [15 : 0] ctrlComm_cphsh1VReg_81;
  wire [15 : 0] ctrlComm_cphsh1VReg_81$D_IN;
  wire ctrlComm_cphsh1VReg_81$EN;

  // register ctrlComm_cphsh1VReg_82
  reg [15 : 0] ctrlComm_cphsh1VReg_82;
  wire [15 : 0] ctrlComm_cphsh1VReg_82$D_IN;
  wire ctrlComm_cphsh1VReg_82$EN;

  // register ctrlComm_cphsh1VReg_83
  reg [15 : 0] ctrlComm_cphsh1VReg_83;
  wire [15 : 0] ctrlComm_cphsh1VReg_83$D_IN;
  wire ctrlComm_cphsh1VReg_83$EN;

  // register ctrlComm_cphsh1VReg_84
  reg [15 : 0] ctrlComm_cphsh1VReg_84;
  wire [15 : 0] ctrlComm_cphsh1VReg_84$D_IN;
  wire ctrlComm_cphsh1VReg_84$EN;

  // register ctrlComm_cphsh1VReg_85
  reg [15 : 0] ctrlComm_cphsh1VReg_85;
  wire [15 : 0] ctrlComm_cphsh1VReg_85$D_IN;
  wire ctrlComm_cphsh1VReg_85$EN;

  // register ctrlComm_cphsh1VReg_86
  reg [15 : 0] ctrlComm_cphsh1VReg_86;
  wire [15 : 0] ctrlComm_cphsh1VReg_86$D_IN;
  wire ctrlComm_cphsh1VReg_86$EN;

  // register ctrlComm_cphsh1VReg_87
  reg [15 : 0] ctrlComm_cphsh1VReg_87;
  wire [15 : 0] ctrlComm_cphsh1VReg_87$D_IN;
  wire ctrlComm_cphsh1VReg_87$EN;

  // register ctrlComm_cphsh1VReg_88
  reg [15 : 0] ctrlComm_cphsh1VReg_88;
  wire [15 : 0] ctrlComm_cphsh1VReg_88$D_IN;
  wire ctrlComm_cphsh1VReg_88$EN;

  // register ctrlComm_cphsh1VReg_89
  reg [15 : 0] ctrlComm_cphsh1VReg_89;
  wire [15 : 0] ctrlComm_cphsh1VReg_89$D_IN;
  wire ctrlComm_cphsh1VReg_89$EN;

  // register ctrlComm_cphsh1VReg_9
  reg [15 : 0] ctrlComm_cphsh1VReg_9;
  wire [15 : 0] ctrlComm_cphsh1VReg_9$D_IN;
  wire ctrlComm_cphsh1VReg_9$EN;

  // register ctrlComm_cphsh1VReg_90
  reg [15 : 0] ctrlComm_cphsh1VReg_90;
  wire [15 : 0] ctrlComm_cphsh1VReg_90$D_IN;
  wire ctrlComm_cphsh1VReg_90$EN;

  // register ctrlComm_cphsh1VReg_91
  reg [15 : 0] ctrlComm_cphsh1VReg_91;
  wire [15 : 0] ctrlComm_cphsh1VReg_91$D_IN;
  wire ctrlComm_cphsh1VReg_91$EN;

  // register ctrlComm_cphsh1VReg_92
  reg [15 : 0] ctrlComm_cphsh1VReg_92;
  wire [15 : 0] ctrlComm_cphsh1VReg_92$D_IN;
  wire ctrlComm_cphsh1VReg_92$EN;

  // register ctrlComm_cphsh1VReg_93
  reg [15 : 0] ctrlComm_cphsh1VReg_93;
  wire [15 : 0] ctrlComm_cphsh1VReg_93$D_IN;
  wire ctrlComm_cphsh1VReg_93$EN;

  // register ctrlComm_cphsh1VReg_94
  reg [15 : 0] ctrlComm_cphsh1VReg_94;
  wire [15 : 0] ctrlComm_cphsh1VReg_94$D_IN;
  wire ctrlComm_cphsh1VReg_94$EN;

  // register ctrlComm_cphsh1VReg_95
  reg [15 : 0] ctrlComm_cphsh1VReg_95;
  wire [15 : 0] ctrlComm_cphsh1VReg_95$D_IN;
  wire ctrlComm_cphsh1VReg_95$EN;

  // register ctrlComm_cphsh1VReg_96
  reg [15 : 0] ctrlComm_cphsh1VReg_96;
  wire [15 : 0] ctrlComm_cphsh1VReg_96$D_IN;
  wire ctrlComm_cphsh1VReg_96$EN;

  // register ctrlComm_cphsh1VReg_97
  reg [15 : 0] ctrlComm_cphsh1VReg_97;
  wire [15 : 0] ctrlComm_cphsh1VReg_97$D_IN;
  wire ctrlComm_cphsh1VReg_97$EN;

  // register ctrlComm_cphsh1VReg_98
  reg [15 : 0] ctrlComm_cphsh1VReg_98;
  wire [15 : 0] ctrlComm_cphsh1VReg_98$D_IN;
  wire ctrlComm_cphsh1VReg_98$EN;

  // register ctrlComm_cphsh1VReg_99
  reg [15 : 0] ctrlComm_cphsh1VReg_99;
  wire [15 : 0] ctrlComm_cphsh1VReg_99$D_IN;
  wire ctrlComm_cphsh1VReg_99$EN;

  // register ctrlComm_encDoneProcessed
  reg ctrlComm_encDoneProcessed;
  wire ctrlComm_encDoneProcessed$D_IN, ctrlComm_encDoneProcessed$EN;

  // register ctrlComm_encState
  reg [1 : 0] ctrlComm_encState;
  reg [1 : 0] ctrlComm_encState$D_IN;
  wire ctrlComm_encState$EN;

  // register ctrlComm_plnsh0VReg_0
  reg [15 : 0] ctrlComm_plnsh0VReg_0;
  wire [15 : 0] ctrlComm_plnsh0VReg_0$D_IN;
  wire ctrlComm_plnsh0VReg_0$EN;

  // register ctrlComm_plnsh0VReg_1
  reg [15 : 0] ctrlComm_plnsh0VReg_1;
  wire [15 : 0] ctrlComm_plnsh0VReg_1$D_IN;
  wire ctrlComm_plnsh0VReg_1$EN;

  // register ctrlComm_plnsh0VReg_10
  reg [15 : 0] ctrlComm_plnsh0VReg_10;
  wire [15 : 0] ctrlComm_plnsh0VReg_10$D_IN;
  wire ctrlComm_plnsh0VReg_10$EN;

  // register ctrlComm_plnsh0VReg_11
  reg [15 : 0] ctrlComm_plnsh0VReg_11;
  wire [15 : 0] ctrlComm_plnsh0VReg_11$D_IN;
  wire ctrlComm_plnsh0VReg_11$EN;

  // register ctrlComm_plnsh0VReg_12
  reg [15 : 0] ctrlComm_plnsh0VReg_12;
  wire [15 : 0] ctrlComm_plnsh0VReg_12$D_IN;
  wire ctrlComm_plnsh0VReg_12$EN;

  // register ctrlComm_plnsh0VReg_13
  reg [15 : 0] ctrlComm_plnsh0VReg_13;
  wire [15 : 0] ctrlComm_plnsh0VReg_13$D_IN;
  wire ctrlComm_plnsh0VReg_13$EN;

  // register ctrlComm_plnsh0VReg_14
  reg [15 : 0] ctrlComm_plnsh0VReg_14;
  wire [15 : 0] ctrlComm_plnsh0VReg_14$D_IN;
  wire ctrlComm_plnsh0VReg_14$EN;

  // register ctrlComm_plnsh0VReg_15
  reg [15 : 0] ctrlComm_plnsh0VReg_15;
  wire [15 : 0] ctrlComm_plnsh0VReg_15$D_IN;
  wire ctrlComm_plnsh0VReg_15$EN;

  // register ctrlComm_plnsh0VReg_16
  reg [15 : 0] ctrlComm_plnsh0VReg_16;
  wire [15 : 0] ctrlComm_plnsh0VReg_16$D_IN;
  wire ctrlComm_plnsh0VReg_16$EN;

  // register ctrlComm_plnsh0VReg_17
  reg [15 : 0] ctrlComm_plnsh0VReg_17;
  wire [15 : 0] ctrlComm_plnsh0VReg_17$D_IN;
  wire ctrlComm_plnsh0VReg_17$EN;

  // register ctrlComm_plnsh0VReg_18
  reg [15 : 0] ctrlComm_plnsh0VReg_18;
  wire [15 : 0] ctrlComm_plnsh0VReg_18$D_IN;
  wire ctrlComm_plnsh0VReg_18$EN;

  // register ctrlComm_plnsh0VReg_19
  reg [15 : 0] ctrlComm_plnsh0VReg_19;
  wire [15 : 0] ctrlComm_plnsh0VReg_19$D_IN;
  wire ctrlComm_plnsh0VReg_19$EN;

  // register ctrlComm_plnsh0VReg_2
  reg [15 : 0] ctrlComm_plnsh0VReg_2;
  wire [15 : 0] ctrlComm_plnsh0VReg_2$D_IN;
  wire ctrlComm_plnsh0VReg_2$EN;

  // register ctrlComm_plnsh0VReg_20
  reg [15 : 0] ctrlComm_plnsh0VReg_20;
  wire [15 : 0] ctrlComm_plnsh0VReg_20$D_IN;
  wire ctrlComm_plnsh0VReg_20$EN;

  // register ctrlComm_plnsh0VReg_21
  reg [15 : 0] ctrlComm_plnsh0VReg_21;
  wire [15 : 0] ctrlComm_plnsh0VReg_21$D_IN;
  wire ctrlComm_plnsh0VReg_21$EN;

  // register ctrlComm_plnsh0VReg_22
  reg [15 : 0] ctrlComm_plnsh0VReg_22;
  wire [15 : 0] ctrlComm_plnsh0VReg_22$D_IN;
  wire ctrlComm_plnsh0VReg_22$EN;

  // register ctrlComm_plnsh0VReg_23
  reg [15 : 0] ctrlComm_plnsh0VReg_23;
  wire [15 : 0] ctrlComm_plnsh0VReg_23$D_IN;
  wire ctrlComm_plnsh0VReg_23$EN;

  // register ctrlComm_plnsh0VReg_24
  reg [15 : 0] ctrlComm_plnsh0VReg_24;
  wire [15 : 0] ctrlComm_plnsh0VReg_24$D_IN;
  wire ctrlComm_plnsh0VReg_24$EN;

  // register ctrlComm_plnsh0VReg_25
  reg [15 : 0] ctrlComm_plnsh0VReg_25;
  wire [15 : 0] ctrlComm_plnsh0VReg_25$D_IN;
  wire ctrlComm_plnsh0VReg_25$EN;

  // register ctrlComm_plnsh0VReg_26
  reg [15 : 0] ctrlComm_plnsh0VReg_26;
  wire [15 : 0] ctrlComm_plnsh0VReg_26$D_IN;
  wire ctrlComm_plnsh0VReg_26$EN;

  // register ctrlComm_plnsh0VReg_27
  reg [15 : 0] ctrlComm_plnsh0VReg_27;
  wire [15 : 0] ctrlComm_plnsh0VReg_27$D_IN;
  wire ctrlComm_plnsh0VReg_27$EN;

  // register ctrlComm_plnsh0VReg_28
  reg [15 : 0] ctrlComm_plnsh0VReg_28;
  wire [15 : 0] ctrlComm_plnsh0VReg_28$D_IN;
  wire ctrlComm_plnsh0VReg_28$EN;

  // register ctrlComm_plnsh0VReg_29
  reg [15 : 0] ctrlComm_plnsh0VReg_29;
  wire [15 : 0] ctrlComm_plnsh0VReg_29$D_IN;
  wire ctrlComm_plnsh0VReg_29$EN;

  // register ctrlComm_plnsh0VReg_3
  reg [15 : 0] ctrlComm_plnsh0VReg_3;
  wire [15 : 0] ctrlComm_plnsh0VReg_3$D_IN;
  wire ctrlComm_plnsh0VReg_3$EN;

  // register ctrlComm_plnsh0VReg_30
  reg [15 : 0] ctrlComm_plnsh0VReg_30;
  wire [15 : 0] ctrlComm_plnsh0VReg_30$D_IN;
  wire ctrlComm_plnsh0VReg_30$EN;

  // register ctrlComm_plnsh0VReg_31
  reg [15 : 0] ctrlComm_plnsh0VReg_31;
  wire [15 : 0] ctrlComm_plnsh0VReg_31$D_IN;
  wire ctrlComm_plnsh0VReg_31$EN;

  // register ctrlComm_plnsh0VReg_32
  reg [15 : 0] ctrlComm_plnsh0VReg_32;
  wire [15 : 0] ctrlComm_plnsh0VReg_32$D_IN;
  wire ctrlComm_plnsh0VReg_32$EN;

  // register ctrlComm_plnsh0VReg_33
  reg [15 : 0] ctrlComm_plnsh0VReg_33;
  wire [15 : 0] ctrlComm_plnsh0VReg_33$D_IN;
  wire ctrlComm_plnsh0VReg_33$EN;

  // register ctrlComm_plnsh0VReg_34
  reg [15 : 0] ctrlComm_plnsh0VReg_34;
  wire [15 : 0] ctrlComm_plnsh0VReg_34$D_IN;
  wire ctrlComm_plnsh0VReg_34$EN;

  // register ctrlComm_plnsh0VReg_35
  reg [15 : 0] ctrlComm_plnsh0VReg_35;
  wire [15 : 0] ctrlComm_plnsh0VReg_35$D_IN;
  wire ctrlComm_plnsh0VReg_35$EN;

  // register ctrlComm_plnsh0VReg_36
  reg [15 : 0] ctrlComm_plnsh0VReg_36;
  wire [15 : 0] ctrlComm_plnsh0VReg_36$D_IN;
  wire ctrlComm_plnsh0VReg_36$EN;

  // register ctrlComm_plnsh0VReg_37
  reg [15 : 0] ctrlComm_plnsh0VReg_37;
  wire [15 : 0] ctrlComm_plnsh0VReg_37$D_IN;
  wire ctrlComm_plnsh0VReg_37$EN;

  // register ctrlComm_plnsh0VReg_38
  reg [15 : 0] ctrlComm_plnsh0VReg_38;
  wire [15 : 0] ctrlComm_plnsh0VReg_38$D_IN;
  wire ctrlComm_plnsh0VReg_38$EN;

  // register ctrlComm_plnsh0VReg_39
  reg [15 : 0] ctrlComm_plnsh0VReg_39;
  wire [15 : 0] ctrlComm_plnsh0VReg_39$D_IN;
  wire ctrlComm_plnsh0VReg_39$EN;

  // register ctrlComm_plnsh0VReg_4
  reg [15 : 0] ctrlComm_plnsh0VReg_4;
  wire [15 : 0] ctrlComm_plnsh0VReg_4$D_IN;
  wire ctrlComm_plnsh0VReg_4$EN;

  // register ctrlComm_plnsh0VReg_40
  reg [15 : 0] ctrlComm_plnsh0VReg_40;
  wire [15 : 0] ctrlComm_plnsh0VReg_40$D_IN;
  wire ctrlComm_plnsh0VReg_40$EN;

  // register ctrlComm_plnsh0VReg_41
  reg [15 : 0] ctrlComm_plnsh0VReg_41;
  wire [15 : 0] ctrlComm_plnsh0VReg_41$D_IN;
  wire ctrlComm_plnsh0VReg_41$EN;

  // register ctrlComm_plnsh0VReg_42
  reg [15 : 0] ctrlComm_plnsh0VReg_42;
  wire [15 : 0] ctrlComm_plnsh0VReg_42$D_IN;
  wire ctrlComm_plnsh0VReg_42$EN;

  // register ctrlComm_plnsh0VReg_43
  reg [15 : 0] ctrlComm_plnsh0VReg_43;
  wire [15 : 0] ctrlComm_plnsh0VReg_43$D_IN;
  wire ctrlComm_plnsh0VReg_43$EN;

  // register ctrlComm_plnsh0VReg_44
  reg [15 : 0] ctrlComm_plnsh0VReg_44;
  wire [15 : 0] ctrlComm_plnsh0VReg_44$D_IN;
  wire ctrlComm_plnsh0VReg_44$EN;

  // register ctrlComm_plnsh0VReg_45
  reg [15 : 0] ctrlComm_plnsh0VReg_45;
  wire [15 : 0] ctrlComm_plnsh0VReg_45$D_IN;
  wire ctrlComm_plnsh0VReg_45$EN;

  // register ctrlComm_plnsh0VReg_46
  reg [15 : 0] ctrlComm_plnsh0VReg_46;
  wire [15 : 0] ctrlComm_plnsh0VReg_46$D_IN;
  wire ctrlComm_plnsh0VReg_46$EN;

  // register ctrlComm_plnsh0VReg_47
  reg [15 : 0] ctrlComm_plnsh0VReg_47;
  wire [15 : 0] ctrlComm_plnsh0VReg_47$D_IN;
  wire ctrlComm_plnsh0VReg_47$EN;

  // register ctrlComm_plnsh0VReg_48
  reg [15 : 0] ctrlComm_plnsh0VReg_48;
  wire [15 : 0] ctrlComm_plnsh0VReg_48$D_IN;
  wire ctrlComm_plnsh0VReg_48$EN;

  // register ctrlComm_plnsh0VReg_49
  reg [15 : 0] ctrlComm_plnsh0VReg_49;
  wire [15 : 0] ctrlComm_plnsh0VReg_49$D_IN;
  wire ctrlComm_plnsh0VReg_49$EN;

  // register ctrlComm_plnsh0VReg_5
  reg [15 : 0] ctrlComm_plnsh0VReg_5;
  wire [15 : 0] ctrlComm_plnsh0VReg_5$D_IN;
  wire ctrlComm_plnsh0VReg_5$EN;

  // register ctrlComm_plnsh0VReg_50
  reg [15 : 0] ctrlComm_plnsh0VReg_50;
  wire [15 : 0] ctrlComm_plnsh0VReg_50$D_IN;
  wire ctrlComm_plnsh0VReg_50$EN;

  // register ctrlComm_plnsh0VReg_51
  reg [15 : 0] ctrlComm_plnsh0VReg_51;
  wire [15 : 0] ctrlComm_plnsh0VReg_51$D_IN;
  wire ctrlComm_plnsh0VReg_51$EN;

  // register ctrlComm_plnsh0VReg_52
  reg [15 : 0] ctrlComm_plnsh0VReg_52;
  wire [15 : 0] ctrlComm_plnsh0VReg_52$D_IN;
  wire ctrlComm_plnsh0VReg_52$EN;

  // register ctrlComm_plnsh0VReg_53
  reg [15 : 0] ctrlComm_plnsh0VReg_53;
  wire [15 : 0] ctrlComm_plnsh0VReg_53$D_IN;
  wire ctrlComm_plnsh0VReg_53$EN;

  // register ctrlComm_plnsh0VReg_54
  reg [15 : 0] ctrlComm_plnsh0VReg_54;
  wire [15 : 0] ctrlComm_plnsh0VReg_54$D_IN;
  wire ctrlComm_plnsh0VReg_54$EN;

  // register ctrlComm_plnsh0VReg_55
  reg [15 : 0] ctrlComm_plnsh0VReg_55;
  wire [15 : 0] ctrlComm_plnsh0VReg_55$D_IN;
  wire ctrlComm_plnsh0VReg_55$EN;

  // register ctrlComm_plnsh0VReg_56
  reg [15 : 0] ctrlComm_plnsh0VReg_56;
  wire [15 : 0] ctrlComm_plnsh0VReg_56$D_IN;
  wire ctrlComm_plnsh0VReg_56$EN;

  // register ctrlComm_plnsh0VReg_57
  reg [15 : 0] ctrlComm_plnsh0VReg_57;
  wire [15 : 0] ctrlComm_plnsh0VReg_57$D_IN;
  wire ctrlComm_plnsh0VReg_57$EN;

  // register ctrlComm_plnsh0VReg_58
  reg [15 : 0] ctrlComm_plnsh0VReg_58;
  wire [15 : 0] ctrlComm_plnsh0VReg_58$D_IN;
  wire ctrlComm_plnsh0VReg_58$EN;

  // register ctrlComm_plnsh0VReg_59
  reg [15 : 0] ctrlComm_plnsh0VReg_59;
  wire [15 : 0] ctrlComm_plnsh0VReg_59$D_IN;
  wire ctrlComm_plnsh0VReg_59$EN;

  // register ctrlComm_plnsh0VReg_6
  reg [15 : 0] ctrlComm_plnsh0VReg_6;
  wire [15 : 0] ctrlComm_plnsh0VReg_6$D_IN;
  wire ctrlComm_plnsh0VReg_6$EN;

  // register ctrlComm_plnsh0VReg_60
  reg [15 : 0] ctrlComm_plnsh0VReg_60;
  wire [15 : 0] ctrlComm_plnsh0VReg_60$D_IN;
  wire ctrlComm_plnsh0VReg_60$EN;

  // register ctrlComm_plnsh0VReg_61
  reg [15 : 0] ctrlComm_plnsh0VReg_61;
  wire [15 : 0] ctrlComm_plnsh0VReg_61$D_IN;
  wire ctrlComm_plnsh0VReg_61$EN;

  // register ctrlComm_plnsh0VReg_62
  reg [15 : 0] ctrlComm_plnsh0VReg_62;
  wire [15 : 0] ctrlComm_plnsh0VReg_62$D_IN;
  wire ctrlComm_plnsh0VReg_62$EN;

  // register ctrlComm_plnsh0VReg_63
  reg [15 : 0] ctrlComm_plnsh0VReg_63;
  wire [15 : 0] ctrlComm_plnsh0VReg_63$D_IN;
  wire ctrlComm_plnsh0VReg_63$EN;

  // register ctrlComm_plnsh0VReg_64
  reg [15 : 0] ctrlComm_plnsh0VReg_64;
  wire [15 : 0] ctrlComm_plnsh0VReg_64$D_IN;
  wire ctrlComm_plnsh0VReg_64$EN;

  // register ctrlComm_plnsh0VReg_65
  reg [15 : 0] ctrlComm_plnsh0VReg_65;
  wire [15 : 0] ctrlComm_plnsh0VReg_65$D_IN;
  wire ctrlComm_plnsh0VReg_65$EN;

  // register ctrlComm_plnsh0VReg_66
  reg [15 : 0] ctrlComm_plnsh0VReg_66;
  wire [15 : 0] ctrlComm_plnsh0VReg_66$D_IN;
  wire ctrlComm_plnsh0VReg_66$EN;

  // register ctrlComm_plnsh0VReg_67
  reg [15 : 0] ctrlComm_plnsh0VReg_67;
  wire [15 : 0] ctrlComm_plnsh0VReg_67$D_IN;
  wire ctrlComm_plnsh0VReg_67$EN;

  // register ctrlComm_plnsh0VReg_68
  reg [15 : 0] ctrlComm_plnsh0VReg_68;
  wire [15 : 0] ctrlComm_plnsh0VReg_68$D_IN;
  wire ctrlComm_plnsh0VReg_68$EN;

  // register ctrlComm_plnsh0VReg_69
  reg [15 : 0] ctrlComm_plnsh0VReg_69;
  wire [15 : 0] ctrlComm_plnsh0VReg_69$D_IN;
  wire ctrlComm_plnsh0VReg_69$EN;

  // register ctrlComm_plnsh0VReg_7
  reg [15 : 0] ctrlComm_plnsh0VReg_7;
  wire [15 : 0] ctrlComm_plnsh0VReg_7$D_IN;
  wire ctrlComm_plnsh0VReg_7$EN;

  // register ctrlComm_plnsh0VReg_70
  reg [15 : 0] ctrlComm_plnsh0VReg_70;
  wire [15 : 0] ctrlComm_plnsh0VReg_70$D_IN;
  wire ctrlComm_plnsh0VReg_70$EN;

  // register ctrlComm_plnsh0VReg_71
  reg [15 : 0] ctrlComm_plnsh0VReg_71;
  wire [15 : 0] ctrlComm_plnsh0VReg_71$D_IN;
  wire ctrlComm_plnsh0VReg_71$EN;

  // register ctrlComm_plnsh0VReg_72
  reg [15 : 0] ctrlComm_plnsh0VReg_72;
  wire [15 : 0] ctrlComm_plnsh0VReg_72$D_IN;
  wire ctrlComm_plnsh0VReg_72$EN;

  // register ctrlComm_plnsh0VReg_73
  reg [15 : 0] ctrlComm_plnsh0VReg_73;
  wire [15 : 0] ctrlComm_plnsh0VReg_73$D_IN;
  wire ctrlComm_plnsh0VReg_73$EN;

  // register ctrlComm_plnsh0VReg_74
  reg [15 : 0] ctrlComm_plnsh0VReg_74;
  wire [15 : 0] ctrlComm_plnsh0VReg_74$D_IN;
  wire ctrlComm_plnsh0VReg_74$EN;

  // register ctrlComm_plnsh0VReg_75
  reg [15 : 0] ctrlComm_plnsh0VReg_75;
  wire [15 : 0] ctrlComm_plnsh0VReg_75$D_IN;
  wire ctrlComm_plnsh0VReg_75$EN;

  // register ctrlComm_plnsh0VReg_76
  reg [15 : 0] ctrlComm_plnsh0VReg_76;
  wire [15 : 0] ctrlComm_plnsh0VReg_76$D_IN;
  wire ctrlComm_plnsh0VReg_76$EN;

  // register ctrlComm_plnsh0VReg_77
  reg [15 : 0] ctrlComm_plnsh0VReg_77;
  wire [15 : 0] ctrlComm_plnsh0VReg_77$D_IN;
  wire ctrlComm_plnsh0VReg_77$EN;

  // register ctrlComm_plnsh0VReg_78
  reg [15 : 0] ctrlComm_plnsh0VReg_78;
  wire [15 : 0] ctrlComm_plnsh0VReg_78$D_IN;
  wire ctrlComm_plnsh0VReg_78$EN;

  // register ctrlComm_plnsh0VReg_79
  reg [15 : 0] ctrlComm_plnsh0VReg_79;
  wire [15 : 0] ctrlComm_plnsh0VReg_79$D_IN;
  wire ctrlComm_plnsh0VReg_79$EN;

  // register ctrlComm_plnsh0VReg_8
  reg [15 : 0] ctrlComm_plnsh0VReg_8;
  wire [15 : 0] ctrlComm_plnsh0VReg_8$D_IN;
  wire ctrlComm_plnsh0VReg_8$EN;

  // register ctrlComm_plnsh0VReg_80
  reg [15 : 0] ctrlComm_plnsh0VReg_80;
  wire [15 : 0] ctrlComm_plnsh0VReg_80$D_IN;
  wire ctrlComm_plnsh0VReg_80$EN;

  // register ctrlComm_plnsh0VReg_81
  reg [15 : 0] ctrlComm_plnsh0VReg_81;
  wire [15 : 0] ctrlComm_plnsh0VReg_81$D_IN;
  wire ctrlComm_plnsh0VReg_81$EN;

  // register ctrlComm_plnsh0VReg_82
  reg [15 : 0] ctrlComm_plnsh0VReg_82;
  wire [15 : 0] ctrlComm_plnsh0VReg_82$D_IN;
  wire ctrlComm_plnsh0VReg_82$EN;

  // register ctrlComm_plnsh0VReg_83
  reg [15 : 0] ctrlComm_plnsh0VReg_83;
  wire [15 : 0] ctrlComm_plnsh0VReg_83$D_IN;
  wire ctrlComm_plnsh0VReg_83$EN;

  // register ctrlComm_plnsh0VReg_84
  reg [15 : 0] ctrlComm_plnsh0VReg_84;
  wire [15 : 0] ctrlComm_plnsh0VReg_84$D_IN;
  wire ctrlComm_plnsh0VReg_84$EN;

  // register ctrlComm_plnsh0VReg_85
  reg [15 : 0] ctrlComm_plnsh0VReg_85;
  wire [15 : 0] ctrlComm_plnsh0VReg_85$D_IN;
  wire ctrlComm_plnsh0VReg_85$EN;

  // register ctrlComm_plnsh0VReg_86
  reg [15 : 0] ctrlComm_plnsh0VReg_86;
  wire [15 : 0] ctrlComm_plnsh0VReg_86$D_IN;
  wire ctrlComm_plnsh0VReg_86$EN;

  // register ctrlComm_plnsh0VReg_87
  reg [15 : 0] ctrlComm_plnsh0VReg_87;
  wire [15 : 0] ctrlComm_plnsh0VReg_87$D_IN;
  wire ctrlComm_plnsh0VReg_87$EN;

  // register ctrlComm_plnsh0VReg_88
  reg [15 : 0] ctrlComm_plnsh0VReg_88;
  wire [15 : 0] ctrlComm_plnsh0VReg_88$D_IN;
  wire ctrlComm_plnsh0VReg_88$EN;

  // register ctrlComm_plnsh0VReg_89
  reg [15 : 0] ctrlComm_plnsh0VReg_89;
  wire [15 : 0] ctrlComm_plnsh0VReg_89$D_IN;
  wire ctrlComm_plnsh0VReg_89$EN;

  // register ctrlComm_plnsh0VReg_9
  reg [15 : 0] ctrlComm_plnsh0VReg_9;
  wire [15 : 0] ctrlComm_plnsh0VReg_9$D_IN;
  wire ctrlComm_plnsh0VReg_9$EN;

  // register ctrlComm_plnsh0VReg_90
  reg [15 : 0] ctrlComm_plnsh0VReg_90;
  wire [15 : 0] ctrlComm_plnsh0VReg_90$D_IN;
  wire ctrlComm_plnsh0VReg_90$EN;

  // register ctrlComm_plnsh0VReg_91
  reg [15 : 0] ctrlComm_plnsh0VReg_91;
  wire [15 : 0] ctrlComm_plnsh0VReg_91$D_IN;
  wire ctrlComm_plnsh0VReg_91$EN;

  // register ctrlComm_plnsh0VReg_92
  reg [15 : 0] ctrlComm_plnsh0VReg_92;
  wire [15 : 0] ctrlComm_plnsh0VReg_92$D_IN;
  wire ctrlComm_plnsh0VReg_92$EN;

  // register ctrlComm_plnsh0VReg_93
  reg [15 : 0] ctrlComm_plnsh0VReg_93;
  wire [15 : 0] ctrlComm_plnsh0VReg_93$D_IN;
  wire ctrlComm_plnsh0VReg_93$EN;

  // register ctrlComm_plnsh0VReg_94
  reg [15 : 0] ctrlComm_plnsh0VReg_94;
  wire [15 : 0] ctrlComm_plnsh0VReg_94$D_IN;
  wire ctrlComm_plnsh0VReg_94$EN;

  // register ctrlComm_plnsh0VReg_95
  reg [15 : 0] ctrlComm_plnsh0VReg_95;
  wire [15 : 0] ctrlComm_plnsh0VReg_95$D_IN;
  wire ctrlComm_plnsh0VReg_95$EN;

  // register ctrlComm_plnsh0VReg_96
  reg [15 : 0] ctrlComm_plnsh0VReg_96;
  wire [15 : 0] ctrlComm_plnsh0VReg_96$D_IN;
  wire ctrlComm_plnsh0VReg_96$EN;

  // register ctrlComm_plnsh0VReg_97
  reg [15 : 0] ctrlComm_plnsh0VReg_97;
  wire [15 : 0] ctrlComm_plnsh0VReg_97$D_IN;
  wire ctrlComm_plnsh0VReg_97$EN;

  // register ctrlComm_plnsh0VReg_98
  reg [15 : 0] ctrlComm_plnsh0VReg_98;
  wire [15 : 0] ctrlComm_plnsh0VReg_98$D_IN;
  wire ctrlComm_plnsh0VReg_98$EN;

  // register ctrlComm_plnsh0VReg_99
  reg [15 : 0] ctrlComm_plnsh0VReg_99;
  wire [15 : 0] ctrlComm_plnsh0VReg_99$D_IN;
  wire ctrlComm_plnsh0VReg_99$EN;

  // register ctrlComm_plnsh1VReg_0
  reg [15 : 0] ctrlComm_plnsh1VReg_0;
  wire [15 : 0] ctrlComm_plnsh1VReg_0$D_IN;
  wire ctrlComm_plnsh1VReg_0$EN;

  // register ctrlComm_plnsh1VReg_1
  reg [15 : 0] ctrlComm_plnsh1VReg_1;
  wire [15 : 0] ctrlComm_plnsh1VReg_1$D_IN;
  wire ctrlComm_plnsh1VReg_1$EN;

  // register ctrlComm_plnsh1VReg_10
  reg [15 : 0] ctrlComm_plnsh1VReg_10;
  wire [15 : 0] ctrlComm_plnsh1VReg_10$D_IN;
  wire ctrlComm_plnsh1VReg_10$EN;

  // register ctrlComm_plnsh1VReg_11
  reg [15 : 0] ctrlComm_plnsh1VReg_11;
  wire [15 : 0] ctrlComm_plnsh1VReg_11$D_IN;
  wire ctrlComm_plnsh1VReg_11$EN;

  // register ctrlComm_plnsh1VReg_12
  reg [15 : 0] ctrlComm_plnsh1VReg_12;
  wire [15 : 0] ctrlComm_plnsh1VReg_12$D_IN;
  wire ctrlComm_plnsh1VReg_12$EN;

  // register ctrlComm_plnsh1VReg_13
  reg [15 : 0] ctrlComm_plnsh1VReg_13;
  wire [15 : 0] ctrlComm_plnsh1VReg_13$D_IN;
  wire ctrlComm_plnsh1VReg_13$EN;

  // register ctrlComm_plnsh1VReg_14
  reg [15 : 0] ctrlComm_plnsh1VReg_14;
  wire [15 : 0] ctrlComm_plnsh1VReg_14$D_IN;
  wire ctrlComm_plnsh1VReg_14$EN;

  // register ctrlComm_plnsh1VReg_15
  reg [15 : 0] ctrlComm_plnsh1VReg_15;
  wire [15 : 0] ctrlComm_plnsh1VReg_15$D_IN;
  wire ctrlComm_plnsh1VReg_15$EN;

  // register ctrlComm_plnsh1VReg_16
  reg [15 : 0] ctrlComm_plnsh1VReg_16;
  wire [15 : 0] ctrlComm_plnsh1VReg_16$D_IN;
  wire ctrlComm_plnsh1VReg_16$EN;

  // register ctrlComm_plnsh1VReg_17
  reg [15 : 0] ctrlComm_plnsh1VReg_17;
  wire [15 : 0] ctrlComm_plnsh1VReg_17$D_IN;
  wire ctrlComm_plnsh1VReg_17$EN;

  // register ctrlComm_plnsh1VReg_18
  reg [15 : 0] ctrlComm_plnsh1VReg_18;
  wire [15 : 0] ctrlComm_plnsh1VReg_18$D_IN;
  wire ctrlComm_plnsh1VReg_18$EN;

  // register ctrlComm_plnsh1VReg_19
  reg [15 : 0] ctrlComm_plnsh1VReg_19;
  wire [15 : 0] ctrlComm_plnsh1VReg_19$D_IN;
  wire ctrlComm_plnsh1VReg_19$EN;

  // register ctrlComm_plnsh1VReg_2
  reg [15 : 0] ctrlComm_plnsh1VReg_2;
  wire [15 : 0] ctrlComm_plnsh1VReg_2$D_IN;
  wire ctrlComm_plnsh1VReg_2$EN;

  // register ctrlComm_plnsh1VReg_20
  reg [15 : 0] ctrlComm_plnsh1VReg_20;
  wire [15 : 0] ctrlComm_plnsh1VReg_20$D_IN;
  wire ctrlComm_plnsh1VReg_20$EN;

  // register ctrlComm_plnsh1VReg_21
  reg [15 : 0] ctrlComm_plnsh1VReg_21;
  wire [15 : 0] ctrlComm_plnsh1VReg_21$D_IN;
  wire ctrlComm_plnsh1VReg_21$EN;

  // register ctrlComm_plnsh1VReg_22
  reg [15 : 0] ctrlComm_plnsh1VReg_22;
  wire [15 : 0] ctrlComm_plnsh1VReg_22$D_IN;
  wire ctrlComm_plnsh1VReg_22$EN;

  // register ctrlComm_plnsh1VReg_23
  reg [15 : 0] ctrlComm_plnsh1VReg_23;
  wire [15 : 0] ctrlComm_plnsh1VReg_23$D_IN;
  wire ctrlComm_plnsh1VReg_23$EN;

  // register ctrlComm_plnsh1VReg_24
  reg [15 : 0] ctrlComm_plnsh1VReg_24;
  wire [15 : 0] ctrlComm_plnsh1VReg_24$D_IN;
  wire ctrlComm_plnsh1VReg_24$EN;

  // register ctrlComm_plnsh1VReg_25
  reg [15 : 0] ctrlComm_plnsh1VReg_25;
  wire [15 : 0] ctrlComm_plnsh1VReg_25$D_IN;
  wire ctrlComm_plnsh1VReg_25$EN;

  // register ctrlComm_plnsh1VReg_26
  reg [15 : 0] ctrlComm_plnsh1VReg_26;
  wire [15 : 0] ctrlComm_plnsh1VReg_26$D_IN;
  wire ctrlComm_plnsh1VReg_26$EN;

  // register ctrlComm_plnsh1VReg_27
  reg [15 : 0] ctrlComm_plnsh1VReg_27;
  wire [15 : 0] ctrlComm_plnsh1VReg_27$D_IN;
  wire ctrlComm_plnsh1VReg_27$EN;

  // register ctrlComm_plnsh1VReg_28
  reg [15 : 0] ctrlComm_plnsh1VReg_28;
  wire [15 : 0] ctrlComm_plnsh1VReg_28$D_IN;
  wire ctrlComm_plnsh1VReg_28$EN;

  // register ctrlComm_plnsh1VReg_29
  reg [15 : 0] ctrlComm_plnsh1VReg_29;
  wire [15 : 0] ctrlComm_plnsh1VReg_29$D_IN;
  wire ctrlComm_plnsh1VReg_29$EN;

  // register ctrlComm_plnsh1VReg_3
  reg [15 : 0] ctrlComm_plnsh1VReg_3;
  wire [15 : 0] ctrlComm_plnsh1VReg_3$D_IN;
  wire ctrlComm_plnsh1VReg_3$EN;

  // register ctrlComm_plnsh1VReg_30
  reg [15 : 0] ctrlComm_plnsh1VReg_30;
  wire [15 : 0] ctrlComm_plnsh1VReg_30$D_IN;
  wire ctrlComm_plnsh1VReg_30$EN;

  // register ctrlComm_plnsh1VReg_31
  reg [15 : 0] ctrlComm_plnsh1VReg_31;
  wire [15 : 0] ctrlComm_plnsh1VReg_31$D_IN;
  wire ctrlComm_plnsh1VReg_31$EN;

  // register ctrlComm_plnsh1VReg_32
  reg [15 : 0] ctrlComm_plnsh1VReg_32;
  wire [15 : 0] ctrlComm_plnsh1VReg_32$D_IN;
  wire ctrlComm_plnsh1VReg_32$EN;

  // register ctrlComm_plnsh1VReg_33
  reg [15 : 0] ctrlComm_plnsh1VReg_33;
  wire [15 : 0] ctrlComm_plnsh1VReg_33$D_IN;
  wire ctrlComm_plnsh1VReg_33$EN;

  // register ctrlComm_plnsh1VReg_34
  reg [15 : 0] ctrlComm_plnsh1VReg_34;
  wire [15 : 0] ctrlComm_plnsh1VReg_34$D_IN;
  wire ctrlComm_plnsh1VReg_34$EN;

  // register ctrlComm_plnsh1VReg_35
  reg [15 : 0] ctrlComm_plnsh1VReg_35;
  wire [15 : 0] ctrlComm_plnsh1VReg_35$D_IN;
  wire ctrlComm_plnsh1VReg_35$EN;

  // register ctrlComm_plnsh1VReg_36
  reg [15 : 0] ctrlComm_plnsh1VReg_36;
  wire [15 : 0] ctrlComm_plnsh1VReg_36$D_IN;
  wire ctrlComm_plnsh1VReg_36$EN;

  // register ctrlComm_plnsh1VReg_37
  reg [15 : 0] ctrlComm_plnsh1VReg_37;
  wire [15 : 0] ctrlComm_plnsh1VReg_37$D_IN;
  wire ctrlComm_plnsh1VReg_37$EN;

  // register ctrlComm_plnsh1VReg_38
  reg [15 : 0] ctrlComm_plnsh1VReg_38;
  wire [15 : 0] ctrlComm_plnsh1VReg_38$D_IN;
  wire ctrlComm_plnsh1VReg_38$EN;

  // register ctrlComm_plnsh1VReg_39
  reg [15 : 0] ctrlComm_plnsh1VReg_39;
  wire [15 : 0] ctrlComm_plnsh1VReg_39$D_IN;
  wire ctrlComm_plnsh1VReg_39$EN;

  // register ctrlComm_plnsh1VReg_4
  reg [15 : 0] ctrlComm_plnsh1VReg_4;
  wire [15 : 0] ctrlComm_plnsh1VReg_4$D_IN;
  wire ctrlComm_plnsh1VReg_4$EN;

  // register ctrlComm_plnsh1VReg_40
  reg [15 : 0] ctrlComm_plnsh1VReg_40;
  wire [15 : 0] ctrlComm_plnsh1VReg_40$D_IN;
  wire ctrlComm_plnsh1VReg_40$EN;

  // register ctrlComm_plnsh1VReg_41
  reg [15 : 0] ctrlComm_plnsh1VReg_41;
  wire [15 : 0] ctrlComm_plnsh1VReg_41$D_IN;
  wire ctrlComm_plnsh1VReg_41$EN;

  // register ctrlComm_plnsh1VReg_42
  reg [15 : 0] ctrlComm_plnsh1VReg_42;
  wire [15 : 0] ctrlComm_plnsh1VReg_42$D_IN;
  wire ctrlComm_plnsh1VReg_42$EN;

  // register ctrlComm_plnsh1VReg_43
  reg [15 : 0] ctrlComm_plnsh1VReg_43;
  wire [15 : 0] ctrlComm_plnsh1VReg_43$D_IN;
  wire ctrlComm_plnsh1VReg_43$EN;

  // register ctrlComm_plnsh1VReg_44
  reg [15 : 0] ctrlComm_plnsh1VReg_44;
  wire [15 : 0] ctrlComm_plnsh1VReg_44$D_IN;
  wire ctrlComm_plnsh1VReg_44$EN;

  // register ctrlComm_plnsh1VReg_45
  reg [15 : 0] ctrlComm_plnsh1VReg_45;
  wire [15 : 0] ctrlComm_plnsh1VReg_45$D_IN;
  wire ctrlComm_plnsh1VReg_45$EN;

  // register ctrlComm_plnsh1VReg_46
  reg [15 : 0] ctrlComm_plnsh1VReg_46;
  wire [15 : 0] ctrlComm_plnsh1VReg_46$D_IN;
  wire ctrlComm_plnsh1VReg_46$EN;

  // register ctrlComm_plnsh1VReg_47
  reg [15 : 0] ctrlComm_plnsh1VReg_47;
  wire [15 : 0] ctrlComm_plnsh1VReg_47$D_IN;
  wire ctrlComm_plnsh1VReg_47$EN;

  // register ctrlComm_plnsh1VReg_48
  reg [15 : 0] ctrlComm_plnsh1VReg_48;
  wire [15 : 0] ctrlComm_plnsh1VReg_48$D_IN;
  wire ctrlComm_plnsh1VReg_48$EN;

  // register ctrlComm_plnsh1VReg_49
  reg [15 : 0] ctrlComm_plnsh1VReg_49;
  wire [15 : 0] ctrlComm_plnsh1VReg_49$D_IN;
  wire ctrlComm_plnsh1VReg_49$EN;

  // register ctrlComm_plnsh1VReg_5
  reg [15 : 0] ctrlComm_plnsh1VReg_5;
  wire [15 : 0] ctrlComm_plnsh1VReg_5$D_IN;
  wire ctrlComm_plnsh1VReg_5$EN;

  // register ctrlComm_plnsh1VReg_50
  reg [15 : 0] ctrlComm_plnsh1VReg_50;
  wire [15 : 0] ctrlComm_plnsh1VReg_50$D_IN;
  wire ctrlComm_plnsh1VReg_50$EN;

  // register ctrlComm_plnsh1VReg_51
  reg [15 : 0] ctrlComm_plnsh1VReg_51;
  wire [15 : 0] ctrlComm_plnsh1VReg_51$D_IN;
  wire ctrlComm_plnsh1VReg_51$EN;

  // register ctrlComm_plnsh1VReg_52
  reg [15 : 0] ctrlComm_plnsh1VReg_52;
  wire [15 : 0] ctrlComm_plnsh1VReg_52$D_IN;
  wire ctrlComm_plnsh1VReg_52$EN;

  // register ctrlComm_plnsh1VReg_53
  reg [15 : 0] ctrlComm_plnsh1VReg_53;
  wire [15 : 0] ctrlComm_plnsh1VReg_53$D_IN;
  wire ctrlComm_plnsh1VReg_53$EN;

  // register ctrlComm_plnsh1VReg_54
  reg [15 : 0] ctrlComm_plnsh1VReg_54;
  wire [15 : 0] ctrlComm_plnsh1VReg_54$D_IN;
  wire ctrlComm_plnsh1VReg_54$EN;

  // register ctrlComm_plnsh1VReg_55
  reg [15 : 0] ctrlComm_plnsh1VReg_55;
  wire [15 : 0] ctrlComm_plnsh1VReg_55$D_IN;
  wire ctrlComm_plnsh1VReg_55$EN;

  // register ctrlComm_plnsh1VReg_56
  reg [15 : 0] ctrlComm_plnsh1VReg_56;
  wire [15 : 0] ctrlComm_plnsh1VReg_56$D_IN;
  wire ctrlComm_plnsh1VReg_56$EN;

  // register ctrlComm_plnsh1VReg_57
  reg [15 : 0] ctrlComm_plnsh1VReg_57;
  wire [15 : 0] ctrlComm_plnsh1VReg_57$D_IN;
  wire ctrlComm_plnsh1VReg_57$EN;

  // register ctrlComm_plnsh1VReg_58
  reg [15 : 0] ctrlComm_plnsh1VReg_58;
  wire [15 : 0] ctrlComm_plnsh1VReg_58$D_IN;
  wire ctrlComm_plnsh1VReg_58$EN;

  // register ctrlComm_plnsh1VReg_59
  reg [15 : 0] ctrlComm_plnsh1VReg_59;
  wire [15 : 0] ctrlComm_plnsh1VReg_59$D_IN;
  wire ctrlComm_plnsh1VReg_59$EN;

  // register ctrlComm_plnsh1VReg_6
  reg [15 : 0] ctrlComm_plnsh1VReg_6;
  wire [15 : 0] ctrlComm_plnsh1VReg_6$D_IN;
  wire ctrlComm_plnsh1VReg_6$EN;

  // register ctrlComm_plnsh1VReg_60
  reg [15 : 0] ctrlComm_plnsh1VReg_60;
  wire [15 : 0] ctrlComm_plnsh1VReg_60$D_IN;
  wire ctrlComm_plnsh1VReg_60$EN;

  // register ctrlComm_plnsh1VReg_61
  reg [15 : 0] ctrlComm_plnsh1VReg_61;
  wire [15 : 0] ctrlComm_plnsh1VReg_61$D_IN;
  wire ctrlComm_plnsh1VReg_61$EN;

  // register ctrlComm_plnsh1VReg_62
  reg [15 : 0] ctrlComm_plnsh1VReg_62;
  wire [15 : 0] ctrlComm_plnsh1VReg_62$D_IN;
  wire ctrlComm_plnsh1VReg_62$EN;

  // register ctrlComm_plnsh1VReg_63
  reg [15 : 0] ctrlComm_plnsh1VReg_63;
  wire [15 : 0] ctrlComm_plnsh1VReg_63$D_IN;
  wire ctrlComm_plnsh1VReg_63$EN;

  // register ctrlComm_plnsh1VReg_64
  reg [15 : 0] ctrlComm_plnsh1VReg_64;
  wire [15 : 0] ctrlComm_plnsh1VReg_64$D_IN;
  wire ctrlComm_plnsh1VReg_64$EN;

  // register ctrlComm_plnsh1VReg_65
  reg [15 : 0] ctrlComm_plnsh1VReg_65;
  wire [15 : 0] ctrlComm_plnsh1VReg_65$D_IN;
  wire ctrlComm_plnsh1VReg_65$EN;

  // register ctrlComm_plnsh1VReg_66
  reg [15 : 0] ctrlComm_plnsh1VReg_66;
  wire [15 : 0] ctrlComm_plnsh1VReg_66$D_IN;
  wire ctrlComm_plnsh1VReg_66$EN;

  // register ctrlComm_plnsh1VReg_67
  reg [15 : 0] ctrlComm_plnsh1VReg_67;
  wire [15 : 0] ctrlComm_plnsh1VReg_67$D_IN;
  wire ctrlComm_plnsh1VReg_67$EN;

  // register ctrlComm_plnsh1VReg_68
  reg [15 : 0] ctrlComm_plnsh1VReg_68;
  wire [15 : 0] ctrlComm_plnsh1VReg_68$D_IN;
  wire ctrlComm_plnsh1VReg_68$EN;

  // register ctrlComm_plnsh1VReg_69
  reg [15 : 0] ctrlComm_plnsh1VReg_69;
  wire [15 : 0] ctrlComm_plnsh1VReg_69$D_IN;
  wire ctrlComm_plnsh1VReg_69$EN;

  // register ctrlComm_plnsh1VReg_7
  reg [15 : 0] ctrlComm_plnsh1VReg_7;
  wire [15 : 0] ctrlComm_plnsh1VReg_7$D_IN;
  wire ctrlComm_plnsh1VReg_7$EN;

  // register ctrlComm_plnsh1VReg_70
  reg [15 : 0] ctrlComm_plnsh1VReg_70;
  wire [15 : 0] ctrlComm_plnsh1VReg_70$D_IN;
  wire ctrlComm_plnsh1VReg_70$EN;

  // register ctrlComm_plnsh1VReg_71
  reg [15 : 0] ctrlComm_plnsh1VReg_71;
  wire [15 : 0] ctrlComm_plnsh1VReg_71$D_IN;
  wire ctrlComm_plnsh1VReg_71$EN;

  // register ctrlComm_plnsh1VReg_72
  reg [15 : 0] ctrlComm_plnsh1VReg_72;
  wire [15 : 0] ctrlComm_plnsh1VReg_72$D_IN;
  wire ctrlComm_plnsh1VReg_72$EN;

  // register ctrlComm_plnsh1VReg_73
  reg [15 : 0] ctrlComm_plnsh1VReg_73;
  wire [15 : 0] ctrlComm_plnsh1VReg_73$D_IN;
  wire ctrlComm_plnsh1VReg_73$EN;

  // register ctrlComm_plnsh1VReg_74
  reg [15 : 0] ctrlComm_plnsh1VReg_74;
  wire [15 : 0] ctrlComm_plnsh1VReg_74$D_IN;
  wire ctrlComm_plnsh1VReg_74$EN;

  // register ctrlComm_plnsh1VReg_75
  reg [15 : 0] ctrlComm_plnsh1VReg_75;
  wire [15 : 0] ctrlComm_plnsh1VReg_75$D_IN;
  wire ctrlComm_plnsh1VReg_75$EN;

  // register ctrlComm_plnsh1VReg_76
  reg [15 : 0] ctrlComm_plnsh1VReg_76;
  wire [15 : 0] ctrlComm_plnsh1VReg_76$D_IN;
  wire ctrlComm_plnsh1VReg_76$EN;

  // register ctrlComm_plnsh1VReg_77
  reg [15 : 0] ctrlComm_plnsh1VReg_77;
  wire [15 : 0] ctrlComm_plnsh1VReg_77$D_IN;
  wire ctrlComm_plnsh1VReg_77$EN;

  // register ctrlComm_plnsh1VReg_78
  reg [15 : 0] ctrlComm_plnsh1VReg_78;
  wire [15 : 0] ctrlComm_plnsh1VReg_78$D_IN;
  wire ctrlComm_plnsh1VReg_78$EN;

  // register ctrlComm_plnsh1VReg_79
  reg [15 : 0] ctrlComm_plnsh1VReg_79;
  wire [15 : 0] ctrlComm_plnsh1VReg_79$D_IN;
  wire ctrlComm_plnsh1VReg_79$EN;

  // register ctrlComm_plnsh1VReg_8
  reg [15 : 0] ctrlComm_plnsh1VReg_8;
  wire [15 : 0] ctrlComm_plnsh1VReg_8$D_IN;
  wire ctrlComm_plnsh1VReg_8$EN;

  // register ctrlComm_plnsh1VReg_80
  reg [15 : 0] ctrlComm_plnsh1VReg_80;
  wire [15 : 0] ctrlComm_plnsh1VReg_80$D_IN;
  wire ctrlComm_plnsh1VReg_80$EN;

  // register ctrlComm_plnsh1VReg_81
  reg [15 : 0] ctrlComm_plnsh1VReg_81;
  wire [15 : 0] ctrlComm_plnsh1VReg_81$D_IN;
  wire ctrlComm_plnsh1VReg_81$EN;

  // register ctrlComm_plnsh1VReg_82
  reg [15 : 0] ctrlComm_plnsh1VReg_82;
  wire [15 : 0] ctrlComm_plnsh1VReg_82$D_IN;
  wire ctrlComm_plnsh1VReg_82$EN;

  // register ctrlComm_plnsh1VReg_83
  reg [15 : 0] ctrlComm_plnsh1VReg_83;
  wire [15 : 0] ctrlComm_plnsh1VReg_83$D_IN;
  wire ctrlComm_plnsh1VReg_83$EN;

  // register ctrlComm_plnsh1VReg_84
  reg [15 : 0] ctrlComm_plnsh1VReg_84;
  wire [15 : 0] ctrlComm_plnsh1VReg_84$D_IN;
  wire ctrlComm_plnsh1VReg_84$EN;

  // register ctrlComm_plnsh1VReg_85
  reg [15 : 0] ctrlComm_plnsh1VReg_85;
  wire [15 : 0] ctrlComm_plnsh1VReg_85$D_IN;
  wire ctrlComm_plnsh1VReg_85$EN;

  // register ctrlComm_plnsh1VReg_86
  reg [15 : 0] ctrlComm_plnsh1VReg_86;
  wire [15 : 0] ctrlComm_plnsh1VReg_86$D_IN;
  wire ctrlComm_plnsh1VReg_86$EN;

  // register ctrlComm_plnsh1VReg_87
  reg [15 : 0] ctrlComm_plnsh1VReg_87;
  wire [15 : 0] ctrlComm_plnsh1VReg_87$D_IN;
  wire ctrlComm_plnsh1VReg_87$EN;

  // register ctrlComm_plnsh1VReg_88
  reg [15 : 0] ctrlComm_plnsh1VReg_88;
  wire [15 : 0] ctrlComm_plnsh1VReg_88$D_IN;
  wire ctrlComm_plnsh1VReg_88$EN;

  // register ctrlComm_plnsh1VReg_89
  reg [15 : 0] ctrlComm_plnsh1VReg_89;
  wire [15 : 0] ctrlComm_plnsh1VReg_89$D_IN;
  wire ctrlComm_plnsh1VReg_89$EN;

  // register ctrlComm_plnsh1VReg_9
  reg [15 : 0] ctrlComm_plnsh1VReg_9;
  wire [15 : 0] ctrlComm_plnsh1VReg_9$D_IN;
  wire ctrlComm_plnsh1VReg_9$EN;

  // register ctrlComm_plnsh1VReg_90
  reg [15 : 0] ctrlComm_plnsh1VReg_90;
  wire [15 : 0] ctrlComm_plnsh1VReg_90$D_IN;
  wire ctrlComm_plnsh1VReg_90$EN;

  // register ctrlComm_plnsh1VReg_91
  reg [15 : 0] ctrlComm_plnsh1VReg_91;
  wire [15 : 0] ctrlComm_plnsh1VReg_91$D_IN;
  wire ctrlComm_plnsh1VReg_91$EN;

  // register ctrlComm_plnsh1VReg_92
  reg [15 : 0] ctrlComm_plnsh1VReg_92;
  wire [15 : 0] ctrlComm_plnsh1VReg_92$D_IN;
  wire ctrlComm_plnsh1VReg_92$EN;

  // register ctrlComm_plnsh1VReg_93
  reg [15 : 0] ctrlComm_plnsh1VReg_93;
  wire [15 : 0] ctrlComm_plnsh1VReg_93$D_IN;
  wire ctrlComm_plnsh1VReg_93$EN;

  // register ctrlComm_plnsh1VReg_94
  reg [15 : 0] ctrlComm_plnsh1VReg_94;
  wire [15 : 0] ctrlComm_plnsh1VReg_94$D_IN;
  wire ctrlComm_plnsh1VReg_94$EN;

  // register ctrlComm_plnsh1VReg_95
  reg [15 : 0] ctrlComm_plnsh1VReg_95;
  wire [15 : 0] ctrlComm_plnsh1VReg_95$D_IN;
  wire ctrlComm_plnsh1VReg_95$EN;

  // register ctrlComm_plnsh1VReg_96
  reg [15 : 0] ctrlComm_plnsh1VReg_96;
  wire [15 : 0] ctrlComm_plnsh1VReg_96$D_IN;
  wire ctrlComm_plnsh1VReg_96$EN;

  // register ctrlComm_plnsh1VReg_97
  reg [15 : 0] ctrlComm_plnsh1VReg_97;
  wire [15 : 0] ctrlComm_plnsh1VReg_97$D_IN;
  wire ctrlComm_plnsh1VReg_97$EN;

  // register ctrlComm_plnsh1VReg_98
  reg [15 : 0] ctrlComm_plnsh1VReg_98;
  wire [15 : 0] ctrlComm_plnsh1VReg_98$D_IN;
  wire ctrlComm_plnsh1VReg_98$EN;

  // register ctrlComm_plnsh1VReg_99
  reg [15 : 0] ctrlComm_plnsh1VReg_99;
  wire [15 : 0] ctrlComm_plnsh1VReg_99$D_IN;
  wire ctrlComm_plnsh1VReg_99$EN;

  // register ctrlComm_random_cnt
  reg [4 : 0] ctrlComm_random_cnt;
  wire [4 : 0] ctrlComm_random_cnt$D_IN;
  wire ctrlComm_random_cnt$EN;

  // register ctrlComm_rdiSwitch
  reg ctrlComm_rdiSwitch;
  wire ctrlComm_rdiSwitch$D_IN, ctrlComm_rdiSwitch$EN;

  // register ctrlComm_seedVReg_0
  reg [15 : 0] ctrlComm_seedVReg_0;
  wire [15 : 0] ctrlComm_seedVReg_0$D_IN;
  wire ctrlComm_seedVReg_0$EN;

  // register ctrlComm_seedVReg_1
  reg [15 : 0] ctrlComm_seedVReg_1;
  wire [15 : 0] ctrlComm_seedVReg_1$D_IN;
  wire ctrlComm_seedVReg_1$EN;

  // register ctrlComm_seedVReg_2
  reg [15 : 0] ctrlComm_seedVReg_2;
  wire [15 : 0] ctrlComm_seedVReg_2$D_IN;
  wire ctrlComm_seedVReg_2$EN;

  // register ctrlComm_seedVReg_3
  reg [15 : 0] ctrlComm_seedVReg_3;
  wire [15 : 0] ctrlComm_seedVReg_3$D_IN;
  wire ctrlComm_seedVReg_3$EN;

  // register ctrlComm_seedVReg_4
  reg [15 : 0] ctrlComm_seedVReg_4;
  wire [15 : 0] ctrlComm_seedVReg_4$D_IN;
  wire ctrlComm_seedVReg_4$EN;

  // register ctrlComm_seedVReg_5
  reg [15 : 0] ctrlComm_seedVReg_5;
  wire [15 : 0] ctrlComm_seedVReg_5$D_IN;
  wire ctrlComm_seedVReg_5$EN;

  // register ctrlComm_seedVReg_6
  reg [15 : 0] ctrlComm_seedVReg_6;
  wire [15 : 0] ctrlComm_seedVReg_6$D_IN;
  wire ctrlComm_seedVReg_6$EN;

  // register ctrlComm_seedVReg_7
  reg [15 : 0] ctrlComm_seedVReg_7;
  wire [15 : 0] ctrlComm_seedVReg_7$D_IN;
  wire ctrlComm_seedVReg_7$EN;

  // register ctrlComm_seedVReg_8
  reg [15 : 0] ctrlComm_seedVReg_8;
  wire [15 : 0] ctrlComm_seedVReg_8$D_IN;
  wire ctrlComm_seedVReg_8$EN;

  // register ctrlComm_seedVReg_9
  reg [15 : 0] ctrlComm_seedVReg_9;
  wire [15 : 0] ctrlComm_seedVReg_9$D_IN;
  wire ctrlComm_seedVReg_9$EN;

  // register ctrlComm_state
  reg [1 : 0] ctrlComm_state;
  wire [1 : 0] ctrlComm_state$D_IN;
  wire ctrlComm_state$EN;

  // register deviceRdyCnt
  reg [1 : 0] deviceRdyCnt;
  wire [1 : 0] deviceRdyCnt$D_IN;
  wire deviceRdyCnt$EN;

  // register deviceRdyReg
  reg deviceRdyReg;
  wire deviceRdyReg$D_IN, deviceRdyReg$EN;

  // register m2cCDCProc_dataReg
  reg [15 : 0] m2cCDCProc_dataReg;
  wire [15 : 0] m2cCDCProc_dataReg$D_IN;
  wire m2cCDCProc_dataReg$EN;

  // register m2cCDCProc_doneLvlReg1
  reg m2cCDCProc_doneLvlReg1;
  wire m2cCDCProc_doneLvlReg1$D_IN, m2cCDCProc_doneLvlReg1$EN;

  // register m2cCDCProc_doneLvlReg2
  reg m2cCDCProc_doneLvlReg2;
  wire m2cCDCProc_doneLvlReg2$D_IN, m2cCDCProc_doneLvlReg2$EN;

  // register m2cCDCProc_doneLvlReg3
  reg m2cCDCProc_doneLvlReg3;
  wire m2cCDCProc_doneLvlReg3$D_IN, m2cCDCProc_doneLvlReg3$EN;

  // register m2cCDCProc_enLvlReg
  reg m2cCDCProc_enLvlReg;
  wire m2cCDCProc_enLvlReg$D_IN, m2cCDCProc_enLvlReg$EN;

  // register m2cCDCProc_txRdy
  reg m2cCDCProc_txRdy;
  wire m2cCDCProc_txRdy$D_IN, m2cCDCProc_txRdy$EN;

  // register randManage_addr
  reg [15 : 0] randManage_addr;
  reg [15 : 0] randManage_addr$D_IN;
  wire randManage_addr$EN;

  // register randManage_prng_state
  reg [1 : 0] randManage_prng_state;
  wire [1 : 0] randManage_prng_state$D_IN;
  wire randManage_prng_state$EN;

  // register randManage_prng_triviumCore_regA
  reg [92 : 0] randManage_prng_triviumCore_regA;
  reg [92 : 0] randManage_prng_triviumCore_regA$D_IN;
  wire randManage_prng_triviumCore_regA$EN;

  // register randManage_prng_triviumCore_regB
  reg [83 : 0] randManage_prng_triviumCore_regB;
  reg [83 : 0] randManage_prng_triviumCore_regB$D_IN;
  wire randManage_prng_triviumCore_regB$EN;

  // register randManage_prng_triviumCore_regC
  reg [110 : 0] randManage_prng_triviumCore_regC;
  reg [110 : 0] randManage_prng_triviumCore_regC$D_IN;
  wire randManage_prng_triviumCore_regC$EN;

  // register randManage_prng_warmUpCnt
  reg [9 : 0] randManage_prng_warmUpCnt;
  wire [9 : 0] randManage_prng_warmUpCnt$D_IN;
  wire randManage_prng_warmUpCnt$EN;

  // register randManage_rdi_0
  reg [1 : 0] randManage_rdi_0;
  reg [1 : 0] randManage_rdi_0$D_IN;
  wire randManage_rdi_0$EN;

  // register randManage_state
  reg [1 : 0] randManage_state;
  reg [1 : 0] randManage_state$D_IN;
  wire randManage_state$EN;

  // ports of submodule ctrlComm_m2cMsgFIFO
  wire [15 : 0] ctrlComm_m2cMsgFIFO$D_IN, ctrlComm_m2cMsgFIFO$D_OUT;
  wire ctrlComm_m2cMsgFIFO$CLR,
       ctrlComm_m2cMsgFIFO$DEQ,
       ctrlComm_m2cMsgFIFO$EMPTY_N,
       ctrlComm_m2cMsgFIFO$ENQ,
       ctrlComm_m2cMsgFIFO$FULL_N;

  // ports of submodule dut
  wire [3199 : 0] dut$din, dut$dout;
  wire [1 : 0] dut$r;
  wire dut$din_vld, dut$dout_vld, dut$r_vld, dut$rst, dut$rst_vld;

  // ports of submodule randManage_bram
  wire [15 : 0] randManage_bram$ADDR;
  wire [1 : 0] randManage_bram$DI, randManage_bram$DO;
  wire randManage_bram$EN, randManage_bram$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_ctrlComm_encDoneProcess,
       WILL_FIRE_RL_ctrlComm_encDoneProcess,
       WILL_FIRE_RL_ctrlComm_encStateTrans1,
       WILL_FIRE_RL_ctrlComm_resetEncDoneProcessed,
       WILL_FIRE_RL_ctrlComm_stateACQ,
       WILL_FIRE_RL_ctrlComm_stateINSTR,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_randManage_stateRandGen,
       WILL_FIRE_RL_randManage_stateWarmUp;

  // inputs to muxes for submodule ports
  reg [15 : 0] MUX_ctrlComm_m2cMsgFIFO$enq_1__VAL_1;
  wire [110 : 0] MUX_randManage_prng_triviumCore_regC$write_1__VAL_1;
  wire [92 : 0] MUX_randManage_prng_triviumCore_regA$write_1__VAL_1,
		MUX_randManage_prng_triviumCore_regA$write_1__VAL_2;
  wire [83 : 0] MUX_randManage_prng_triviumCore_regB$write_1__VAL_1,
		MUX_randManage_prng_triviumCore_regB$write_1__VAL_2;
  wire [15 : 0] MUX_randManage_addr$write_1__VAL_3,
		MUX_randManage_addr$write_1__VAL_4;
  wire [9 : 0] MUX_randManage_prng_warmUpCnt$write_1__VAL_2;
  wire [4 : 0] MUX_ctrlComm_random_cnt$write_1__VAL_1;
  wire [1 : 0] MUX_ctrlComm_state$write_1__VAL_3,
	       MUX_randManage_rdi_0$write_1__VAL_1,
	       MUX_randManage_state$write_1__VAL_2;
  wire MUX_ctrlComm_addr$write_1__SEL_1,
       MUX_ctrlComm_encState$write_1__SEL_3,
       MUX_ctrlComm_m2cMsgFIFO$enq_1__SEL_1,
       MUX_ctrlComm_state$write_1__SEL_3,
       MUX_dut$putEn_1__SEL_1,
       MUX_m2cCDCProc_txRdy$write_1__SEL_2,
       MUX_randManage_addr$write_1__SEL_1,
       MUX_randManage_addr$write_1__SEL_4,
       MUX_randManage_prng_state$write_1__SEL_1,
       MUX_randManage_prng_triviumCore_regA$write_1__SEL_3,
       MUX_randManage_state$write_1__SEL_1,
       MUX_randManage_state$write_1__SEL_2;

  // remaining internal signals
  reg [15 : 0] m2cMsg__h59160, m2cMsg__h59170;
  reg [1 : 0] CASE_c2mCDCProc_dataReg_BITS_15_TO_14_0_1_1_2_3__q2;
  reg CASE_ctrlComm_addr_BITS_13_TO_7_32_ctrlComm_m2_ETC__q1;
  wire [79 : 0] x__h56248, x__h57713;
  wire [1 : 0] t1__h65621,
	       t2__h65618,
	       t2__h65622,
	       t3__h65619,
	       t3__h65623,
	       x__h65669,
	       x__h65838,
	       x__h66007,
	       x__h66146,
	       x__h66147,
	       y__h65671,
	       y__h65840,
	       y__h66009;
  wire NOT_c2mCDCProc_enLvlReg3_218_EQ_c2mCDCProc_enL_ETC___d1220,
       NOT_m2cCDCProc_doneLvlReg3_223_EQ_m2cCDCProc_d_ETC___d1225,
       randManage_addr_8_ULT_23___d648;

  // value method c2m_doneLvl
  assign c2m_done_lvl = c2mCDCProc_doneLvlReg ;

  // value method m2c_dout
  assign m2c_dout = m2cCDCProc_dataReg ;

  // value method m2c_enLvl
  assign m2c_en_lvl = m2cCDCProc_enLvlReg ;

  // value method deviceRdy
  assign device_rdy = deviceRdyReg ;

  // value method trigger
  assign trigger =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd1 ;

  // submodule ctrlComm_m2cMsgFIFO
  FIFO2 #(.width(32'd16), .guarded(1'd1)) ctrlComm_m2cMsgFIFO(.RST(rst_n),
							      .CLK(clk),
							      .D_IN(ctrlComm_m2cMsgFIFO$D_IN),
							      .ENQ(ctrlComm_m2cMsgFIFO$ENQ),
							      .DEQ(ctrlComm_m2cMsgFIFO$DEQ),
							      .CLR(ctrlComm_m2cMsgFIFO$CLR),
							      .D_OUT(ctrlComm_m2cMsgFIFO$D_OUT),
							      .FULL_N(ctrlComm_m2cMsgFIFO$FULL_N),
							      .EMPTY_N(ctrlComm_m2cMsgFIFO$EMPTY_N));

  // submodule dut
  dut_wrapper dut(.clk(clk),
		  .rst_n(rst_n),
		  .din(dut$din),
		  .r(dut$r),
		  .rst(dut$rst),
		  .din_vld(dut$din_vld),
		  .rst_vld(dut$rst_vld),
		  .r_vld(dut$r_vld),
		  .dout(dut$dout),
		  .dout_vld(dut$dout_vld));

  // submodule randManage_bram
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd16),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(17'd65536)) randManage_bram(.CLK(clk),
					       .ADDR(randManage_bram$ADDR),
					       .DI(randManage_bram$DI),
					       .WE(randManage_bram$WE),
					       .EN(randManage_bram$EN),
					       .DO(randManage_bram$DO));

  // rule RL_ctrlComm_encStateTrans1
  assign WILL_FIRE_RL_ctrlComm_encStateTrans1 =
	     (!ctrlComm_rdiSwitch || randManage_state == 2'd3) &&
	     ctrlComm_encState == 2'd2 ;

  // rule RL_mkConnectionGetPut
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     (ctrlComm_state == 2'd0 || ctrlComm_state == 2'd3) &&
	     c2mCDCProc_rxVld ;

  // rule RL_randManage_stateWarmUp
  assign WILL_FIRE_RL_randManage_stateWarmUp =
	     randManage_prng_state == 2'd2 && randManage_state == 2'd1 &&
	     !WILL_FIRE_RL_ctrlComm_stateINSTR ;

  // rule RL_randManage_stateRandGen
  assign WILL_FIRE_RL_randManage_stateRandGen =
	     (randManage_addr == 16'd65535 ||
	      randManage_prng_state == 2'd2) &&
	     randManage_state == 2'd2 &&
	     !WILL_FIRE_RL_ctrlComm_stateINSTR ;

  // rule RL_ctrlComm_stateINSTR
  assign WILL_FIRE_RL_ctrlComm_stateINSTR =
	     (ctrlComm_addr != 14'd1 || !ctrlComm_rdiSwitch ||
	      randManage_state == 2'd3) &&
	     ctrlComm_state == 2'd1 ;

  // rule RL_ctrlComm_stateACQ
  assign WILL_FIRE_RL_ctrlComm_stateACQ =
	     CASE_ctrlComm_addr_BITS_13_TO_7_32_ctrlComm_m2_ETC__q1 &&
	     ctrlComm_state == 2'd2 &&
	     !WILL_FIRE_RL_ctrlComm_encDoneProcess ;

  // rule RL_ctrlComm_encDoneProcess
  assign CAN_FIRE_RL_ctrlComm_encDoneProcess =
	     ctrlComm_m2cMsgFIFO$FULL_N &&
	     (!ctrlComm_rdiSwitch || !randManage_addr_8_ULT_23___d648 ||
	      randManage_prng_state == 2'd2) &&
	     !ctrlComm_encDoneProcessed &&
	     dut$dout_vld ;
  assign WILL_FIRE_RL_ctrlComm_encDoneProcess =
	     CAN_FIRE_RL_ctrlComm_encDoneProcess &&
	     !WILL_FIRE_RL_ctrlComm_stateINSTR ;

  // rule RL_ctrlComm_resetEncDoneProcessed
  assign WILL_FIRE_RL_ctrlComm_resetEncDoneProcessed =
	     ctrlComm_encDoneProcessed && !dut$dout_vld ;

  // inputs to muxes for submodule ports
  assign MUX_ctrlComm_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ;
  assign MUX_ctrlComm_encState$write_1__SEL_3 =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 &&
	     ctrlComm_random_cnt == 5'd0 ;
  assign MUX_ctrlComm_m2cMsgFIFO$enq_1__SEL_1 =
	     WILL_FIRE_RL_ctrlComm_stateACQ &&
	     (ctrlComm_addr[13:7] == 7'd32 || ctrlComm_addr[13:7] == 7'd33 ||
	      ctrlComm_addr[13:7] == 7'd127) ;
  assign MUX_ctrlComm_state$write_1__SEL_3 =
	     WILL_FIRE_RL_mkConnectionGetPut &&
	     (c2mCDCProc_dataReg[15:14] == 2'd0 ||
	      c2mCDCProc_dataReg[15:14] == 2'd1 ||
	      c2mCDCProc_dataReg[15:14] == 2'd2 ||
	      ctrlComm_state != 2'd0) ;
  assign MUX_dut$putEn_1__SEL_1 =
	     ctrlComm_encState == 2'd3 ||
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 ;
  assign MUX_m2cCDCProc_txRdy$write_1__SEL_2 =
	     ctrlComm_m2cMsgFIFO$EMPTY_N && m2cCDCProc_txRdy ;
  assign MUX_randManage_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ;
  assign MUX_randManage_addr$write_1__SEL_4 =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 && ctrlComm_rdiSwitch ;
  assign MUX_randManage_prng_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ;
  assign MUX_randManage_prng_triviumCore_regA$write_1__SEL_3 =
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr != 16'd65535 ;
  assign MUX_randManage_state$write_1__SEL_1 =
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr == 16'd65535 ;
  assign MUX_randManage_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ctrlComm_stateINSTR &&
	     (ctrlComm_addr == 14'd8192 || ctrlComm_addr == 14'd4) ;
  always@(ctrlComm_addr or m2cMsg__h59160 or m2cMsg__h59170)
  begin
    case (ctrlComm_addr[13:7])
      7'd32: MUX_ctrlComm_m2cMsgFIFO$enq_1__VAL_1 = m2cMsg__h59160;
      7'd33: MUX_ctrlComm_m2cMsgFIFO$enq_1__VAL_1 = m2cMsg__h59170;
      default: MUX_ctrlComm_m2cMsgFIFO$enq_1__VAL_1 = 16'd17698;
    endcase
  end
  assign MUX_ctrlComm_random_cnt$write_1__VAL_1 =
	     ctrlComm_random_cnt - 5'b00001 ;
  assign MUX_ctrlComm_state$write_1__VAL_3 =
	     (ctrlComm_state == 2'd0) ?
	       CASE_c2mCDCProc_dataReg_BITS_15_TO_14_0_1_1_2_3__q2 :
	       2'd0 ;
  assign MUX_randManage_addr$write_1__VAL_3 =
	     (randManage_addr == 16'd65535) ?
	       randManage_addr - 16'd1 :
	       randManage_addr + 16'd1 ;
  assign MUX_randManage_addr$write_1__VAL_4 = randManage_addr - 16'd1 ;
  assign MUX_randManage_prng_triviumCore_regA$write_1__VAL_1 =
	     { randManage_prng_triviumCore_regA[90:0], t3__h65623 } ;
  assign MUX_randManage_prng_triviumCore_regA$write_1__VAL_2 =
	     { 13'd0, x__h56248 } ;
  assign MUX_randManage_prng_triviumCore_regB$write_1__VAL_1 =
	     { randManage_prng_triviumCore_regB[81:0], t1__h65621 } ;
  assign MUX_randManage_prng_triviumCore_regB$write_1__VAL_2 =
	     { 4'd0, x__h57713 } ;
  assign MUX_randManage_prng_triviumCore_regC$write_1__VAL_1 =
	     { randManage_prng_triviumCore_regC[108:0], t2__h65622 } ;
  assign MUX_randManage_prng_warmUpCnt$write_1__VAL_2 =
	     randManage_prng_warmUpCnt + 10'd1 ;
  assign MUX_randManage_rdi_0$write_1__VAL_1 = x__h66146 ^ t3__h65619 ;
  assign MUX_randManage_state$write_1__VAL_2 =
	     (ctrlComm_addr == 14'd8192) ? 2'd0 : 2'd1 ;

  // register c2mCDCProc_dataReg
  assign c2mCDCProc_dataReg$D_IN = c2m_din ;
  assign c2mCDCProc_dataReg$EN =
	     NOT_c2mCDCProc_enLvlReg3_218_EQ_c2mCDCProc_enL_ETC___d1220 ;

  // register c2mCDCProc_doneLvlReg
  assign c2mCDCProc_doneLvlReg$D_IN = ~c2mCDCProc_doneLvlReg ;
  assign c2mCDCProc_doneLvlReg$EN = WILL_FIRE_RL_mkConnectionGetPut ;

  // register c2mCDCProc_enLvlReg1
  assign c2mCDCProc_enLvlReg1$D_IN = c2m_en_lvl ;
  assign c2mCDCProc_enLvlReg1$EN = 1'd1 ;

  // register c2mCDCProc_enLvlReg2
  assign c2mCDCProc_enLvlReg2$D_IN = c2mCDCProc_enLvlReg1 ;
  assign c2mCDCProc_enLvlReg2$EN = 1'd1 ;

  // register c2mCDCProc_enLvlReg3
  assign c2mCDCProc_enLvlReg3$D_IN = c2mCDCProc_enLvlReg2 ;
  assign c2mCDCProc_enLvlReg3$EN = 1'd1 ;

  // register c2mCDCProc_rxVld
  assign c2mCDCProc_rxVld$D_IN =
	     NOT_c2mCDCProc_enLvlReg3_218_EQ_c2mCDCProc_enL_ETC___d1220 ;
  assign c2mCDCProc_rxVld$EN =
	     NOT_c2mCDCProc_enLvlReg3_218_EQ_c2mCDCProc_enL_ETC___d1220 ||
	     WILL_FIRE_RL_mkConnectionGetPut ;

  // register ctrlComm_addr
  assign ctrlComm_addr$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ?
	       14'd0 :
	       c2mCDCProc_dataReg[13:0] ;
  assign ctrlComm_addr$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_state == 2'd0 ;

  // register ctrlComm_cphsh0VReg_0
  assign ctrlComm_cphsh0VReg_0$D_IN = dut$dout[15:0] ;
  assign ctrlComm_cphsh0VReg_0$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_1
  assign ctrlComm_cphsh0VReg_1$D_IN = dut$dout[31:16] ;
  assign ctrlComm_cphsh0VReg_1$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_10
  assign ctrlComm_cphsh0VReg_10$D_IN = dut$dout[175:160] ;
  assign ctrlComm_cphsh0VReg_10$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_11
  assign ctrlComm_cphsh0VReg_11$D_IN = dut$dout[191:176] ;
  assign ctrlComm_cphsh0VReg_11$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_12
  assign ctrlComm_cphsh0VReg_12$D_IN = dut$dout[207:192] ;
  assign ctrlComm_cphsh0VReg_12$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_13
  assign ctrlComm_cphsh0VReg_13$D_IN = dut$dout[223:208] ;
  assign ctrlComm_cphsh0VReg_13$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_14
  assign ctrlComm_cphsh0VReg_14$D_IN = dut$dout[239:224] ;
  assign ctrlComm_cphsh0VReg_14$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_15
  assign ctrlComm_cphsh0VReg_15$D_IN = dut$dout[255:240] ;
  assign ctrlComm_cphsh0VReg_15$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_16
  assign ctrlComm_cphsh0VReg_16$D_IN = dut$dout[271:256] ;
  assign ctrlComm_cphsh0VReg_16$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_17
  assign ctrlComm_cphsh0VReg_17$D_IN = dut$dout[287:272] ;
  assign ctrlComm_cphsh0VReg_17$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_18
  assign ctrlComm_cphsh0VReg_18$D_IN = dut$dout[303:288] ;
  assign ctrlComm_cphsh0VReg_18$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_19
  assign ctrlComm_cphsh0VReg_19$D_IN = dut$dout[319:304] ;
  assign ctrlComm_cphsh0VReg_19$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_2
  assign ctrlComm_cphsh0VReg_2$D_IN = dut$dout[47:32] ;
  assign ctrlComm_cphsh0VReg_2$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_20
  assign ctrlComm_cphsh0VReg_20$D_IN = dut$dout[335:320] ;
  assign ctrlComm_cphsh0VReg_20$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_21
  assign ctrlComm_cphsh0VReg_21$D_IN = dut$dout[351:336] ;
  assign ctrlComm_cphsh0VReg_21$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_22
  assign ctrlComm_cphsh0VReg_22$D_IN = dut$dout[367:352] ;
  assign ctrlComm_cphsh0VReg_22$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_23
  assign ctrlComm_cphsh0VReg_23$D_IN = dut$dout[383:368] ;
  assign ctrlComm_cphsh0VReg_23$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_24
  assign ctrlComm_cphsh0VReg_24$D_IN = dut$dout[399:384] ;
  assign ctrlComm_cphsh0VReg_24$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_25
  assign ctrlComm_cphsh0VReg_25$D_IN = dut$dout[415:400] ;
  assign ctrlComm_cphsh0VReg_25$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_26
  assign ctrlComm_cphsh0VReg_26$D_IN = dut$dout[431:416] ;
  assign ctrlComm_cphsh0VReg_26$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_27
  assign ctrlComm_cphsh0VReg_27$D_IN = dut$dout[447:432] ;
  assign ctrlComm_cphsh0VReg_27$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_28
  assign ctrlComm_cphsh0VReg_28$D_IN = dut$dout[463:448] ;
  assign ctrlComm_cphsh0VReg_28$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_29
  assign ctrlComm_cphsh0VReg_29$D_IN = dut$dout[479:464] ;
  assign ctrlComm_cphsh0VReg_29$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_3
  assign ctrlComm_cphsh0VReg_3$D_IN = dut$dout[63:48] ;
  assign ctrlComm_cphsh0VReg_3$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_30
  assign ctrlComm_cphsh0VReg_30$D_IN = dut$dout[495:480] ;
  assign ctrlComm_cphsh0VReg_30$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_31
  assign ctrlComm_cphsh0VReg_31$D_IN = dut$dout[511:496] ;
  assign ctrlComm_cphsh0VReg_31$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_32
  assign ctrlComm_cphsh0VReg_32$D_IN = dut$dout[527:512] ;
  assign ctrlComm_cphsh0VReg_32$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_33
  assign ctrlComm_cphsh0VReg_33$D_IN = dut$dout[543:528] ;
  assign ctrlComm_cphsh0VReg_33$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_34
  assign ctrlComm_cphsh0VReg_34$D_IN = dut$dout[559:544] ;
  assign ctrlComm_cphsh0VReg_34$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_35
  assign ctrlComm_cphsh0VReg_35$D_IN = dut$dout[575:560] ;
  assign ctrlComm_cphsh0VReg_35$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_36
  assign ctrlComm_cphsh0VReg_36$D_IN = dut$dout[591:576] ;
  assign ctrlComm_cphsh0VReg_36$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_37
  assign ctrlComm_cphsh0VReg_37$D_IN = dut$dout[607:592] ;
  assign ctrlComm_cphsh0VReg_37$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_38
  assign ctrlComm_cphsh0VReg_38$D_IN = dut$dout[623:608] ;
  assign ctrlComm_cphsh0VReg_38$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_39
  assign ctrlComm_cphsh0VReg_39$D_IN = dut$dout[639:624] ;
  assign ctrlComm_cphsh0VReg_39$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_4
  assign ctrlComm_cphsh0VReg_4$D_IN = dut$dout[79:64] ;
  assign ctrlComm_cphsh0VReg_4$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_40
  assign ctrlComm_cphsh0VReg_40$D_IN = dut$dout[655:640] ;
  assign ctrlComm_cphsh0VReg_40$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_41
  assign ctrlComm_cphsh0VReg_41$D_IN = dut$dout[671:656] ;
  assign ctrlComm_cphsh0VReg_41$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_42
  assign ctrlComm_cphsh0VReg_42$D_IN = dut$dout[687:672] ;
  assign ctrlComm_cphsh0VReg_42$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_43
  assign ctrlComm_cphsh0VReg_43$D_IN = dut$dout[703:688] ;
  assign ctrlComm_cphsh0VReg_43$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_44
  assign ctrlComm_cphsh0VReg_44$D_IN = dut$dout[719:704] ;
  assign ctrlComm_cphsh0VReg_44$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_45
  assign ctrlComm_cphsh0VReg_45$D_IN = dut$dout[735:720] ;
  assign ctrlComm_cphsh0VReg_45$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_46
  assign ctrlComm_cphsh0VReg_46$D_IN = dut$dout[751:736] ;
  assign ctrlComm_cphsh0VReg_46$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_47
  assign ctrlComm_cphsh0VReg_47$D_IN = dut$dout[767:752] ;
  assign ctrlComm_cphsh0VReg_47$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_48
  assign ctrlComm_cphsh0VReg_48$D_IN = dut$dout[783:768] ;
  assign ctrlComm_cphsh0VReg_48$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_49
  assign ctrlComm_cphsh0VReg_49$D_IN = dut$dout[799:784] ;
  assign ctrlComm_cphsh0VReg_49$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_5
  assign ctrlComm_cphsh0VReg_5$D_IN = dut$dout[95:80] ;
  assign ctrlComm_cphsh0VReg_5$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_50
  assign ctrlComm_cphsh0VReg_50$D_IN = dut$dout[815:800] ;
  assign ctrlComm_cphsh0VReg_50$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_51
  assign ctrlComm_cphsh0VReg_51$D_IN = dut$dout[831:816] ;
  assign ctrlComm_cphsh0VReg_51$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_52
  assign ctrlComm_cphsh0VReg_52$D_IN = dut$dout[847:832] ;
  assign ctrlComm_cphsh0VReg_52$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_53
  assign ctrlComm_cphsh0VReg_53$D_IN = dut$dout[863:848] ;
  assign ctrlComm_cphsh0VReg_53$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_54
  assign ctrlComm_cphsh0VReg_54$D_IN = dut$dout[879:864] ;
  assign ctrlComm_cphsh0VReg_54$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_55
  assign ctrlComm_cphsh0VReg_55$D_IN = dut$dout[895:880] ;
  assign ctrlComm_cphsh0VReg_55$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_56
  assign ctrlComm_cphsh0VReg_56$D_IN = dut$dout[911:896] ;
  assign ctrlComm_cphsh0VReg_56$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_57
  assign ctrlComm_cphsh0VReg_57$D_IN = dut$dout[927:912] ;
  assign ctrlComm_cphsh0VReg_57$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_58
  assign ctrlComm_cphsh0VReg_58$D_IN = dut$dout[943:928] ;
  assign ctrlComm_cphsh0VReg_58$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_59
  assign ctrlComm_cphsh0VReg_59$D_IN = dut$dout[959:944] ;
  assign ctrlComm_cphsh0VReg_59$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_6
  assign ctrlComm_cphsh0VReg_6$D_IN = dut$dout[111:96] ;
  assign ctrlComm_cphsh0VReg_6$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_60
  assign ctrlComm_cphsh0VReg_60$D_IN = dut$dout[975:960] ;
  assign ctrlComm_cphsh0VReg_60$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_61
  assign ctrlComm_cphsh0VReg_61$D_IN = dut$dout[991:976] ;
  assign ctrlComm_cphsh0VReg_61$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_62
  assign ctrlComm_cphsh0VReg_62$D_IN = dut$dout[1007:992] ;
  assign ctrlComm_cphsh0VReg_62$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_63
  assign ctrlComm_cphsh0VReg_63$D_IN = dut$dout[1023:1008] ;
  assign ctrlComm_cphsh0VReg_63$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_64
  assign ctrlComm_cphsh0VReg_64$D_IN = dut$dout[1039:1024] ;
  assign ctrlComm_cphsh0VReg_64$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_65
  assign ctrlComm_cphsh0VReg_65$D_IN = dut$dout[1055:1040] ;
  assign ctrlComm_cphsh0VReg_65$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_66
  assign ctrlComm_cphsh0VReg_66$D_IN = dut$dout[1071:1056] ;
  assign ctrlComm_cphsh0VReg_66$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_67
  assign ctrlComm_cphsh0VReg_67$D_IN = dut$dout[1087:1072] ;
  assign ctrlComm_cphsh0VReg_67$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_68
  assign ctrlComm_cphsh0VReg_68$D_IN = dut$dout[1103:1088] ;
  assign ctrlComm_cphsh0VReg_68$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_69
  assign ctrlComm_cphsh0VReg_69$D_IN = dut$dout[1119:1104] ;
  assign ctrlComm_cphsh0VReg_69$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_7
  assign ctrlComm_cphsh0VReg_7$D_IN = dut$dout[127:112] ;
  assign ctrlComm_cphsh0VReg_7$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_70
  assign ctrlComm_cphsh0VReg_70$D_IN = dut$dout[1135:1120] ;
  assign ctrlComm_cphsh0VReg_70$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_71
  assign ctrlComm_cphsh0VReg_71$D_IN = dut$dout[1151:1136] ;
  assign ctrlComm_cphsh0VReg_71$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_72
  assign ctrlComm_cphsh0VReg_72$D_IN = dut$dout[1167:1152] ;
  assign ctrlComm_cphsh0VReg_72$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_73
  assign ctrlComm_cphsh0VReg_73$D_IN = dut$dout[1183:1168] ;
  assign ctrlComm_cphsh0VReg_73$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_74
  assign ctrlComm_cphsh0VReg_74$D_IN = dut$dout[1199:1184] ;
  assign ctrlComm_cphsh0VReg_74$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_75
  assign ctrlComm_cphsh0VReg_75$D_IN = dut$dout[1215:1200] ;
  assign ctrlComm_cphsh0VReg_75$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_76
  assign ctrlComm_cphsh0VReg_76$D_IN = dut$dout[1231:1216] ;
  assign ctrlComm_cphsh0VReg_76$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_77
  assign ctrlComm_cphsh0VReg_77$D_IN = dut$dout[1247:1232] ;
  assign ctrlComm_cphsh0VReg_77$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_78
  assign ctrlComm_cphsh0VReg_78$D_IN = dut$dout[1263:1248] ;
  assign ctrlComm_cphsh0VReg_78$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_79
  assign ctrlComm_cphsh0VReg_79$D_IN = dut$dout[1279:1264] ;
  assign ctrlComm_cphsh0VReg_79$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_8
  assign ctrlComm_cphsh0VReg_8$D_IN = dut$dout[143:128] ;
  assign ctrlComm_cphsh0VReg_8$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_80
  assign ctrlComm_cphsh0VReg_80$D_IN = dut$dout[1295:1280] ;
  assign ctrlComm_cphsh0VReg_80$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_81
  assign ctrlComm_cphsh0VReg_81$D_IN = dut$dout[1311:1296] ;
  assign ctrlComm_cphsh0VReg_81$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_82
  assign ctrlComm_cphsh0VReg_82$D_IN = dut$dout[1327:1312] ;
  assign ctrlComm_cphsh0VReg_82$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_83
  assign ctrlComm_cphsh0VReg_83$D_IN = dut$dout[1343:1328] ;
  assign ctrlComm_cphsh0VReg_83$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_84
  assign ctrlComm_cphsh0VReg_84$D_IN = dut$dout[1359:1344] ;
  assign ctrlComm_cphsh0VReg_84$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_85
  assign ctrlComm_cphsh0VReg_85$D_IN = dut$dout[1375:1360] ;
  assign ctrlComm_cphsh0VReg_85$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_86
  assign ctrlComm_cphsh0VReg_86$D_IN = dut$dout[1391:1376] ;
  assign ctrlComm_cphsh0VReg_86$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_87
  assign ctrlComm_cphsh0VReg_87$D_IN = dut$dout[1407:1392] ;
  assign ctrlComm_cphsh0VReg_87$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_88
  assign ctrlComm_cphsh0VReg_88$D_IN = dut$dout[1423:1408] ;
  assign ctrlComm_cphsh0VReg_88$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_89
  assign ctrlComm_cphsh0VReg_89$D_IN = dut$dout[1439:1424] ;
  assign ctrlComm_cphsh0VReg_89$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_9
  assign ctrlComm_cphsh0VReg_9$D_IN = dut$dout[159:144] ;
  assign ctrlComm_cphsh0VReg_9$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_90
  assign ctrlComm_cphsh0VReg_90$D_IN = dut$dout[1455:1440] ;
  assign ctrlComm_cphsh0VReg_90$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_91
  assign ctrlComm_cphsh0VReg_91$D_IN = dut$dout[1471:1456] ;
  assign ctrlComm_cphsh0VReg_91$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_92
  assign ctrlComm_cphsh0VReg_92$D_IN = dut$dout[1487:1472] ;
  assign ctrlComm_cphsh0VReg_92$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_93
  assign ctrlComm_cphsh0VReg_93$D_IN = dut$dout[1503:1488] ;
  assign ctrlComm_cphsh0VReg_93$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_94
  assign ctrlComm_cphsh0VReg_94$D_IN = dut$dout[1519:1504] ;
  assign ctrlComm_cphsh0VReg_94$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_95
  assign ctrlComm_cphsh0VReg_95$D_IN = dut$dout[1535:1520] ;
  assign ctrlComm_cphsh0VReg_95$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_96
  assign ctrlComm_cphsh0VReg_96$D_IN = dut$dout[1551:1536] ;
  assign ctrlComm_cphsh0VReg_96$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_97
  assign ctrlComm_cphsh0VReg_97$D_IN = dut$dout[1567:1552] ;
  assign ctrlComm_cphsh0VReg_97$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_98
  assign ctrlComm_cphsh0VReg_98$D_IN = dut$dout[1583:1568] ;
  assign ctrlComm_cphsh0VReg_98$EN = dut$dout_vld ;

  // register ctrlComm_cphsh0VReg_99
  assign ctrlComm_cphsh0VReg_99$D_IN = dut$dout[1599:1584] ;
  assign ctrlComm_cphsh0VReg_99$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_0
  assign ctrlComm_cphsh1VReg_0$D_IN = dut$dout[1615:1600] ;
  assign ctrlComm_cphsh1VReg_0$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_1
  assign ctrlComm_cphsh1VReg_1$D_IN = dut$dout[1631:1616] ;
  assign ctrlComm_cphsh1VReg_1$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_10
  assign ctrlComm_cphsh1VReg_10$D_IN = dut$dout[1775:1760] ;
  assign ctrlComm_cphsh1VReg_10$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_11
  assign ctrlComm_cphsh1VReg_11$D_IN = dut$dout[1791:1776] ;
  assign ctrlComm_cphsh1VReg_11$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_12
  assign ctrlComm_cphsh1VReg_12$D_IN = dut$dout[1807:1792] ;
  assign ctrlComm_cphsh1VReg_12$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_13
  assign ctrlComm_cphsh1VReg_13$D_IN = dut$dout[1823:1808] ;
  assign ctrlComm_cphsh1VReg_13$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_14
  assign ctrlComm_cphsh1VReg_14$D_IN = dut$dout[1839:1824] ;
  assign ctrlComm_cphsh1VReg_14$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_15
  assign ctrlComm_cphsh1VReg_15$D_IN = dut$dout[1855:1840] ;
  assign ctrlComm_cphsh1VReg_15$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_16
  assign ctrlComm_cphsh1VReg_16$D_IN = dut$dout[1871:1856] ;
  assign ctrlComm_cphsh1VReg_16$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_17
  assign ctrlComm_cphsh1VReg_17$D_IN = dut$dout[1887:1872] ;
  assign ctrlComm_cphsh1VReg_17$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_18
  assign ctrlComm_cphsh1VReg_18$D_IN = dut$dout[1903:1888] ;
  assign ctrlComm_cphsh1VReg_18$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_19
  assign ctrlComm_cphsh1VReg_19$D_IN = dut$dout[1919:1904] ;
  assign ctrlComm_cphsh1VReg_19$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_2
  assign ctrlComm_cphsh1VReg_2$D_IN = dut$dout[1647:1632] ;
  assign ctrlComm_cphsh1VReg_2$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_20
  assign ctrlComm_cphsh1VReg_20$D_IN = dut$dout[1935:1920] ;
  assign ctrlComm_cphsh1VReg_20$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_21
  assign ctrlComm_cphsh1VReg_21$D_IN = dut$dout[1951:1936] ;
  assign ctrlComm_cphsh1VReg_21$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_22
  assign ctrlComm_cphsh1VReg_22$D_IN = dut$dout[1967:1952] ;
  assign ctrlComm_cphsh1VReg_22$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_23
  assign ctrlComm_cphsh1VReg_23$D_IN = dut$dout[1983:1968] ;
  assign ctrlComm_cphsh1VReg_23$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_24
  assign ctrlComm_cphsh1VReg_24$D_IN = dut$dout[1999:1984] ;
  assign ctrlComm_cphsh1VReg_24$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_25
  assign ctrlComm_cphsh1VReg_25$D_IN = dut$dout[2015:2000] ;
  assign ctrlComm_cphsh1VReg_25$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_26
  assign ctrlComm_cphsh1VReg_26$D_IN = dut$dout[2031:2016] ;
  assign ctrlComm_cphsh1VReg_26$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_27
  assign ctrlComm_cphsh1VReg_27$D_IN = dut$dout[2047:2032] ;
  assign ctrlComm_cphsh1VReg_27$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_28
  assign ctrlComm_cphsh1VReg_28$D_IN = dut$dout[2063:2048] ;
  assign ctrlComm_cphsh1VReg_28$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_29
  assign ctrlComm_cphsh1VReg_29$D_IN = dut$dout[2079:2064] ;
  assign ctrlComm_cphsh1VReg_29$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_3
  assign ctrlComm_cphsh1VReg_3$D_IN = dut$dout[1663:1648] ;
  assign ctrlComm_cphsh1VReg_3$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_30
  assign ctrlComm_cphsh1VReg_30$D_IN = dut$dout[2095:2080] ;
  assign ctrlComm_cphsh1VReg_30$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_31
  assign ctrlComm_cphsh1VReg_31$D_IN = dut$dout[2111:2096] ;
  assign ctrlComm_cphsh1VReg_31$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_32
  assign ctrlComm_cphsh1VReg_32$D_IN = dut$dout[2127:2112] ;
  assign ctrlComm_cphsh1VReg_32$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_33
  assign ctrlComm_cphsh1VReg_33$D_IN = dut$dout[2143:2128] ;
  assign ctrlComm_cphsh1VReg_33$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_34
  assign ctrlComm_cphsh1VReg_34$D_IN = dut$dout[2159:2144] ;
  assign ctrlComm_cphsh1VReg_34$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_35
  assign ctrlComm_cphsh1VReg_35$D_IN = dut$dout[2175:2160] ;
  assign ctrlComm_cphsh1VReg_35$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_36
  assign ctrlComm_cphsh1VReg_36$D_IN = dut$dout[2191:2176] ;
  assign ctrlComm_cphsh1VReg_36$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_37
  assign ctrlComm_cphsh1VReg_37$D_IN = dut$dout[2207:2192] ;
  assign ctrlComm_cphsh1VReg_37$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_38
  assign ctrlComm_cphsh1VReg_38$D_IN = dut$dout[2223:2208] ;
  assign ctrlComm_cphsh1VReg_38$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_39
  assign ctrlComm_cphsh1VReg_39$D_IN = dut$dout[2239:2224] ;
  assign ctrlComm_cphsh1VReg_39$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_4
  assign ctrlComm_cphsh1VReg_4$D_IN = dut$dout[1679:1664] ;
  assign ctrlComm_cphsh1VReg_4$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_40
  assign ctrlComm_cphsh1VReg_40$D_IN = dut$dout[2255:2240] ;
  assign ctrlComm_cphsh1VReg_40$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_41
  assign ctrlComm_cphsh1VReg_41$D_IN = dut$dout[2271:2256] ;
  assign ctrlComm_cphsh1VReg_41$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_42
  assign ctrlComm_cphsh1VReg_42$D_IN = dut$dout[2287:2272] ;
  assign ctrlComm_cphsh1VReg_42$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_43
  assign ctrlComm_cphsh1VReg_43$D_IN = dut$dout[2303:2288] ;
  assign ctrlComm_cphsh1VReg_43$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_44
  assign ctrlComm_cphsh1VReg_44$D_IN = dut$dout[2319:2304] ;
  assign ctrlComm_cphsh1VReg_44$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_45
  assign ctrlComm_cphsh1VReg_45$D_IN = dut$dout[2335:2320] ;
  assign ctrlComm_cphsh1VReg_45$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_46
  assign ctrlComm_cphsh1VReg_46$D_IN = dut$dout[2351:2336] ;
  assign ctrlComm_cphsh1VReg_46$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_47
  assign ctrlComm_cphsh1VReg_47$D_IN = dut$dout[2367:2352] ;
  assign ctrlComm_cphsh1VReg_47$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_48
  assign ctrlComm_cphsh1VReg_48$D_IN = dut$dout[2383:2368] ;
  assign ctrlComm_cphsh1VReg_48$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_49
  assign ctrlComm_cphsh1VReg_49$D_IN = dut$dout[2399:2384] ;
  assign ctrlComm_cphsh1VReg_49$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_5
  assign ctrlComm_cphsh1VReg_5$D_IN = dut$dout[1695:1680] ;
  assign ctrlComm_cphsh1VReg_5$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_50
  assign ctrlComm_cphsh1VReg_50$D_IN = dut$dout[2415:2400] ;
  assign ctrlComm_cphsh1VReg_50$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_51
  assign ctrlComm_cphsh1VReg_51$D_IN = dut$dout[2431:2416] ;
  assign ctrlComm_cphsh1VReg_51$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_52
  assign ctrlComm_cphsh1VReg_52$D_IN = dut$dout[2447:2432] ;
  assign ctrlComm_cphsh1VReg_52$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_53
  assign ctrlComm_cphsh1VReg_53$D_IN = dut$dout[2463:2448] ;
  assign ctrlComm_cphsh1VReg_53$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_54
  assign ctrlComm_cphsh1VReg_54$D_IN = dut$dout[2479:2464] ;
  assign ctrlComm_cphsh1VReg_54$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_55
  assign ctrlComm_cphsh1VReg_55$D_IN = dut$dout[2495:2480] ;
  assign ctrlComm_cphsh1VReg_55$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_56
  assign ctrlComm_cphsh1VReg_56$D_IN = dut$dout[2511:2496] ;
  assign ctrlComm_cphsh1VReg_56$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_57
  assign ctrlComm_cphsh1VReg_57$D_IN = dut$dout[2527:2512] ;
  assign ctrlComm_cphsh1VReg_57$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_58
  assign ctrlComm_cphsh1VReg_58$D_IN = dut$dout[2543:2528] ;
  assign ctrlComm_cphsh1VReg_58$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_59
  assign ctrlComm_cphsh1VReg_59$D_IN = dut$dout[2559:2544] ;
  assign ctrlComm_cphsh1VReg_59$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_6
  assign ctrlComm_cphsh1VReg_6$D_IN = dut$dout[1711:1696] ;
  assign ctrlComm_cphsh1VReg_6$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_60
  assign ctrlComm_cphsh1VReg_60$D_IN = dut$dout[2575:2560] ;
  assign ctrlComm_cphsh1VReg_60$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_61
  assign ctrlComm_cphsh1VReg_61$D_IN = dut$dout[2591:2576] ;
  assign ctrlComm_cphsh1VReg_61$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_62
  assign ctrlComm_cphsh1VReg_62$D_IN = dut$dout[2607:2592] ;
  assign ctrlComm_cphsh1VReg_62$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_63
  assign ctrlComm_cphsh1VReg_63$D_IN = dut$dout[2623:2608] ;
  assign ctrlComm_cphsh1VReg_63$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_64
  assign ctrlComm_cphsh1VReg_64$D_IN = dut$dout[2639:2624] ;
  assign ctrlComm_cphsh1VReg_64$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_65
  assign ctrlComm_cphsh1VReg_65$D_IN = dut$dout[2655:2640] ;
  assign ctrlComm_cphsh1VReg_65$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_66
  assign ctrlComm_cphsh1VReg_66$D_IN = dut$dout[2671:2656] ;
  assign ctrlComm_cphsh1VReg_66$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_67
  assign ctrlComm_cphsh1VReg_67$D_IN = dut$dout[2687:2672] ;
  assign ctrlComm_cphsh1VReg_67$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_68
  assign ctrlComm_cphsh1VReg_68$D_IN = dut$dout[2703:2688] ;
  assign ctrlComm_cphsh1VReg_68$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_69
  assign ctrlComm_cphsh1VReg_69$D_IN = dut$dout[2719:2704] ;
  assign ctrlComm_cphsh1VReg_69$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_7
  assign ctrlComm_cphsh1VReg_7$D_IN = dut$dout[1727:1712] ;
  assign ctrlComm_cphsh1VReg_7$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_70
  assign ctrlComm_cphsh1VReg_70$D_IN = dut$dout[2735:2720] ;
  assign ctrlComm_cphsh1VReg_70$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_71
  assign ctrlComm_cphsh1VReg_71$D_IN = dut$dout[2751:2736] ;
  assign ctrlComm_cphsh1VReg_71$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_72
  assign ctrlComm_cphsh1VReg_72$D_IN = dut$dout[2767:2752] ;
  assign ctrlComm_cphsh1VReg_72$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_73
  assign ctrlComm_cphsh1VReg_73$D_IN = dut$dout[2783:2768] ;
  assign ctrlComm_cphsh1VReg_73$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_74
  assign ctrlComm_cphsh1VReg_74$D_IN = dut$dout[2799:2784] ;
  assign ctrlComm_cphsh1VReg_74$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_75
  assign ctrlComm_cphsh1VReg_75$D_IN = dut$dout[2815:2800] ;
  assign ctrlComm_cphsh1VReg_75$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_76
  assign ctrlComm_cphsh1VReg_76$D_IN = dut$dout[2831:2816] ;
  assign ctrlComm_cphsh1VReg_76$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_77
  assign ctrlComm_cphsh1VReg_77$D_IN = dut$dout[2847:2832] ;
  assign ctrlComm_cphsh1VReg_77$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_78
  assign ctrlComm_cphsh1VReg_78$D_IN = dut$dout[2863:2848] ;
  assign ctrlComm_cphsh1VReg_78$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_79
  assign ctrlComm_cphsh1VReg_79$D_IN = dut$dout[2879:2864] ;
  assign ctrlComm_cphsh1VReg_79$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_8
  assign ctrlComm_cphsh1VReg_8$D_IN = dut$dout[1743:1728] ;
  assign ctrlComm_cphsh1VReg_8$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_80
  assign ctrlComm_cphsh1VReg_80$D_IN = dut$dout[2895:2880] ;
  assign ctrlComm_cphsh1VReg_80$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_81
  assign ctrlComm_cphsh1VReg_81$D_IN = dut$dout[2911:2896] ;
  assign ctrlComm_cphsh1VReg_81$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_82
  assign ctrlComm_cphsh1VReg_82$D_IN = dut$dout[2927:2912] ;
  assign ctrlComm_cphsh1VReg_82$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_83
  assign ctrlComm_cphsh1VReg_83$D_IN = dut$dout[2943:2928] ;
  assign ctrlComm_cphsh1VReg_83$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_84
  assign ctrlComm_cphsh1VReg_84$D_IN = dut$dout[2959:2944] ;
  assign ctrlComm_cphsh1VReg_84$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_85
  assign ctrlComm_cphsh1VReg_85$D_IN = dut$dout[2975:2960] ;
  assign ctrlComm_cphsh1VReg_85$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_86
  assign ctrlComm_cphsh1VReg_86$D_IN = dut$dout[2991:2976] ;
  assign ctrlComm_cphsh1VReg_86$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_87
  assign ctrlComm_cphsh1VReg_87$D_IN = dut$dout[3007:2992] ;
  assign ctrlComm_cphsh1VReg_87$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_88
  assign ctrlComm_cphsh1VReg_88$D_IN = dut$dout[3023:3008] ;
  assign ctrlComm_cphsh1VReg_88$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_89
  assign ctrlComm_cphsh1VReg_89$D_IN = dut$dout[3039:3024] ;
  assign ctrlComm_cphsh1VReg_89$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_9
  assign ctrlComm_cphsh1VReg_9$D_IN = dut$dout[1759:1744] ;
  assign ctrlComm_cphsh1VReg_9$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_90
  assign ctrlComm_cphsh1VReg_90$D_IN = dut$dout[3055:3040] ;
  assign ctrlComm_cphsh1VReg_90$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_91
  assign ctrlComm_cphsh1VReg_91$D_IN = dut$dout[3071:3056] ;
  assign ctrlComm_cphsh1VReg_91$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_92
  assign ctrlComm_cphsh1VReg_92$D_IN = dut$dout[3087:3072] ;
  assign ctrlComm_cphsh1VReg_92$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_93
  assign ctrlComm_cphsh1VReg_93$D_IN = dut$dout[3103:3088] ;
  assign ctrlComm_cphsh1VReg_93$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_94
  assign ctrlComm_cphsh1VReg_94$D_IN = dut$dout[3119:3104] ;
  assign ctrlComm_cphsh1VReg_94$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_95
  assign ctrlComm_cphsh1VReg_95$D_IN = dut$dout[3135:3120] ;
  assign ctrlComm_cphsh1VReg_95$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_96
  assign ctrlComm_cphsh1VReg_96$D_IN = dut$dout[3151:3136] ;
  assign ctrlComm_cphsh1VReg_96$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_97
  assign ctrlComm_cphsh1VReg_97$D_IN = dut$dout[3167:3152] ;
  assign ctrlComm_cphsh1VReg_97$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_98
  assign ctrlComm_cphsh1VReg_98$D_IN = dut$dout[3183:3168] ;
  assign ctrlComm_cphsh1VReg_98$EN = dut$dout_vld ;

  // register ctrlComm_cphsh1VReg_99
  assign ctrlComm_cphsh1VReg_99$D_IN = dut$dout[3199:3184] ;
  assign ctrlComm_cphsh1VReg_99$EN = dut$dout_vld ;

  // register ctrlComm_encDoneProcessed
  assign ctrlComm_encDoneProcessed$D_IN =
	     !WILL_FIRE_RL_ctrlComm_resetEncDoneProcessed ;
  assign ctrlComm_encDoneProcessed$EN =
	     WILL_FIRE_RL_ctrlComm_resetEncDoneProcessed ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess ;

  // register ctrlComm_encState
  always@(trigger or
	  ctrlComm_encState or MUX_ctrlComm_encState$write_1__SEL_3)
  case (1'b1)
    trigger: ctrlComm_encState$D_IN = 2'd1;
    ctrlComm_encState == 2'd3: ctrlComm_encState$D_IN = 2'd0;
    MUX_ctrlComm_encState$write_1__SEL_3: ctrlComm_encState$D_IN = 2'd3;
    ctrlComm_encState == 2'd1: ctrlComm_encState$D_IN = 2'd2;
    default: ctrlComm_encState$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign ctrlComm_encState$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd1 ||
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 &&
	     ctrlComm_random_cnt == 5'd0 ||
	     ctrlComm_encState == 2'd3 ||
	     ctrlComm_encState == 2'd1 ;

  // register ctrlComm_plnsh0VReg_0
  assign ctrlComm_plnsh0VReg_0$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_0$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd0 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_1
  assign ctrlComm_plnsh0VReg_1$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_1$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd1 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_10
  assign ctrlComm_plnsh0VReg_10$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_10$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd10 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_11
  assign ctrlComm_plnsh0VReg_11$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_11$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd11 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_12
  assign ctrlComm_plnsh0VReg_12$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_12$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd12 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_13
  assign ctrlComm_plnsh0VReg_13$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_13$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd13 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_14
  assign ctrlComm_plnsh0VReg_14$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_14$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd14 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_15
  assign ctrlComm_plnsh0VReg_15$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_15$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd15 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_16
  assign ctrlComm_plnsh0VReg_16$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_16$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd16 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_17
  assign ctrlComm_plnsh0VReg_17$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_17$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd17 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_18
  assign ctrlComm_plnsh0VReg_18$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_18$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd18 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_19
  assign ctrlComm_plnsh0VReg_19$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_19$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd19 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_2
  assign ctrlComm_plnsh0VReg_2$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_2$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd2 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_20
  assign ctrlComm_plnsh0VReg_20$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_20$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd20 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_21
  assign ctrlComm_plnsh0VReg_21$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_21$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd21 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_22
  assign ctrlComm_plnsh0VReg_22$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_22$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd22 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_23
  assign ctrlComm_plnsh0VReg_23$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_23$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd23 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_24
  assign ctrlComm_plnsh0VReg_24$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_24$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd24 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_25
  assign ctrlComm_plnsh0VReg_25$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_25$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd25 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_26
  assign ctrlComm_plnsh0VReg_26$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_26$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd26 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_27
  assign ctrlComm_plnsh0VReg_27$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_27$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd27 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_28
  assign ctrlComm_plnsh0VReg_28$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_28$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd28 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_29
  assign ctrlComm_plnsh0VReg_29$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_29$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd29 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_3
  assign ctrlComm_plnsh0VReg_3$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_3$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd3 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_30
  assign ctrlComm_plnsh0VReg_30$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_30$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd30 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_31
  assign ctrlComm_plnsh0VReg_31$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_31$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd31 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_32
  assign ctrlComm_plnsh0VReg_32$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_32$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd32 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_33
  assign ctrlComm_plnsh0VReg_33$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_33$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd33 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_34
  assign ctrlComm_plnsh0VReg_34$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_34$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd34 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_35
  assign ctrlComm_plnsh0VReg_35$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_35$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd35 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_36
  assign ctrlComm_plnsh0VReg_36$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_36$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd36 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_37
  assign ctrlComm_plnsh0VReg_37$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_37$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd37 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_38
  assign ctrlComm_plnsh0VReg_38$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_38$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd38 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_39
  assign ctrlComm_plnsh0VReg_39$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_39$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd39 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_4
  assign ctrlComm_plnsh0VReg_4$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_4$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd4 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_40
  assign ctrlComm_plnsh0VReg_40$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_40$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd40 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_41
  assign ctrlComm_plnsh0VReg_41$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_41$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd41 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_42
  assign ctrlComm_plnsh0VReg_42$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_42$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd42 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_43
  assign ctrlComm_plnsh0VReg_43$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_43$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd43 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_44
  assign ctrlComm_plnsh0VReg_44$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_44$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd44 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_45
  assign ctrlComm_plnsh0VReg_45$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_45$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd45 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_46
  assign ctrlComm_plnsh0VReg_46$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_46$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd46 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_47
  assign ctrlComm_plnsh0VReg_47$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_47$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd47 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_48
  assign ctrlComm_plnsh0VReg_48$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_48$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd48 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_49
  assign ctrlComm_plnsh0VReg_49$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_49$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd49 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_5
  assign ctrlComm_plnsh0VReg_5$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_5$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd5 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_50
  assign ctrlComm_plnsh0VReg_50$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_50$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd50 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_51
  assign ctrlComm_plnsh0VReg_51$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_51$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd51 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_52
  assign ctrlComm_plnsh0VReg_52$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_52$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd52 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_53
  assign ctrlComm_plnsh0VReg_53$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_53$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd53 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_54
  assign ctrlComm_plnsh0VReg_54$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_54$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd54 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_55
  assign ctrlComm_plnsh0VReg_55$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_55$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd55 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_56
  assign ctrlComm_plnsh0VReg_56$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_56$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd56 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_57
  assign ctrlComm_plnsh0VReg_57$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_57$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd57 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_58
  assign ctrlComm_plnsh0VReg_58$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_58$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd58 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_59
  assign ctrlComm_plnsh0VReg_59$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_59$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd59 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_6
  assign ctrlComm_plnsh0VReg_6$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_6$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd6 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_60
  assign ctrlComm_plnsh0VReg_60$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_60$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd60 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_61
  assign ctrlComm_plnsh0VReg_61$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_61$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd61 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_62
  assign ctrlComm_plnsh0VReg_62$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_62$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd62 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_63
  assign ctrlComm_plnsh0VReg_63$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_63$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd63 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_64
  assign ctrlComm_plnsh0VReg_64$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_64$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd64 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_65
  assign ctrlComm_plnsh0VReg_65$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_65$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd65 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_66
  assign ctrlComm_plnsh0VReg_66$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_66$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd66 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_67
  assign ctrlComm_plnsh0VReg_67$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_67$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd67 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_68
  assign ctrlComm_plnsh0VReg_68$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_68$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd68 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_69
  assign ctrlComm_plnsh0VReg_69$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_69$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd69 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_7
  assign ctrlComm_plnsh0VReg_7$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_7$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd7 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_70
  assign ctrlComm_plnsh0VReg_70$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_70$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd70 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_71
  assign ctrlComm_plnsh0VReg_71$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_71$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd71 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_72
  assign ctrlComm_plnsh0VReg_72$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_72$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd72 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_73
  assign ctrlComm_plnsh0VReg_73$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_73$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd73 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_74
  assign ctrlComm_plnsh0VReg_74$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_74$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd74 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_75
  assign ctrlComm_plnsh0VReg_75$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_75$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd75 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_76
  assign ctrlComm_plnsh0VReg_76$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_76$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd76 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_77
  assign ctrlComm_plnsh0VReg_77$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_77$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd77 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_78
  assign ctrlComm_plnsh0VReg_78$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_78$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd78 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_79
  assign ctrlComm_plnsh0VReg_79$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_79$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd79 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_8
  assign ctrlComm_plnsh0VReg_8$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_8$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd8 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_80
  assign ctrlComm_plnsh0VReg_80$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_80$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd80 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_81
  assign ctrlComm_plnsh0VReg_81$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_81$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd81 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_82
  assign ctrlComm_plnsh0VReg_82$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_82$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd82 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_83
  assign ctrlComm_plnsh0VReg_83$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_83$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd83 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_84
  assign ctrlComm_plnsh0VReg_84$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_84$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd84 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_85
  assign ctrlComm_plnsh0VReg_85$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_85$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd85 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_86
  assign ctrlComm_plnsh0VReg_86$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_86$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd86 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_87
  assign ctrlComm_plnsh0VReg_87$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_87$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd87 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_88
  assign ctrlComm_plnsh0VReg_88$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_88$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd88 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_89
  assign ctrlComm_plnsh0VReg_89$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_89$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd89 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_9
  assign ctrlComm_plnsh0VReg_9$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_9$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd9 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_90
  assign ctrlComm_plnsh0VReg_90$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_90$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd90 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_91
  assign ctrlComm_plnsh0VReg_91$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_91$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd91 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_92
  assign ctrlComm_plnsh0VReg_92$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_92$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd92 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_93
  assign ctrlComm_plnsh0VReg_93$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_93$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd93 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_94
  assign ctrlComm_plnsh0VReg_94$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_94$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd94 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_95
  assign ctrlComm_plnsh0VReg_95$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_95$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd95 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_96
  assign ctrlComm_plnsh0VReg_96$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_96$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd96 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_97
  assign ctrlComm_plnsh0VReg_97$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_97$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd97 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_98
  assign ctrlComm_plnsh0VReg_98$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_98$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd98 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh0VReg_99
  assign ctrlComm_plnsh0VReg_99$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh0VReg_99$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd99 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd0 ;

  // register ctrlComm_plnsh1VReg_0
  assign ctrlComm_plnsh1VReg_0$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_0$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd0 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_1
  assign ctrlComm_plnsh1VReg_1$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_1$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd1 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_10
  assign ctrlComm_plnsh1VReg_10$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_10$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd10 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_11
  assign ctrlComm_plnsh1VReg_11$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_11$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd11 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_12
  assign ctrlComm_plnsh1VReg_12$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_12$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd12 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_13
  assign ctrlComm_plnsh1VReg_13$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_13$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd13 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_14
  assign ctrlComm_plnsh1VReg_14$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_14$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd14 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_15
  assign ctrlComm_plnsh1VReg_15$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_15$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd15 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_16
  assign ctrlComm_plnsh1VReg_16$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_16$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd16 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_17
  assign ctrlComm_plnsh1VReg_17$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_17$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd17 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_18
  assign ctrlComm_plnsh1VReg_18$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_18$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd18 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_19
  assign ctrlComm_plnsh1VReg_19$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_19$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd19 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_2
  assign ctrlComm_plnsh1VReg_2$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_2$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd2 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_20
  assign ctrlComm_plnsh1VReg_20$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_20$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd20 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_21
  assign ctrlComm_plnsh1VReg_21$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_21$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd21 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_22
  assign ctrlComm_plnsh1VReg_22$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_22$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd22 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_23
  assign ctrlComm_plnsh1VReg_23$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_23$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd23 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_24
  assign ctrlComm_plnsh1VReg_24$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_24$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd24 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_25
  assign ctrlComm_plnsh1VReg_25$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_25$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd25 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_26
  assign ctrlComm_plnsh1VReg_26$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_26$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd26 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_27
  assign ctrlComm_plnsh1VReg_27$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_27$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd27 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_28
  assign ctrlComm_plnsh1VReg_28$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_28$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd28 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_29
  assign ctrlComm_plnsh1VReg_29$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_29$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd29 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_3
  assign ctrlComm_plnsh1VReg_3$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_3$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd3 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_30
  assign ctrlComm_plnsh1VReg_30$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_30$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd30 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_31
  assign ctrlComm_plnsh1VReg_31$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_31$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd31 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_32
  assign ctrlComm_plnsh1VReg_32$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_32$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd32 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_33
  assign ctrlComm_plnsh1VReg_33$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_33$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd33 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_34
  assign ctrlComm_plnsh1VReg_34$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_34$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd34 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_35
  assign ctrlComm_plnsh1VReg_35$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_35$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd35 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_36
  assign ctrlComm_plnsh1VReg_36$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_36$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd36 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_37
  assign ctrlComm_plnsh1VReg_37$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_37$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd37 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_38
  assign ctrlComm_plnsh1VReg_38$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_38$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd38 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_39
  assign ctrlComm_plnsh1VReg_39$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_39$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd39 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_4
  assign ctrlComm_plnsh1VReg_4$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_4$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd4 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_40
  assign ctrlComm_plnsh1VReg_40$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_40$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd40 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_41
  assign ctrlComm_plnsh1VReg_41$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_41$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd41 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_42
  assign ctrlComm_plnsh1VReg_42$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_42$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd42 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_43
  assign ctrlComm_plnsh1VReg_43$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_43$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd43 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_44
  assign ctrlComm_plnsh1VReg_44$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_44$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd44 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_45
  assign ctrlComm_plnsh1VReg_45$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_45$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd45 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_46
  assign ctrlComm_plnsh1VReg_46$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_46$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd46 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_47
  assign ctrlComm_plnsh1VReg_47$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_47$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd47 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_48
  assign ctrlComm_plnsh1VReg_48$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_48$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd48 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_49
  assign ctrlComm_plnsh1VReg_49$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_49$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd49 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_5
  assign ctrlComm_plnsh1VReg_5$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_5$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd5 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_50
  assign ctrlComm_plnsh1VReg_50$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_50$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd50 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_51
  assign ctrlComm_plnsh1VReg_51$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_51$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd51 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_52
  assign ctrlComm_plnsh1VReg_52$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_52$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd52 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_53
  assign ctrlComm_plnsh1VReg_53$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_53$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd53 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_54
  assign ctrlComm_plnsh1VReg_54$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_54$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd54 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_55
  assign ctrlComm_plnsh1VReg_55$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_55$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd55 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_56
  assign ctrlComm_plnsh1VReg_56$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_56$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd56 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_57
  assign ctrlComm_plnsh1VReg_57$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_57$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd57 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_58
  assign ctrlComm_plnsh1VReg_58$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_58$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd58 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_59
  assign ctrlComm_plnsh1VReg_59$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_59$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd59 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_6
  assign ctrlComm_plnsh1VReg_6$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_6$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd6 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_60
  assign ctrlComm_plnsh1VReg_60$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_60$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd60 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_61
  assign ctrlComm_plnsh1VReg_61$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_61$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd61 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_62
  assign ctrlComm_plnsh1VReg_62$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_62$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd62 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_63
  assign ctrlComm_plnsh1VReg_63$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_63$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd63 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_64
  assign ctrlComm_plnsh1VReg_64$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_64$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd64 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_65
  assign ctrlComm_plnsh1VReg_65$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_65$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd65 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_66
  assign ctrlComm_plnsh1VReg_66$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_66$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd66 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_67
  assign ctrlComm_plnsh1VReg_67$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_67$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd67 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_68
  assign ctrlComm_plnsh1VReg_68$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_68$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd68 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_69
  assign ctrlComm_plnsh1VReg_69$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_69$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd69 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_7
  assign ctrlComm_plnsh1VReg_7$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_7$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd7 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_70
  assign ctrlComm_plnsh1VReg_70$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_70$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd70 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_71
  assign ctrlComm_plnsh1VReg_71$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_71$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd71 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_72
  assign ctrlComm_plnsh1VReg_72$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_72$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd72 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_73
  assign ctrlComm_plnsh1VReg_73$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_73$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd73 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_74
  assign ctrlComm_plnsh1VReg_74$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_74$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd74 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_75
  assign ctrlComm_plnsh1VReg_75$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_75$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd75 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_76
  assign ctrlComm_plnsh1VReg_76$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_76$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd76 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_77
  assign ctrlComm_plnsh1VReg_77$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_77$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd77 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_78
  assign ctrlComm_plnsh1VReg_78$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_78$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd78 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_79
  assign ctrlComm_plnsh1VReg_79$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_79$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd79 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_8
  assign ctrlComm_plnsh1VReg_8$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_8$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd8 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_80
  assign ctrlComm_plnsh1VReg_80$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_80$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd80 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_81
  assign ctrlComm_plnsh1VReg_81$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_81$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd81 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_82
  assign ctrlComm_plnsh1VReg_82$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_82$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd82 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_83
  assign ctrlComm_plnsh1VReg_83$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_83$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd83 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_84
  assign ctrlComm_plnsh1VReg_84$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_84$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd84 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_85
  assign ctrlComm_plnsh1VReg_85$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_85$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd85 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_86
  assign ctrlComm_plnsh1VReg_86$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_86$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd86 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_87
  assign ctrlComm_plnsh1VReg_87$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_87$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd87 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_88
  assign ctrlComm_plnsh1VReg_88$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_88$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd88 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_89
  assign ctrlComm_plnsh1VReg_89$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_89$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd89 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_9
  assign ctrlComm_plnsh1VReg_9$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_9$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd9 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_90
  assign ctrlComm_plnsh1VReg_90$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_90$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd90 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_91
  assign ctrlComm_plnsh1VReg_91$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_91$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd91 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_92
  assign ctrlComm_plnsh1VReg_92$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_92$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd92 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_93
  assign ctrlComm_plnsh1VReg_93$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_93$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd93 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_94
  assign ctrlComm_plnsh1VReg_94$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_94$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd94 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_95
  assign ctrlComm_plnsh1VReg_95$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_95$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd95 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_96
  assign ctrlComm_plnsh1VReg_96$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_96$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd96 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_97
  assign ctrlComm_plnsh1VReg_97$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_97$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd97 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_98
  assign ctrlComm_plnsh1VReg_98$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_98$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd98 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_plnsh1VReg_99
  assign ctrlComm_plnsh1VReg_99$D_IN = c2mCDCProc_dataReg ;
  assign ctrlComm_plnsh1VReg_99$EN =
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[6:0] == 7'd99 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd1 ;

  // register ctrlComm_random_cnt
  assign ctrlComm_random_cnt$D_IN =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 ?
	       MUX_ctrlComm_random_cnt$write_1__VAL_1 :
	       5'h17 ;
  assign ctrlComm_random_cnt$EN =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 ||
	     ctrlComm_encState == 2'd1 ;

  // register ctrlComm_rdiSwitch
  assign ctrlComm_rdiSwitch$D_IN = ctrlComm_addr != 14'd8 ;
  assign ctrlComm_rdiSwitch$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR &&
	     (ctrlComm_addr == 14'd8192 || ctrlComm_addr == 14'd8 ||
	      ctrlComm_addr == 14'd16) ;

  // register ctrlComm_seedVReg_0
  assign ctrlComm_seedVReg_0$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_0$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd0 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_1
  assign ctrlComm_seedVReg_1$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_1$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd1 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_2
  assign ctrlComm_seedVReg_2$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_2$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd2 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_3
  assign ctrlComm_seedVReg_3$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_3$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd3 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_4
  assign ctrlComm_seedVReg_4$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_4$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd4 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_5
  assign ctrlComm_seedVReg_5$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_5$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd5 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_6
  assign ctrlComm_seedVReg_6$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_6$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd6 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_7
  assign ctrlComm_seedVReg_7$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_7$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd7 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_8
  assign ctrlComm_seedVReg_8$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_8$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd8 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_seedVReg_9
  assign ctrlComm_seedVReg_9$D_IN =
	     MUX_ctrlComm_addr$write_1__SEL_1 ? 16'd0 : c2mCDCProc_dataReg ;
  assign ctrlComm_seedVReg_9$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_mkConnectionGetPut && ctrlComm_addr[3:0] == 4'd9 &&
	     ctrlComm_state != 2'd0 &&
	     ctrlComm_addr[13:7] == 7'd48 ;

  // register ctrlComm_state
  assign ctrlComm_state$D_IN =
	     MUX_ctrlComm_state$write_1__SEL_3 ?
	       MUX_ctrlComm_state$write_1__VAL_3 :
	       2'd0 ;
  assign ctrlComm_state$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR &&
	     (ctrlComm_addr == 14'd8192 || ctrlComm_addr == 14'd1 ||
	      ctrlComm_addr == 14'd2 ||
	      ctrlComm_addr == 14'd4 ||
	      ctrlComm_addr == 14'd8 ||
	      ctrlComm_addr == 14'd16) ||
	     WILL_FIRE_RL_ctrlComm_stateACQ &&
	     (ctrlComm_addr[13:7] == 7'd0 || ctrlComm_addr[13:7] == 7'd1 ||
	      ctrlComm_addr[13:7] == 7'd32 ||
	      ctrlComm_addr[13:7] == 7'd33 ||
	      ctrlComm_addr[13:7] == 7'd48 ||
	      ctrlComm_addr[13:7] == 7'd127) ||
	     WILL_FIRE_RL_mkConnectionGetPut &&
	     (c2mCDCProc_dataReg[15:14] == 2'd0 ||
	      c2mCDCProc_dataReg[15:14] == 2'd1 ||
	      c2mCDCProc_dataReg[15:14] == 2'd2 ||
	      ctrlComm_state != 2'd0) ;

  // register deviceRdyCnt
  assign deviceRdyCnt$D_IN = deviceRdyCnt + 2'd1 ;
  assign deviceRdyCnt$EN = deviceRdyCnt != 2'd3 ;

  // register deviceRdyReg
  assign deviceRdyReg$D_IN = 1'd1 ;
  assign deviceRdyReg$EN = deviceRdyCnt == 2'd3 ;

  // register m2cCDCProc_dataReg
  assign m2cCDCProc_dataReg$D_IN = ctrlComm_m2cMsgFIFO$D_OUT ;
  assign m2cCDCProc_dataReg$EN = MUX_m2cCDCProc_txRdy$write_1__SEL_2 ;

  // register m2cCDCProc_doneLvlReg1
  assign m2cCDCProc_doneLvlReg1$D_IN = m2c_done_lvl ;
  assign m2cCDCProc_doneLvlReg1$EN = 1'd1 ;

  // register m2cCDCProc_doneLvlReg2
  assign m2cCDCProc_doneLvlReg2$D_IN = m2cCDCProc_doneLvlReg1 ;
  assign m2cCDCProc_doneLvlReg2$EN = 1'd1 ;

  // register m2cCDCProc_doneLvlReg3
  assign m2cCDCProc_doneLvlReg3$D_IN = m2cCDCProc_doneLvlReg2 ;
  assign m2cCDCProc_doneLvlReg3$EN = 1'd1 ;

  // register m2cCDCProc_enLvlReg
  assign m2cCDCProc_enLvlReg$D_IN = ~m2cCDCProc_enLvlReg ;
  assign m2cCDCProc_enLvlReg$EN = MUX_m2cCDCProc_txRdy$write_1__SEL_2 ;

  // register m2cCDCProc_txRdy
  assign m2cCDCProc_txRdy$D_IN =
	     NOT_m2cCDCProc_doneLvlReg3_223_EQ_m2cCDCProc_d_ETC___d1225 ;
  assign m2cCDCProc_txRdy$EN =
	     NOT_m2cCDCProc_doneLvlReg3_223_EQ_m2cCDCProc_d_ETC___d1225 ||
	     ctrlComm_m2cMsgFIFO$EMPTY_N && m2cCDCProc_txRdy ;

  // register randManage_addr
  always@(MUX_randManage_addr$write_1__SEL_1 or
	  MUX_ctrlComm_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_randManage_stateRandGen or
	  MUX_randManage_addr$write_1__VAL_3 or
	  MUX_randManage_addr$write_1__SEL_4 or
	  MUX_randManage_addr$write_1__VAL_4)
  case (1'b1)
    MUX_randManage_addr$write_1__SEL_1 || MUX_ctrlComm_addr$write_1__SEL_1:
	randManage_addr$D_IN = 16'd0;
    WILL_FIRE_RL_randManage_stateRandGen:
	randManage_addr$D_IN = MUX_randManage_addr$write_1__VAL_3;
    MUX_randManage_addr$write_1__SEL_4:
	randManage_addr$D_IN = MUX_randManage_addr$write_1__VAL_4;
    default: randManage_addr$D_IN =
		 16'b1010101010101010 /* unspecified value */ ;
  endcase
  assign randManage_addr$EN =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 && ctrlComm_rdiSwitch ||
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd8192 ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateRandGen ;

  // register randManage_prng_state
  assign randManage_prng_state$D_IN =
	     MUX_randManage_prng_state$write_1__SEL_1 ? 2'd1 : 2'd2 ;
  assign randManage_prng_state$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ||
	     randManage_prng_state == 2'd1 &&
	     randManage_prng_warmUpCnt == 10'd575 ;

  // register randManage_prng_triviumCore_regA
  always@(MUX_randManage_addr$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regA$write_1__VAL_1 or
	  MUX_randManage_prng_state$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regA$write_1__VAL_2 or
	  MUX_randManage_prng_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_randManage_stateWarmUp or randManage_prng_state)
  case (1'b1)
    MUX_randManage_addr$write_1__SEL_1:
	randManage_prng_triviumCore_regA$D_IN =
	    MUX_randManage_prng_triviumCore_regA$write_1__VAL_1;
    MUX_randManage_prng_state$write_1__SEL_1:
	randManage_prng_triviumCore_regA$D_IN =
	    MUX_randManage_prng_triviumCore_regA$write_1__VAL_2;
    MUX_randManage_prng_triviumCore_regA$write_1__SEL_3:
	randManage_prng_triviumCore_regA$D_IN =
	    MUX_randManage_prng_triviumCore_regA$write_1__VAL_1;
    WILL_FIRE_RL_randManage_stateWarmUp:
	randManage_prng_triviumCore_regA$D_IN =
	    MUX_randManage_prng_triviumCore_regA$write_1__VAL_1;
    randManage_prng_state == 2'd1:
	randManage_prng_triviumCore_regA$D_IN =
	    MUX_randManage_prng_triviumCore_regA$write_1__VAL_1;
    default: randManage_prng_triviumCore_regA$D_IN =
		 93'h0AAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign randManage_prng_triviumCore_regA$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ||
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr != 16'd65535 ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateWarmUp ||
	     randManage_prng_state == 2'd1 ;

  // register randManage_prng_triviumCore_regB
  always@(MUX_randManage_addr$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regB$write_1__VAL_1 or
	  MUX_randManage_prng_state$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regB$write_1__VAL_2 or
	  MUX_randManage_prng_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_randManage_stateWarmUp or randManage_prng_state)
  case (1'b1)
    MUX_randManage_addr$write_1__SEL_1:
	randManage_prng_triviumCore_regB$D_IN =
	    MUX_randManage_prng_triviumCore_regB$write_1__VAL_1;
    MUX_randManage_prng_state$write_1__SEL_1:
	randManage_prng_triviumCore_regB$D_IN =
	    MUX_randManage_prng_triviumCore_regB$write_1__VAL_2;
    MUX_randManage_prng_triviumCore_regA$write_1__SEL_3:
	randManage_prng_triviumCore_regB$D_IN =
	    MUX_randManage_prng_triviumCore_regB$write_1__VAL_1;
    WILL_FIRE_RL_randManage_stateWarmUp:
	randManage_prng_triviumCore_regB$D_IN =
	    MUX_randManage_prng_triviumCore_regB$write_1__VAL_1;
    randManage_prng_state == 2'd1:
	randManage_prng_triviumCore_regB$D_IN =
	    MUX_randManage_prng_triviumCore_regB$write_1__VAL_1;
    default: randManage_prng_triviumCore_regB$D_IN =
		 84'hAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign randManage_prng_triviumCore_regB$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ||
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr != 16'd65535 ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateWarmUp ||
	     randManage_prng_state == 2'd1 ;

  // register randManage_prng_triviumCore_regC
  always@(MUX_randManage_addr$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regC$write_1__VAL_1 or
	  MUX_randManage_prng_state$write_1__SEL_1 or
	  MUX_randManage_prng_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_randManage_stateWarmUp or randManage_prng_state)
  case (1'b1)
    MUX_randManage_addr$write_1__SEL_1:
	randManage_prng_triviumCore_regC$D_IN =
	    MUX_randManage_prng_triviumCore_regC$write_1__VAL_1;
    MUX_randManage_prng_state$write_1__SEL_1:
	randManage_prng_triviumCore_regC$D_IN =
	    111'h7000000000000000000000000000;
    MUX_randManage_prng_triviumCore_regA$write_1__SEL_3:
	randManage_prng_triviumCore_regC$D_IN =
	    MUX_randManage_prng_triviumCore_regC$write_1__VAL_1;
    WILL_FIRE_RL_randManage_stateWarmUp:
	randManage_prng_triviumCore_regC$D_IN =
	    MUX_randManage_prng_triviumCore_regC$write_1__VAL_1;
    randManage_prng_state == 2'd1:
	randManage_prng_triviumCore_regC$D_IN =
	    MUX_randManage_prng_triviumCore_regC$write_1__VAL_1;
    default: randManage_prng_triviumCore_regC$D_IN =
		 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign randManage_prng_triviumCore_regC$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ||
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr != 16'd65535 ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateWarmUp ||
	     randManage_prng_state == 2'd1 ;

  // register randManage_prng_warmUpCnt
  assign randManage_prng_warmUpCnt$D_IN =
	     MUX_randManage_prng_state$write_1__SEL_1 ?
	       10'd0 :
	       MUX_randManage_prng_warmUpCnt$write_1__VAL_2 ;
  assign randManage_prng_warmUpCnt$EN =
	     WILL_FIRE_RL_ctrlComm_stateINSTR && ctrlComm_addr == 14'd4 ||
	     randManage_prng_state == 2'd1 ;

  // register randManage_rdi_0
  always@(MUX_randManage_prng_triviumCore_regA$write_1__SEL_3 or
	  MUX_randManage_rdi_0$write_1__VAL_1 or
	  MUX_randManage_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_randManage_stateWarmUp)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_randManage_prng_triviumCore_regA$write_1__SEL_3:
	  randManage_rdi_0$D_IN = MUX_randManage_rdi_0$write_1__VAL_1;
      MUX_randManage_addr$write_1__SEL_1:
	  randManage_rdi_0$D_IN = MUX_randManage_rdi_0$write_1__VAL_1;
      WILL_FIRE_RL_randManage_stateWarmUp:
	  randManage_rdi_0$D_IN = MUX_randManage_rdi_0$write_1__VAL_1;
      default: randManage_rdi_0$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign randManage_rdi_0$EN =
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr != 16'd65535 ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateWarmUp ;

  // register randManage_state
  always@(MUX_randManage_state$write_1__SEL_2 or
	  MUX_randManage_state$write_1__VAL_2 or
	  MUX_randManage_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_randManage_stateWarmUp or
	  MUX_randManage_state$write_1__SEL_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_randManage_state$write_1__SEL_2:
	  randManage_state$D_IN = MUX_randManage_state$write_1__VAL_2;
      MUX_randManage_addr$write_1__SEL_1 ||
      WILL_FIRE_RL_randManage_stateWarmUp:
	  randManage_state$D_IN = 2'd2;
      MUX_randManage_state$write_1__SEL_1: randManage_state$D_IN = 2'd3;
      default: randManage_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign randManage_state$EN =
	     WILL_FIRE_RL_randManage_stateRandGen &&
	     randManage_addr == 16'd65535 ||
	     WILL_FIRE_RL_ctrlComm_stateINSTR &&
	     (ctrlComm_addr == 14'd8192 || ctrlComm_addr == 14'd4) ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess && ctrlComm_rdiSwitch &&
	     randManage_addr_8_ULT_23___d648 ||
	     WILL_FIRE_RL_randManage_stateWarmUp ;

  // submodule ctrlComm_m2cMsgFIFO
  assign ctrlComm_m2cMsgFIFO$D_IN =
	     MUX_ctrlComm_m2cMsgFIFO$enq_1__SEL_1 ?
	       MUX_ctrlComm_m2cMsgFIFO$enq_1__VAL_1 :
	       16'd56797 ;
  assign ctrlComm_m2cMsgFIFO$ENQ =
	     WILL_FIRE_RL_ctrlComm_stateACQ &&
	     (ctrlComm_addr[13:7] == 7'd32 || ctrlComm_addr[13:7] == 7'd33 ||
	      ctrlComm_addr[13:7] == 7'd127) ||
	     WILL_FIRE_RL_ctrlComm_encDoneProcess ;
  assign ctrlComm_m2cMsgFIFO$DEQ = MUX_m2cCDCProc_txRdy$write_1__SEL_2 ;
  assign ctrlComm_m2cMsgFIFO$CLR = MUX_ctrlComm_addr$write_1__SEL_1 ;

  // submodule dut
  assign dut$din =
	     { ctrlComm_plnsh0VReg_99,
	       ctrlComm_plnsh0VReg_98,
	       ctrlComm_plnsh0VReg_97,
	       ctrlComm_plnsh0VReg_96,
	       ctrlComm_plnsh0VReg_95,
	       ctrlComm_plnsh0VReg_94,
	       ctrlComm_plnsh0VReg_93,
	       ctrlComm_plnsh0VReg_92,
	       ctrlComm_plnsh0VReg_91,
	       ctrlComm_plnsh0VReg_90,
	       ctrlComm_plnsh0VReg_89,
	       ctrlComm_plnsh0VReg_88,
	       ctrlComm_plnsh0VReg_87,
	       ctrlComm_plnsh0VReg_86,
	       ctrlComm_plnsh0VReg_85,
	       ctrlComm_plnsh0VReg_84,
	       ctrlComm_plnsh0VReg_83,
	       ctrlComm_plnsh0VReg_82,
	       ctrlComm_plnsh0VReg_81,
	       ctrlComm_plnsh0VReg_80,
	       ctrlComm_plnsh0VReg_79,
	       ctrlComm_plnsh0VReg_78,
	       ctrlComm_plnsh0VReg_77,
	       ctrlComm_plnsh0VReg_76,
	       ctrlComm_plnsh0VReg_75,
	       ctrlComm_plnsh0VReg_74,
	       ctrlComm_plnsh0VReg_73,
	       ctrlComm_plnsh0VReg_72,
	       ctrlComm_plnsh0VReg_71,
	       ctrlComm_plnsh0VReg_70,
	       ctrlComm_plnsh0VReg_69,
	       ctrlComm_plnsh0VReg_68,
	       ctrlComm_plnsh0VReg_67,
	       ctrlComm_plnsh0VReg_66,
	       ctrlComm_plnsh0VReg_65,
	       ctrlComm_plnsh0VReg_64,
	       ctrlComm_plnsh0VReg_63,
	       ctrlComm_plnsh0VReg_62,
	       ctrlComm_plnsh0VReg_61,
	       ctrlComm_plnsh0VReg_60,
	       ctrlComm_plnsh0VReg_59,
	       ctrlComm_plnsh0VReg_58,
	       ctrlComm_plnsh0VReg_57,
	       ctrlComm_plnsh0VReg_56,
	       ctrlComm_plnsh0VReg_55,
	       ctrlComm_plnsh0VReg_54,
	       ctrlComm_plnsh0VReg_53,
	       ctrlComm_plnsh0VReg_52,
	       ctrlComm_plnsh0VReg_51,
	       ctrlComm_plnsh0VReg_50,
	       ctrlComm_plnsh0VReg_49,
	       ctrlComm_plnsh0VReg_48,
	       ctrlComm_plnsh0VReg_47,
	       ctrlComm_plnsh0VReg_46,
	       ctrlComm_plnsh0VReg_45,
	       ctrlComm_plnsh0VReg_44,
	       ctrlComm_plnsh0VReg_43,
	       ctrlComm_plnsh0VReg_42,
	       ctrlComm_plnsh0VReg_41,
	       ctrlComm_plnsh0VReg_40,
	       ctrlComm_plnsh0VReg_39,
	       ctrlComm_plnsh0VReg_38,
	       ctrlComm_plnsh0VReg_37,
	       ctrlComm_plnsh0VReg_36,
	       ctrlComm_plnsh0VReg_35,
	       ctrlComm_plnsh0VReg_34,
	       ctrlComm_plnsh0VReg_33,
	       ctrlComm_plnsh0VReg_32,
	       ctrlComm_plnsh0VReg_31,
	       ctrlComm_plnsh0VReg_30,
	       ctrlComm_plnsh0VReg_29,
	       ctrlComm_plnsh0VReg_28,
	       ctrlComm_plnsh0VReg_27,
	       ctrlComm_plnsh0VReg_26,
	       ctrlComm_plnsh0VReg_25,
	       ctrlComm_plnsh0VReg_24,
	       ctrlComm_plnsh0VReg_23,
	       ctrlComm_plnsh0VReg_22,
	       ctrlComm_plnsh0VReg_21,
	       ctrlComm_plnsh0VReg_20,
	       ctrlComm_plnsh0VReg_19,
	       ctrlComm_plnsh0VReg_18,
	       ctrlComm_plnsh0VReg_17,
	       ctrlComm_plnsh0VReg_16,
	       ctrlComm_plnsh0VReg_15,
	       ctrlComm_plnsh0VReg_14,
	       ctrlComm_plnsh0VReg_13,
	       ctrlComm_plnsh0VReg_12,
	       ctrlComm_plnsh0VReg_11,
	       ctrlComm_plnsh0VReg_10,
	       ctrlComm_plnsh0VReg_9,
	       ctrlComm_plnsh0VReg_8,
	       ctrlComm_plnsh0VReg_7,
	       ctrlComm_plnsh0VReg_6,
	       ctrlComm_plnsh0VReg_5,
	       ctrlComm_plnsh0VReg_4,
	       ctrlComm_plnsh0VReg_3,
	       ctrlComm_plnsh0VReg_2,
	       ctrlComm_plnsh0VReg_1,
	       ctrlComm_plnsh0VReg_0,
	       ctrlComm_plnsh1VReg_99,
	       ctrlComm_plnsh1VReg_98,
	       ctrlComm_plnsh1VReg_97,
	       ctrlComm_plnsh1VReg_96,
	       ctrlComm_plnsh1VReg_95,
	       ctrlComm_plnsh1VReg_94,
	       ctrlComm_plnsh1VReg_93,
	       ctrlComm_plnsh1VReg_92,
	       ctrlComm_plnsh1VReg_91,
	       ctrlComm_plnsh1VReg_90,
	       ctrlComm_plnsh1VReg_89,
	       ctrlComm_plnsh1VReg_88,
	       ctrlComm_plnsh1VReg_87,
	       ctrlComm_plnsh1VReg_86,
	       ctrlComm_plnsh1VReg_85,
	       ctrlComm_plnsh1VReg_84,
	       ctrlComm_plnsh1VReg_83,
	       ctrlComm_plnsh1VReg_82,
	       ctrlComm_plnsh1VReg_81,
	       ctrlComm_plnsh1VReg_80,
	       ctrlComm_plnsh1VReg_79,
	       ctrlComm_plnsh1VReg_78,
	       ctrlComm_plnsh1VReg_77,
	       ctrlComm_plnsh1VReg_76,
	       ctrlComm_plnsh1VReg_75,
	       ctrlComm_plnsh1VReg_74,
	       ctrlComm_plnsh1VReg_73,
	       ctrlComm_plnsh1VReg_72,
	       ctrlComm_plnsh1VReg_71,
	       ctrlComm_plnsh1VReg_70,
	       ctrlComm_plnsh1VReg_69,
	       ctrlComm_plnsh1VReg_68,
	       ctrlComm_plnsh1VReg_67,
	       ctrlComm_plnsh1VReg_66,
	       ctrlComm_plnsh1VReg_65,
	       ctrlComm_plnsh1VReg_64,
	       ctrlComm_plnsh1VReg_63,
	       ctrlComm_plnsh1VReg_62,
	       ctrlComm_plnsh1VReg_61,
	       ctrlComm_plnsh1VReg_60,
	       ctrlComm_plnsh1VReg_59,
	       ctrlComm_plnsh1VReg_58,
	       ctrlComm_plnsh1VReg_57,
	       ctrlComm_plnsh1VReg_56,
	       ctrlComm_plnsh1VReg_55,
	       ctrlComm_plnsh1VReg_54,
	       ctrlComm_plnsh1VReg_53,
	       ctrlComm_plnsh1VReg_52,
	       ctrlComm_plnsh1VReg_51,
	       ctrlComm_plnsh1VReg_50,
	       ctrlComm_plnsh1VReg_49,
	       ctrlComm_plnsh1VReg_48,
	       ctrlComm_plnsh1VReg_47,
	       ctrlComm_plnsh1VReg_46,
	       ctrlComm_plnsh1VReg_45,
	       ctrlComm_plnsh1VReg_44,
	       ctrlComm_plnsh1VReg_43,
	       ctrlComm_plnsh1VReg_42,
	       ctrlComm_plnsh1VReg_41,
	       ctrlComm_plnsh1VReg_40,
	       ctrlComm_plnsh1VReg_39,
	       ctrlComm_plnsh1VReg_38,
	       ctrlComm_plnsh1VReg_37,
	       ctrlComm_plnsh1VReg_36,
	       ctrlComm_plnsh1VReg_35,
	       ctrlComm_plnsh1VReg_34,
	       ctrlComm_plnsh1VReg_33,
	       ctrlComm_plnsh1VReg_32,
	       ctrlComm_plnsh1VReg_31,
	       ctrlComm_plnsh1VReg_30,
	       ctrlComm_plnsh1VReg_29,
	       ctrlComm_plnsh1VReg_28,
	       ctrlComm_plnsh1VReg_27,
	       ctrlComm_plnsh1VReg_26,
	       ctrlComm_plnsh1VReg_25,
	       ctrlComm_plnsh1VReg_24,
	       ctrlComm_plnsh1VReg_23,
	       ctrlComm_plnsh1VReg_22,
	       ctrlComm_plnsh1VReg_21,
	       ctrlComm_plnsh1VReg_20,
	       ctrlComm_plnsh1VReg_19,
	       ctrlComm_plnsh1VReg_18,
	       ctrlComm_plnsh1VReg_17,
	       ctrlComm_plnsh1VReg_16,
	       ctrlComm_plnsh1VReg_15,
	       ctrlComm_plnsh1VReg_14,
	       ctrlComm_plnsh1VReg_13,
	       ctrlComm_plnsh1VReg_12,
	       ctrlComm_plnsh1VReg_11,
	       ctrlComm_plnsh1VReg_10,
	       ctrlComm_plnsh1VReg_9,
	       ctrlComm_plnsh1VReg_8,
	       ctrlComm_plnsh1VReg_7,
	       ctrlComm_plnsh1VReg_6,
	       ctrlComm_plnsh1VReg_5,
	       ctrlComm_plnsh1VReg_4,
	       ctrlComm_plnsh1VReg_3,
	       ctrlComm_plnsh1VReg_2,
	       ctrlComm_plnsh1VReg_1,
	       ctrlComm_plnsh1VReg_0 } ;
  assign dut$r = ctrlComm_rdiSwitch ? randManage_bram$DO : 2'd0 ;
  assign dut$rst = !MUX_dut$putEn_1__SEL_1 ;
  assign dut$din_vld = WILL_FIRE_RL_ctrlComm_encStateTrans1 ;
  assign dut$rst_vld =
	     ctrlComm_encState == 2'd3 ||
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 ||
	     ctrlComm_encState == 2'd1 ;
  assign dut$r_vld = WILL_FIRE_RL_ctrlComm_encStateTrans1 ;

  // submodule randManage_bram
  assign randManage_bram$ADDR = randManage_addr ;
  assign randManage_bram$DI =
	     MUX_randManage_addr$write_1__SEL_4 ? 2'd0 : randManage_rdi_0 ;
  assign randManage_bram$WE = !MUX_randManage_addr$write_1__SEL_4 ;
  assign randManage_bram$EN =
	     WILL_FIRE_RL_ctrlComm_encStateTrans1 && ctrlComm_rdiSwitch ||
	     WILL_FIRE_RL_randManage_stateRandGen ;

  // remaining internal signals
  assign NOT_c2mCDCProc_enLvlReg3_218_EQ_c2mCDCProc_enL_ETC___d1220 =
	     c2mCDCProc_enLvlReg3 != c2mCDCProc_enLvlReg2 ;
  assign NOT_m2cCDCProc_doneLvlReg3_223_EQ_m2cCDCProc_d_ETC___d1225 =
	     m2cCDCProc_doneLvlReg3 != m2cCDCProc_doneLvlReg2 ;
  assign randManage_addr_8_ULT_23___d648 = randManage_addr < 16'd23 ;
  assign t1__h65621 = x__h65838 ^ randManage_prng_triviumCore_regB[77:76] ;
  assign t2__h65618 =
	     randManage_prng_triviumCore_regB[68:67] ^
	     randManage_prng_triviumCore_regB[83:82] ;
  assign t2__h65622 = x__h66007 ^ randManage_prng_triviumCore_regC[86:85] ;
  assign t3__h65619 =
	     randManage_prng_triviumCore_regC[65:64] ^
	     randManage_prng_triviumCore_regC[110:109] ;
  assign t3__h65623 = x__h65669 ^ randManage_prng_triviumCore_regA[68:67] ;
  assign x__h56248 =
	     { ctrlComm_seedVReg_9,
	       ctrlComm_seedVReg_8,
	       ctrlComm_seedVReg_7,
	       ctrlComm_seedVReg_6,
	       ctrlComm_seedVReg_5 } ;
  assign x__h57713 =
	     { ctrlComm_seedVReg_4,
	       ctrlComm_seedVReg_3,
	       ctrlComm_seedVReg_2,
	       ctrlComm_seedVReg_1,
	       ctrlComm_seedVReg_0 } ;
  assign x__h65669 = t3__h65619 ^ y__h65671 ;
  assign x__h65838 = x__h66147 ^ y__h65840 ;
  assign x__h66007 = t2__h65618 ^ y__h66009 ;
  assign x__h66146 = x__h66147 ^ t2__h65618 ;
  assign x__h66147 =
	     randManage_prng_triviumCore_regA[65:64] ^
	     randManage_prng_triviumCore_regA[92:91] ;
  assign y__h65671 =
	     randManage_prng_triviumCore_regC[109:108] &
	     randManage_prng_triviumCore_regC[108:107] ;
  assign y__h65840 =
	     randManage_prng_triviumCore_regA[91:90] &
	     randManage_prng_triviumCore_regA[90:89] ;
  assign y__h66009 =
	     randManage_prng_triviumCore_regB[82:81] &
	     randManage_prng_triviumCore_regB[81:80] ;
  always@(ctrlComm_addr or
	  ctrlComm_cphsh0VReg_0 or
	  ctrlComm_cphsh0VReg_1 or
	  ctrlComm_cphsh0VReg_2 or
	  ctrlComm_cphsh0VReg_3 or
	  ctrlComm_cphsh0VReg_4 or
	  ctrlComm_cphsh0VReg_5 or
	  ctrlComm_cphsh0VReg_6 or
	  ctrlComm_cphsh0VReg_7 or
	  ctrlComm_cphsh0VReg_8 or
	  ctrlComm_cphsh0VReg_9 or
	  ctrlComm_cphsh0VReg_10 or
	  ctrlComm_cphsh0VReg_11 or
	  ctrlComm_cphsh0VReg_12 or
	  ctrlComm_cphsh0VReg_13 or
	  ctrlComm_cphsh0VReg_14 or
	  ctrlComm_cphsh0VReg_15 or
	  ctrlComm_cphsh0VReg_16 or
	  ctrlComm_cphsh0VReg_17 or
	  ctrlComm_cphsh0VReg_18 or
	  ctrlComm_cphsh0VReg_19 or
	  ctrlComm_cphsh0VReg_20 or
	  ctrlComm_cphsh0VReg_21 or
	  ctrlComm_cphsh0VReg_22 or
	  ctrlComm_cphsh0VReg_23 or
	  ctrlComm_cphsh0VReg_24 or
	  ctrlComm_cphsh0VReg_25 or
	  ctrlComm_cphsh0VReg_26 or
	  ctrlComm_cphsh0VReg_27 or
	  ctrlComm_cphsh0VReg_28 or
	  ctrlComm_cphsh0VReg_29 or
	  ctrlComm_cphsh0VReg_30 or
	  ctrlComm_cphsh0VReg_31 or
	  ctrlComm_cphsh0VReg_32 or
	  ctrlComm_cphsh0VReg_33 or
	  ctrlComm_cphsh0VReg_34 or
	  ctrlComm_cphsh0VReg_35 or
	  ctrlComm_cphsh0VReg_36 or
	  ctrlComm_cphsh0VReg_37 or
	  ctrlComm_cphsh0VReg_38 or
	  ctrlComm_cphsh0VReg_39 or
	  ctrlComm_cphsh0VReg_40 or
	  ctrlComm_cphsh0VReg_41 or
	  ctrlComm_cphsh0VReg_42 or
	  ctrlComm_cphsh0VReg_43 or
	  ctrlComm_cphsh0VReg_44 or
	  ctrlComm_cphsh0VReg_45 or
	  ctrlComm_cphsh0VReg_46 or
	  ctrlComm_cphsh0VReg_47 or
	  ctrlComm_cphsh0VReg_48 or
	  ctrlComm_cphsh0VReg_49 or
	  ctrlComm_cphsh0VReg_50 or
	  ctrlComm_cphsh0VReg_51 or
	  ctrlComm_cphsh0VReg_52 or
	  ctrlComm_cphsh0VReg_53 or
	  ctrlComm_cphsh0VReg_54 or
	  ctrlComm_cphsh0VReg_55 or
	  ctrlComm_cphsh0VReg_56 or
	  ctrlComm_cphsh0VReg_57 or
	  ctrlComm_cphsh0VReg_58 or
	  ctrlComm_cphsh0VReg_59 or
	  ctrlComm_cphsh0VReg_60 or
	  ctrlComm_cphsh0VReg_61 or
	  ctrlComm_cphsh0VReg_62 or
	  ctrlComm_cphsh0VReg_63 or
	  ctrlComm_cphsh0VReg_64 or
	  ctrlComm_cphsh0VReg_65 or
	  ctrlComm_cphsh0VReg_66 or
	  ctrlComm_cphsh0VReg_67 or
	  ctrlComm_cphsh0VReg_68 or
	  ctrlComm_cphsh0VReg_69 or
	  ctrlComm_cphsh0VReg_70 or
	  ctrlComm_cphsh0VReg_71 or
	  ctrlComm_cphsh0VReg_72 or
	  ctrlComm_cphsh0VReg_73 or
	  ctrlComm_cphsh0VReg_74 or
	  ctrlComm_cphsh0VReg_75 or
	  ctrlComm_cphsh0VReg_76 or
	  ctrlComm_cphsh0VReg_77 or
	  ctrlComm_cphsh0VReg_78 or
	  ctrlComm_cphsh0VReg_79 or
	  ctrlComm_cphsh0VReg_80 or
	  ctrlComm_cphsh0VReg_81 or
	  ctrlComm_cphsh0VReg_82 or
	  ctrlComm_cphsh0VReg_83 or
	  ctrlComm_cphsh0VReg_84 or
	  ctrlComm_cphsh0VReg_85 or
	  ctrlComm_cphsh0VReg_86 or
	  ctrlComm_cphsh0VReg_87 or
	  ctrlComm_cphsh0VReg_88 or
	  ctrlComm_cphsh0VReg_89 or
	  ctrlComm_cphsh0VReg_90 or
	  ctrlComm_cphsh0VReg_91 or
	  ctrlComm_cphsh0VReg_92 or
	  ctrlComm_cphsh0VReg_93 or
	  ctrlComm_cphsh0VReg_94 or
	  ctrlComm_cphsh0VReg_95 or
	  ctrlComm_cphsh0VReg_96 or
	  ctrlComm_cphsh0VReg_97 or
	  ctrlComm_cphsh0VReg_98 or ctrlComm_cphsh0VReg_99)
  begin
    case (ctrlComm_addr[6:0])
      7'd0: m2cMsg__h59160 = ctrlComm_cphsh0VReg_0;
      7'd1: m2cMsg__h59160 = ctrlComm_cphsh0VReg_1;
      7'd2: m2cMsg__h59160 = ctrlComm_cphsh0VReg_2;
      7'd3: m2cMsg__h59160 = ctrlComm_cphsh0VReg_3;
      7'd4: m2cMsg__h59160 = ctrlComm_cphsh0VReg_4;
      7'd5: m2cMsg__h59160 = ctrlComm_cphsh0VReg_5;
      7'd6: m2cMsg__h59160 = ctrlComm_cphsh0VReg_6;
      7'd7: m2cMsg__h59160 = ctrlComm_cphsh0VReg_7;
      7'd8: m2cMsg__h59160 = ctrlComm_cphsh0VReg_8;
      7'd9: m2cMsg__h59160 = ctrlComm_cphsh0VReg_9;
      7'd10: m2cMsg__h59160 = ctrlComm_cphsh0VReg_10;
      7'd11: m2cMsg__h59160 = ctrlComm_cphsh0VReg_11;
      7'd12: m2cMsg__h59160 = ctrlComm_cphsh0VReg_12;
      7'd13: m2cMsg__h59160 = ctrlComm_cphsh0VReg_13;
      7'd14: m2cMsg__h59160 = ctrlComm_cphsh0VReg_14;
      7'd15: m2cMsg__h59160 = ctrlComm_cphsh0VReg_15;
      7'd16: m2cMsg__h59160 = ctrlComm_cphsh0VReg_16;
      7'd17: m2cMsg__h59160 = ctrlComm_cphsh0VReg_17;
      7'd18: m2cMsg__h59160 = ctrlComm_cphsh0VReg_18;
      7'd19: m2cMsg__h59160 = ctrlComm_cphsh0VReg_19;
      7'd20: m2cMsg__h59160 = ctrlComm_cphsh0VReg_20;
      7'd21: m2cMsg__h59160 = ctrlComm_cphsh0VReg_21;
      7'd22: m2cMsg__h59160 = ctrlComm_cphsh0VReg_22;
      7'd23: m2cMsg__h59160 = ctrlComm_cphsh0VReg_23;
      7'd24: m2cMsg__h59160 = ctrlComm_cphsh0VReg_24;
      7'd25: m2cMsg__h59160 = ctrlComm_cphsh0VReg_25;
      7'd26: m2cMsg__h59160 = ctrlComm_cphsh0VReg_26;
      7'd27: m2cMsg__h59160 = ctrlComm_cphsh0VReg_27;
      7'd28: m2cMsg__h59160 = ctrlComm_cphsh0VReg_28;
      7'd29: m2cMsg__h59160 = ctrlComm_cphsh0VReg_29;
      7'd30: m2cMsg__h59160 = ctrlComm_cphsh0VReg_30;
      7'd31: m2cMsg__h59160 = ctrlComm_cphsh0VReg_31;
      7'd32: m2cMsg__h59160 = ctrlComm_cphsh0VReg_32;
      7'd33: m2cMsg__h59160 = ctrlComm_cphsh0VReg_33;
      7'd34: m2cMsg__h59160 = ctrlComm_cphsh0VReg_34;
      7'd35: m2cMsg__h59160 = ctrlComm_cphsh0VReg_35;
      7'd36: m2cMsg__h59160 = ctrlComm_cphsh0VReg_36;
      7'd37: m2cMsg__h59160 = ctrlComm_cphsh0VReg_37;
      7'd38: m2cMsg__h59160 = ctrlComm_cphsh0VReg_38;
      7'd39: m2cMsg__h59160 = ctrlComm_cphsh0VReg_39;
      7'd40: m2cMsg__h59160 = ctrlComm_cphsh0VReg_40;
      7'd41: m2cMsg__h59160 = ctrlComm_cphsh0VReg_41;
      7'd42: m2cMsg__h59160 = ctrlComm_cphsh0VReg_42;
      7'd43: m2cMsg__h59160 = ctrlComm_cphsh0VReg_43;
      7'd44: m2cMsg__h59160 = ctrlComm_cphsh0VReg_44;
      7'd45: m2cMsg__h59160 = ctrlComm_cphsh0VReg_45;
      7'd46: m2cMsg__h59160 = ctrlComm_cphsh0VReg_46;
      7'd47: m2cMsg__h59160 = ctrlComm_cphsh0VReg_47;
      7'd48: m2cMsg__h59160 = ctrlComm_cphsh0VReg_48;
      7'd49: m2cMsg__h59160 = ctrlComm_cphsh0VReg_49;
      7'd50: m2cMsg__h59160 = ctrlComm_cphsh0VReg_50;
      7'd51: m2cMsg__h59160 = ctrlComm_cphsh0VReg_51;
      7'd52: m2cMsg__h59160 = ctrlComm_cphsh0VReg_52;
      7'd53: m2cMsg__h59160 = ctrlComm_cphsh0VReg_53;
      7'd54: m2cMsg__h59160 = ctrlComm_cphsh0VReg_54;
      7'd55: m2cMsg__h59160 = ctrlComm_cphsh0VReg_55;
      7'd56: m2cMsg__h59160 = ctrlComm_cphsh0VReg_56;
      7'd57: m2cMsg__h59160 = ctrlComm_cphsh0VReg_57;
      7'd58: m2cMsg__h59160 = ctrlComm_cphsh0VReg_58;
      7'd59: m2cMsg__h59160 = ctrlComm_cphsh0VReg_59;
      7'd60: m2cMsg__h59160 = ctrlComm_cphsh0VReg_60;
      7'd61: m2cMsg__h59160 = ctrlComm_cphsh0VReg_61;
      7'd62: m2cMsg__h59160 = ctrlComm_cphsh0VReg_62;
      7'd63: m2cMsg__h59160 = ctrlComm_cphsh0VReg_63;
      7'd64: m2cMsg__h59160 = ctrlComm_cphsh0VReg_64;
      7'd65: m2cMsg__h59160 = ctrlComm_cphsh0VReg_65;
      7'd66: m2cMsg__h59160 = ctrlComm_cphsh0VReg_66;
      7'd67: m2cMsg__h59160 = ctrlComm_cphsh0VReg_67;
      7'd68: m2cMsg__h59160 = ctrlComm_cphsh0VReg_68;
      7'd69: m2cMsg__h59160 = ctrlComm_cphsh0VReg_69;
      7'd70: m2cMsg__h59160 = ctrlComm_cphsh0VReg_70;
      7'd71: m2cMsg__h59160 = ctrlComm_cphsh0VReg_71;
      7'd72: m2cMsg__h59160 = ctrlComm_cphsh0VReg_72;
      7'd73: m2cMsg__h59160 = ctrlComm_cphsh0VReg_73;
      7'd74: m2cMsg__h59160 = ctrlComm_cphsh0VReg_74;
      7'd75: m2cMsg__h59160 = ctrlComm_cphsh0VReg_75;
      7'd76: m2cMsg__h59160 = ctrlComm_cphsh0VReg_76;
      7'd77: m2cMsg__h59160 = ctrlComm_cphsh0VReg_77;
      7'd78: m2cMsg__h59160 = ctrlComm_cphsh0VReg_78;
      7'd79: m2cMsg__h59160 = ctrlComm_cphsh0VReg_79;
      7'd80: m2cMsg__h59160 = ctrlComm_cphsh0VReg_80;
      7'd81: m2cMsg__h59160 = ctrlComm_cphsh0VReg_81;
      7'd82: m2cMsg__h59160 = ctrlComm_cphsh0VReg_82;
      7'd83: m2cMsg__h59160 = ctrlComm_cphsh0VReg_83;
      7'd84: m2cMsg__h59160 = ctrlComm_cphsh0VReg_84;
      7'd85: m2cMsg__h59160 = ctrlComm_cphsh0VReg_85;
      7'd86: m2cMsg__h59160 = ctrlComm_cphsh0VReg_86;
      7'd87: m2cMsg__h59160 = ctrlComm_cphsh0VReg_87;
      7'd88: m2cMsg__h59160 = ctrlComm_cphsh0VReg_88;
      7'd89: m2cMsg__h59160 = ctrlComm_cphsh0VReg_89;
      7'd90: m2cMsg__h59160 = ctrlComm_cphsh0VReg_90;
      7'd91: m2cMsg__h59160 = ctrlComm_cphsh0VReg_91;
      7'd92: m2cMsg__h59160 = ctrlComm_cphsh0VReg_92;
      7'd93: m2cMsg__h59160 = ctrlComm_cphsh0VReg_93;
      7'd94: m2cMsg__h59160 = ctrlComm_cphsh0VReg_94;
      7'd95: m2cMsg__h59160 = ctrlComm_cphsh0VReg_95;
      7'd96: m2cMsg__h59160 = ctrlComm_cphsh0VReg_96;
      7'd97: m2cMsg__h59160 = ctrlComm_cphsh0VReg_97;
      7'd98: m2cMsg__h59160 = ctrlComm_cphsh0VReg_98;
      7'd99: m2cMsg__h59160 = ctrlComm_cphsh0VReg_99;
      default: m2cMsg__h59160 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(ctrlComm_addr or
	  ctrlComm_cphsh1VReg_0 or
	  ctrlComm_cphsh1VReg_1 or
	  ctrlComm_cphsh1VReg_2 or
	  ctrlComm_cphsh1VReg_3 or
	  ctrlComm_cphsh1VReg_4 or
	  ctrlComm_cphsh1VReg_5 or
	  ctrlComm_cphsh1VReg_6 or
	  ctrlComm_cphsh1VReg_7 or
	  ctrlComm_cphsh1VReg_8 or
	  ctrlComm_cphsh1VReg_9 or
	  ctrlComm_cphsh1VReg_10 or
	  ctrlComm_cphsh1VReg_11 or
	  ctrlComm_cphsh1VReg_12 or
	  ctrlComm_cphsh1VReg_13 or
	  ctrlComm_cphsh1VReg_14 or
	  ctrlComm_cphsh1VReg_15 or
	  ctrlComm_cphsh1VReg_16 or
	  ctrlComm_cphsh1VReg_17 or
	  ctrlComm_cphsh1VReg_18 or
	  ctrlComm_cphsh1VReg_19 or
	  ctrlComm_cphsh1VReg_20 or
	  ctrlComm_cphsh1VReg_21 or
	  ctrlComm_cphsh1VReg_22 or
	  ctrlComm_cphsh1VReg_23 or
	  ctrlComm_cphsh1VReg_24 or
	  ctrlComm_cphsh1VReg_25 or
	  ctrlComm_cphsh1VReg_26 or
	  ctrlComm_cphsh1VReg_27 or
	  ctrlComm_cphsh1VReg_28 or
	  ctrlComm_cphsh1VReg_29 or
	  ctrlComm_cphsh1VReg_30 or
	  ctrlComm_cphsh1VReg_31 or
	  ctrlComm_cphsh1VReg_32 or
	  ctrlComm_cphsh1VReg_33 or
	  ctrlComm_cphsh1VReg_34 or
	  ctrlComm_cphsh1VReg_35 or
	  ctrlComm_cphsh1VReg_36 or
	  ctrlComm_cphsh1VReg_37 or
	  ctrlComm_cphsh1VReg_38 or
	  ctrlComm_cphsh1VReg_39 or
	  ctrlComm_cphsh1VReg_40 or
	  ctrlComm_cphsh1VReg_41 or
	  ctrlComm_cphsh1VReg_42 or
	  ctrlComm_cphsh1VReg_43 or
	  ctrlComm_cphsh1VReg_44 or
	  ctrlComm_cphsh1VReg_45 or
	  ctrlComm_cphsh1VReg_46 or
	  ctrlComm_cphsh1VReg_47 or
	  ctrlComm_cphsh1VReg_48 or
	  ctrlComm_cphsh1VReg_49 or
	  ctrlComm_cphsh1VReg_50 or
	  ctrlComm_cphsh1VReg_51 or
	  ctrlComm_cphsh1VReg_52 or
	  ctrlComm_cphsh1VReg_53 or
	  ctrlComm_cphsh1VReg_54 or
	  ctrlComm_cphsh1VReg_55 or
	  ctrlComm_cphsh1VReg_56 or
	  ctrlComm_cphsh1VReg_57 or
	  ctrlComm_cphsh1VReg_58 or
	  ctrlComm_cphsh1VReg_59 or
	  ctrlComm_cphsh1VReg_60 or
	  ctrlComm_cphsh1VReg_61 or
	  ctrlComm_cphsh1VReg_62 or
	  ctrlComm_cphsh1VReg_63 or
	  ctrlComm_cphsh1VReg_64 or
	  ctrlComm_cphsh1VReg_65 or
	  ctrlComm_cphsh1VReg_66 or
	  ctrlComm_cphsh1VReg_67 or
	  ctrlComm_cphsh1VReg_68 or
	  ctrlComm_cphsh1VReg_69 or
	  ctrlComm_cphsh1VReg_70 or
	  ctrlComm_cphsh1VReg_71 or
	  ctrlComm_cphsh1VReg_72 or
	  ctrlComm_cphsh1VReg_73 or
	  ctrlComm_cphsh1VReg_74 or
	  ctrlComm_cphsh1VReg_75 or
	  ctrlComm_cphsh1VReg_76 or
	  ctrlComm_cphsh1VReg_77 or
	  ctrlComm_cphsh1VReg_78 or
	  ctrlComm_cphsh1VReg_79 or
	  ctrlComm_cphsh1VReg_80 or
	  ctrlComm_cphsh1VReg_81 or
	  ctrlComm_cphsh1VReg_82 or
	  ctrlComm_cphsh1VReg_83 or
	  ctrlComm_cphsh1VReg_84 or
	  ctrlComm_cphsh1VReg_85 or
	  ctrlComm_cphsh1VReg_86 or
	  ctrlComm_cphsh1VReg_87 or
	  ctrlComm_cphsh1VReg_88 or
	  ctrlComm_cphsh1VReg_89 or
	  ctrlComm_cphsh1VReg_90 or
	  ctrlComm_cphsh1VReg_91 or
	  ctrlComm_cphsh1VReg_92 or
	  ctrlComm_cphsh1VReg_93 or
	  ctrlComm_cphsh1VReg_94 or
	  ctrlComm_cphsh1VReg_95 or
	  ctrlComm_cphsh1VReg_96 or
	  ctrlComm_cphsh1VReg_97 or
	  ctrlComm_cphsh1VReg_98 or ctrlComm_cphsh1VReg_99)
  begin
    case (ctrlComm_addr[6:0])
      7'd0: m2cMsg__h59170 = ctrlComm_cphsh1VReg_0;
      7'd1: m2cMsg__h59170 = ctrlComm_cphsh1VReg_1;
      7'd2: m2cMsg__h59170 = ctrlComm_cphsh1VReg_2;
      7'd3: m2cMsg__h59170 = ctrlComm_cphsh1VReg_3;
      7'd4: m2cMsg__h59170 = ctrlComm_cphsh1VReg_4;
      7'd5: m2cMsg__h59170 = ctrlComm_cphsh1VReg_5;
      7'd6: m2cMsg__h59170 = ctrlComm_cphsh1VReg_6;
      7'd7: m2cMsg__h59170 = ctrlComm_cphsh1VReg_7;
      7'd8: m2cMsg__h59170 = ctrlComm_cphsh1VReg_8;
      7'd9: m2cMsg__h59170 = ctrlComm_cphsh1VReg_9;
      7'd10: m2cMsg__h59170 = ctrlComm_cphsh1VReg_10;
      7'd11: m2cMsg__h59170 = ctrlComm_cphsh1VReg_11;
      7'd12: m2cMsg__h59170 = ctrlComm_cphsh1VReg_12;
      7'd13: m2cMsg__h59170 = ctrlComm_cphsh1VReg_13;
      7'd14: m2cMsg__h59170 = ctrlComm_cphsh1VReg_14;
      7'd15: m2cMsg__h59170 = ctrlComm_cphsh1VReg_15;
      7'd16: m2cMsg__h59170 = ctrlComm_cphsh1VReg_16;
      7'd17: m2cMsg__h59170 = ctrlComm_cphsh1VReg_17;
      7'd18: m2cMsg__h59170 = ctrlComm_cphsh1VReg_18;
      7'd19: m2cMsg__h59170 = ctrlComm_cphsh1VReg_19;
      7'd20: m2cMsg__h59170 = ctrlComm_cphsh1VReg_20;
      7'd21: m2cMsg__h59170 = ctrlComm_cphsh1VReg_21;
      7'd22: m2cMsg__h59170 = ctrlComm_cphsh1VReg_22;
      7'd23: m2cMsg__h59170 = ctrlComm_cphsh1VReg_23;
      7'd24: m2cMsg__h59170 = ctrlComm_cphsh1VReg_24;
      7'd25: m2cMsg__h59170 = ctrlComm_cphsh1VReg_25;
      7'd26: m2cMsg__h59170 = ctrlComm_cphsh1VReg_26;
      7'd27: m2cMsg__h59170 = ctrlComm_cphsh1VReg_27;
      7'd28: m2cMsg__h59170 = ctrlComm_cphsh1VReg_28;
      7'd29: m2cMsg__h59170 = ctrlComm_cphsh1VReg_29;
      7'd30: m2cMsg__h59170 = ctrlComm_cphsh1VReg_30;
      7'd31: m2cMsg__h59170 = ctrlComm_cphsh1VReg_31;
      7'd32: m2cMsg__h59170 = ctrlComm_cphsh1VReg_32;
      7'd33: m2cMsg__h59170 = ctrlComm_cphsh1VReg_33;
      7'd34: m2cMsg__h59170 = ctrlComm_cphsh1VReg_34;
      7'd35: m2cMsg__h59170 = ctrlComm_cphsh1VReg_35;
      7'd36: m2cMsg__h59170 = ctrlComm_cphsh1VReg_36;
      7'd37: m2cMsg__h59170 = ctrlComm_cphsh1VReg_37;
      7'd38: m2cMsg__h59170 = ctrlComm_cphsh1VReg_38;
      7'd39: m2cMsg__h59170 = ctrlComm_cphsh1VReg_39;
      7'd40: m2cMsg__h59170 = ctrlComm_cphsh1VReg_40;
      7'd41: m2cMsg__h59170 = ctrlComm_cphsh1VReg_41;
      7'd42: m2cMsg__h59170 = ctrlComm_cphsh1VReg_42;
      7'd43: m2cMsg__h59170 = ctrlComm_cphsh1VReg_43;
      7'd44: m2cMsg__h59170 = ctrlComm_cphsh1VReg_44;
      7'd45: m2cMsg__h59170 = ctrlComm_cphsh1VReg_45;
      7'd46: m2cMsg__h59170 = ctrlComm_cphsh1VReg_46;
      7'd47: m2cMsg__h59170 = ctrlComm_cphsh1VReg_47;
      7'd48: m2cMsg__h59170 = ctrlComm_cphsh1VReg_48;
      7'd49: m2cMsg__h59170 = ctrlComm_cphsh1VReg_49;
      7'd50: m2cMsg__h59170 = ctrlComm_cphsh1VReg_50;
      7'd51: m2cMsg__h59170 = ctrlComm_cphsh1VReg_51;
      7'd52: m2cMsg__h59170 = ctrlComm_cphsh1VReg_52;
      7'd53: m2cMsg__h59170 = ctrlComm_cphsh1VReg_53;
      7'd54: m2cMsg__h59170 = ctrlComm_cphsh1VReg_54;
      7'd55: m2cMsg__h59170 = ctrlComm_cphsh1VReg_55;
      7'd56: m2cMsg__h59170 = ctrlComm_cphsh1VReg_56;
      7'd57: m2cMsg__h59170 = ctrlComm_cphsh1VReg_57;
      7'd58: m2cMsg__h59170 = ctrlComm_cphsh1VReg_58;
      7'd59: m2cMsg__h59170 = ctrlComm_cphsh1VReg_59;
      7'd60: m2cMsg__h59170 = ctrlComm_cphsh1VReg_60;
      7'd61: m2cMsg__h59170 = ctrlComm_cphsh1VReg_61;
      7'd62: m2cMsg__h59170 = ctrlComm_cphsh1VReg_62;
      7'd63: m2cMsg__h59170 = ctrlComm_cphsh1VReg_63;
      7'd64: m2cMsg__h59170 = ctrlComm_cphsh1VReg_64;
      7'd65: m2cMsg__h59170 = ctrlComm_cphsh1VReg_65;
      7'd66: m2cMsg__h59170 = ctrlComm_cphsh1VReg_66;
      7'd67: m2cMsg__h59170 = ctrlComm_cphsh1VReg_67;
      7'd68: m2cMsg__h59170 = ctrlComm_cphsh1VReg_68;
      7'd69: m2cMsg__h59170 = ctrlComm_cphsh1VReg_69;
      7'd70: m2cMsg__h59170 = ctrlComm_cphsh1VReg_70;
      7'd71: m2cMsg__h59170 = ctrlComm_cphsh1VReg_71;
      7'd72: m2cMsg__h59170 = ctrlComm_cphsh1VReg_72;
      7'd73: m2cMsg__h59170 = ctrlComm_cphsh1VReg_73;
      7'd74: m2cMsg__h59170 = ctrlComm_cphsh1VReg_74;
      7'd75: m2cMsg__h59170 = ctrlComm_cphsh1VReg_75;
      7'd76: m2cMsg__h59170 = ctrlComm_cphsh1VReg_76;
      7'd77: m2cMsg__h59170 = ctrlComm_cphsh1VReg_77;
      7'd78: m2cMsg__h59170 = ctrlComm_cphsh1VReg_78;
      7'd79: m2cMsg__h59170 = ctrlComm_cphsh1VReg_79;
      7'd80: m2cMsg__h59170 = ctrlComm_cphsh1VReg_80;
      7'd81: m2cMsg__h59170 = ctrlComm_cphsh1VReg_81;
      7'd82: m2cMsg__h59170 = ctrlComm_cphsh1VReg_82;
      7'd83: m2cMsg__h59170 = ctrlComm_cphsh1VReg_83;
      7'd84: m2cMsg__h59170 = ctrlComm_cphsh1VReg_84;
      7'd85: m2cMsg__h59170 = ctrlComm_cphsh1VReg_85;
      7'd86: m2cMsg__h59170 = ctrlComm_cphsh1VReg_86;
      7'd87: m2cMsg__h59170 = ctrlComm_cphsh1VReg_87;
      7'd88: m2cMsg__h59170 = ctrlComm_cphsh1VReg_88;
      7'd89: m2cMsg__h59170 = ctrlComm_cphsh1VReg_89;
      7'd90: m2cMsg__h59170 = ctrlComm_cphsh1VReg_90;
      7'd91: m2cMsg__h59170 = ctrlComm_cphsh1VReg_91;
      7'd92: m2cMsg__h59170 = ctrlComm_cphsh1VReg_92;
      7'd93: m2cMsg__h59170 = ctrlComm_cphsh1VReg_93;
      7'd94: m2cMsg__h59170 = ctrlComm_cphsh1VReg_94;
      7'd95: m2cMsg__h59170 = ctrlComm_cphsh1VReg_95;
      7'd96: m2cMsg__h59170 = ctrlComm_cphsh1VReg_96;
      7'd97: m2cMsg__h59170 = ctrlComm_cphsh1VReg_97;
      7'd98: m2cMsg__h59170 = ctrlComm_cphsh1VReg_98;
      7'd99: m2cMsg__h59170 = ctrlComm_cphsh1VReg_99;
      default: m2cMsg__h59170 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(ctrlComm_addr or ctrlComm_m2cMsgFIFO$FULL_N)
  begin
    case (ctrlComm_addr[13:7])
      7'd32, 7'd33:
	  CASE_ctrlComm_addr_BITS_13_TO_7_32_ctrlComm_m2_ETC__q1 =
	      ctrlComm_m2cMsgFIFO$FULL_N;
      default: CASE_ctrlComm_addr_BITS_13_TO_7_32_ctrlComm_m2_ETC__q1 =
		   ctrlComm_addr[13:7] != 7'd127 ||
		   ctrlComm_m2cMsgFIFO$FULL_N;
    endcase
  end
  always@(c2mCDCProc_dataReg)
  begin
    case (c2mCDCProc_dataReg[15:14])
      2'd0: CASE_c2mCDCProc_dataReg_BITS_15_TO_14_0_1_1_2_3__q2 = 2'd1;
      2'd1: CASE_c2mCDCProc_dataReg_BITS_15_TO_14_0_1_1_2_3__q2 = 2'd2;
      default: CASE_c2mCDCProc_dataReg_BITS_15_TO_14_0_1_1_2_3__q2 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst_n == `BSV_RESET_VALUE)
      begin
        c2mCDCProc_doneLvlReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2mCDCProc_enLvlReg1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2mCDCProc_enLvlReg2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2mCDCProc_enLvlReg3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2mCDCProc_rxVld <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctrlComm_addr <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctrlComm_cphsh0VReg_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_24 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_25 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_26 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_27 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_28 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_29 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_30 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_31 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_32 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_33 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_34 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_35 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_36 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_37 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_38 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_39 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_40 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_41 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_42 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_43 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_44 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_45 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_46 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_47 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_48 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_49 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_50 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_51 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_52 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_53 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_54 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_55 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_56 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_57 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_58 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_59 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_60 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_61 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_62 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_63 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_64 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_65 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_66 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_67 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_68 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_69 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_70 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_71 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_72 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_73 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_74 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_75 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_76 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_77 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_78 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_79 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_80 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_81 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_82 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_83 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_84 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_85 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_86 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_87 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_88 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_89 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_90 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_91 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_92 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_93 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_94 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_95 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_96 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_97 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_98 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh0VReg_99 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_24 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_25 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_26 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_27 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_28 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_29 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_30 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_31 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_32 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_33 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_34 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_35 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_36 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_37 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_38 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_39 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_40 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_41 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_42 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_43 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_44 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_45 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_46 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_47 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_48 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_49 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_50 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_51 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_52 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_53 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_54 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_55 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_56 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_57 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_58 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_59 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_60 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_61 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_62 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_63 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_64 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_65 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_66 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_67 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_68 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_69 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_70 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_71 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_72 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_73 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_74 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_75 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_76 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_77 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_78 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_79 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_80 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_81 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_82 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_83 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_84 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_85 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_86 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_87 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_88 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_89 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_90 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_91 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_92 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_93 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_94 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_95 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_96 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_97 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_98 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_cphsh1VReg_99 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_encDoneProcessed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctrlComm_encState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctrlComm_plnsh0VReg_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_24 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_25 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_26 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_27 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_28 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_29 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_30 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_31 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_32 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_33 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_34 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_35 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_36 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_37 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_38 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_39 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_40 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_41 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_42 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_43 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_44 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_45 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_46 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_47 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_48 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_49 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_50 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_51 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_52 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_53 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_54 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_55 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_56 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_57 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_58 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_59 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_60 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_61 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_62 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_63 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_64 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_65 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_66 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_67 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_68 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_69 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_70 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_71 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_72 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_73 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_74 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_75 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_76 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_77 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_78 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_79 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_80 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_81 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_82 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_83 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_84 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_85 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_86 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_87 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_88 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_89 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_90 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_91 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_92 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_93 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_94 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_95 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_96 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_97 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_98 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh0VReg_99 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_24 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_25 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_26 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_27 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_28 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_29 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_30 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_31 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_32 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_33 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_34 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_35 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_36 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_37 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_38 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_39 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_40 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_41 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_42 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_43 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_44 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_45 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_46 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_47 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_48 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_49 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_50 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_51 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_52 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_53 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_54 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_55 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_56 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_57 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_58 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_59 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_60 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_61 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_62 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_63 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_64 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_65 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_66 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_67 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_68 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_69 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_70 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_71 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_72 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_73 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_74 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_75 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_76 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_77 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_78 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_79 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_80 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_81 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_82 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_83 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_84 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_85 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_86 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_87 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_88 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_89 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_90 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_91 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_92 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_93 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_94 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_95 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_96 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_97 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_98 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_plnsh1VReg_99 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_random_cnt <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ctrlComm_rdiSwitch <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctrlComm_seedVReg_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_seedVReg_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctrlComm_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	deviceRdyCnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	deviceRdyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m2cCDCProc_doneLvlReg1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m2cCDCProc_doneLvlReg2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m2cCDCProc_doneLvlReg3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m2cCDCProc_enLvlReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m2cCDCProc_txRdy <= `BSV_ASSIGNMENT_DELAY 1'd1;
	randManage_addr <= `BSV_ASSIGNMENT_DELAY 16'd0;
	randManage_prng_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	randManage_prng_warmUpCnt <= `BSV_ASSIGNMENT_DELAY 10'd0;
	randManage_rdi_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	randManage_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (c2mCDCProc_doneLvlReg$EN)
	  c2mCDCProc_doneLvlReg <= `BSV_ASSIGNMENT_DELAY
	      c2mCDCProc_doneLvlReg$D_IN;
	if (c2mCDCProc_enLvlReg1$EN)
	  c2mCDCProc_enLvlReg1 <= `BSV_ASSIGNMENT_DELAY
	      c2mCDCProc_enLvlReg1$D_IN;
	if (c2mCDCProc_enLvlReg2$EN)
	  c2mCDCProc_enLvlReg2 <= `BSV_ASSIGNMENT_DELAY
	      c2mCDCProc_enLvlReg2$D_IN;
	if (c2mCDCProc_enLvlReg3$EN)
	  c2mCDCProc_enLvlReg3 <= `BSV_ASSIGNMENT_DELAY
	      c2mCDCProc_enLvlReg3$D_IN;
	if (c2mCDCProc_rxVld$EN)
	  c2mCDCProc_rxVld <= `BSV_ASSIGNMENT_DELAY c2mCDCProc_rxVld$D_IN;
	if (ctrlComm_addr$EN)
	  ctrlComm_addr <= `BSV_ASSIGNMENT_DELAY ctrlComm_addr$D_IN;
	if (ctrlComm_cphsh0VReg_0$EN)
	  ctrlComm_cphsh0VReg_0 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_0$D_IN;
	if (ctrlComm_cphsh0VReg_1$EN)
	  ctrlComm_cphsh0VReg_1 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_1$D_IN;
	if (ctrlComm_cphsh0VReg_10$EN)
	  ctrlComm_cphsh0VReg_10 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_10$D_IN;
	if (ctrlComm_cphsh0VReg_11$EN)
	  ctrlComm_cphsh0VReg_11 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_11$D_IN;
	if (ctrlComm_cphsh0VReg_12$EN)
	  ctrlComm_cphsh0VReg_12 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_12$D_IN;
	if (ctrlComm_cphsh0VReg_13$EN)
	  ctrlComm_cphsh0VReg_13 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_13$D_IN;
	if (ctrlComm_cphsh0VReg_14$EN)
	  ctrlComm_cphsh0VReg_14 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_14$D_IN;
	if (ctrlComm_cphsh0VReg_15$EN)
	  ctrlComm_cphsh0VReg_15 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_15$D_IN;
	if (ctrlComm_cphsh0VReg_16$EN)
	  ctrlComm_cphsh0VReg_16 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_16$D_IN;
	if (ctrlComm_cphsh0VReg_17$EN)
	  ctrlComm_cphsh0VReg_17 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_17$D_IN;
	if (ctrlComm_cphsh0VReg_18$EN)
	  ctrlComm_cphsh0VReg_18 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_18$D_IN;
	if (ctrlComm_cphsh0VReg_19$EN)
	  ctrlComm_cphsh0VReg_19 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_19$D_IN;
	if (ctrlComm_cphsh0VReg_2$EN)
	  ctrlComm_cphsh0VReg_2 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_2$D_IN;
	if (ctrlComm_cphsh0VReg_20$EN)
	  ctrlComm_cphsh0VReg_20 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_20$D_IN;
	if (ctrlComm_cphsh0VReg_21$EN)
	  ctrlComm_cphsh0VReg_21 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_21$D_IN;
	if (ctrlComm_cphsh0VReg_22$EN)
	  ctrlComm_cphsh0VReg_22 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_22$D_IN;
	if (ctrlComm_cphsh0VReg_23$EN)
	  ctrlComm_cphsh0VReg_23 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_23$D_IN;
	if (ctrlComm_cphsh0VReg_24$EN)
	  ctrlComm_cphsh0VReg_24 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_24$D_IN;
	if (ctrlComm_cphsh0VReg_25$EN)
	  ctrlComm_cphsh0VReg_25 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_25$D_IN;
	if (ctrlComm_cphsh0VReg_26$EN)
	  ctrlComm_cphsh0VReg_26 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_26$D_IN;
	if (ctrlComm_cphsh0VReg_27$EN)
	  ctrlComm_cphsh0VReg_27 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_27$D_IN;
	if (ctrlComm_cphsh0VReg_28$EN)
	  ctrlComm_cphsh0VReg_28 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_28$D_IN;
	if (ctrlComm_cphsh0VReg_29$EN)
	  ctrlComm_cphsh0VReg_29 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_29$D_IN;
	if (ctrlComm_cphsh0VReg_3$EN)
	  ctrlComm_cphsh0VReg_3 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_3$D_IN;
	if (ctrlComm_cphsh0VReg_30$EN)
	  ctrlComm_cphsh0VReg_30 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_30$D_IN;
	if (ctrlComm_cphsh0VReg_31$EN)
	  ctrlComm_cphsh0VReg_31 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_31$D_IN;
	if (ctrlComm_cphsh0VReg_32$EN)
	  ctrlComm_cphsh0VReg_32 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_32$D_IN;
	if (ctrlComm_cphsh0VReg_33$EN)
	  ctrlComm_cphsh0VReg_33 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_33$D_IN;
	if (ctrlComm_cphsh0VReg_34$EN)
	  ctrlComm_cphsh0VReg_34 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_34$D_IN;
	if (ctrlComm_cphsh0VReg_35$EN)
	  ctrlComm_cphsh0VReg_35 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_35$D_IN;
	if (ctrlComm_cphsh0VReg_36$EN)
	  ctrlComm_cphsh0VReg_36 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_36$D_IN;
	if (ctrlComm_cphsh0VReg_37$EN)
	  ctrlComm_cphsh0VReg_37 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_37$D_IN;
	if (ctrlComm_cphsh0VReg_38$EN)
	  ctrlComm_cphsh0VReg_38 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_38$D_IN;
	if (ctrlComm_cphsh0VReg_39$EN)
	  ctrlComm_cphsh0VReg_39 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_39$D_IN;
	if (ctrlComm_cphsh0VReg_4$EN)
	  ctrlComm_cphsh0VReg_4 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_4$D_IN;
	if (ctrlComm_cphsh0VReg_40$EN)
	  ctrlComm_cphsh0VReg_40 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_40$D_IN;
	if (ctrlComm_cphsh0VReg_41$EN)
	  ctrlComm_cphsh0VReg_41 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_41$D_IN;
	if (ctrlComm_cphsh0VReg_42$EN)
	  ctrlComm_cphsh0VReg_42 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_42$D_IN;
	if (ctrlComm_cphsh0VReg_43$EN)
	  ctrlComm_cphsh0VReg_43 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_43$D_IN;
	if (ctrlComm_cphsh0VReg_44$EN)
	  ctrlComm_cphsh0VReg_44 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_44$D_IN;
	if (ctrlComm_cphsh0VReg_45$EN)
	  ctrlComm_cphsh0VReg_45 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_45$D_IN;
	if (ctrlComm_cphsh0VReg_46$EN)
	  ctrlComm_cphsh0VReg_46 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_46$D_IN;
	if (ctrlComm_cphsh0VReg_47$EN)
	  ctrlComm_cphsh0VReg_47 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_47$D_IN;
	if (ctrlComm_cphsh0VReg_48$EN)
	  ctrlComm_cphsh0VReg_48 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_48$D_IN;
	if (ctrlComm_cphsh0VReg_49$EN)
	  ctrlComm_cphsh0VReg_49 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_49$D_IN;
	if (ctrlComm_cphsh0VReg_5$EN)
	  ctrlComm_cphsh0VReg_5 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_5$D_IN;
	if (ctrlComm_cphsh0VReg_50$EN)
	  ctrlComm_cphsh0VReg_50 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_50$D_IN;
	if (ctrlComm_cphsh0VReg_51$EN)
	  ctrlComm_cphsh0VReg_51 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_51$D_IN;
	if (ctrlComm_cphsh0VReg_52$EN)
	  ctrlComm_cphsh0VReg_52 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_52$D_IN;
	if (ctrlComm_cphsh0VReg_53$EN)
	  ctrlComm_cphsh0VReg_53 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_53$D_IN;
	if (ctrlComm_cphsh0VReg_54$EN)
	  ctrlComm_cphsh0VReg_54 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_54$D_IN;
	if (ctrlComm_cphsh0VReg_55$EN)
	  ctrlComm_cphsh0VReg_55 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_55$D_IN;
	if (ctrlComm_cphsh0VReg_56$EN)
	  ctrlComm_cphsh0VReg_56 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_56$D_IN;
	if (ctrlComm_cphsh0VReg_57$EN)
	  ctrlComm_cphsh0VReg_57 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_57$D_IN;
	if (ctrlComm_cphsh0VReg_58$EN)
	  ctrlComm_cphsh0VReg_58 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_58$D_IN;
	if (ctrlComm_cphsh0VReg_59$EN)
	  ctrlComm_cphsh0VReg_59 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_59$D_IN;
	if (ctrlComm_cphsh0VReg_6$EN)
	  ctrlComm_cphsh0VReg_6 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_6$D_IN;
	if (ctrlComm_cphsh0VReg_60$EN)
	  ctrlComm_cphsh0VReg_60 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_60$D_IN;
	if (ctrlComm_cphsh0VReg_61$EN)
	  ctrlComm_cphsh0VReg_61 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_61$D_IN;
	if (ctrlComm_cphsh0VReg_62$EN)
	  ctrlComm_cphsh0VReg_62 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_62$D_IN;
	if (ctrlComm_cphsh0VReg_63$EN)
	  ctrlComm_cphsh0VReg_63 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_63$D_IN;
	if (ctrlComm_cphsh0VReg_64$EN)
	  ctrlComm_cphsh0VReg_64 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_64$D_IN;
	if (ctrlComm_cphsh0VReg_65$EN)
	  ctrlComm_cphsh0VReg_65 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_65$D_IN;
	if (ctrlComm_cphsh0VReg_66$EN)
	  ctrlComm_cphsh0VReg_66 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_66$D_IN;
	if (ctrlComm_cphsh0VReg_67$EN)
	  ctrlComm_cphsh0VReg_67 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_67$D_IN;
	if (ctrlComm_cphsh0VReg_68$EN)
	  ctrlComm_cphsh0VReg_68 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_68$D_IN;
	if (ctrlComm_cphsh0VReg_69$EN)
	  ctrlComm_cphsh0VReg_69 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_69$D_IN;
	if (ctrlComm_cphsh0VReg_7$EN)
	  ctrlComm_cphsh0VReg_7 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_7$D_IN;
	if (ctrlComm_cphsh0VReg_70$EN)
	  ctrlComm_cphsh0VReg_70 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_70$D_IN;
	if (ctrlComm_cphsh0VReg_71$EN)
	  ctrlComm_cphsh0VReg_71 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_71$D_IN;
	if (ctrlComm_cphsh0VReg_72$EN)
	  ctrlComm_cphsh0VReg_72 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_72$D_IN;
	if (ctrlComm_cphsh0VReg_73$EN)
	  ctrlComm_cphsh0VReg_73 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_73$D_IN;
	if (ctrlComm_cphsh0VReg_74$EN)
	  ctrlComm_cphsh0VReg_74 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_74$D_IN;
	if (ctrlComm_cphsh0VReg_75$EN)
	  ctrlComm_cphsh0VReg_75 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_75$D_IN;
	if (ctrlComm_cphsh0VReg_76$EN)
	  ctrlComm_cphsh0VReg_76 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_76$D_IN;
	if (ctrlComm_cphsh0VReg_77$EN)
	  ctrlComm_cphsh0VReg_77 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_77$D_IN;
	if (ctrlComm_cphsh0VReg_78$EN)
	  ctrlComm_cphsh0VReg_78 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_78$D_IN;
	if (ctrlComm_cphsh0VReg_79$EN)
	  ctrlComm_cphsh0VReg_79 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_79$D_IN;
	if (ctrlComm_cphsh0VReg_8$EN)
	  ctrlComm_cphsh0VReg_8 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_8$D_IN;
	if (ctrlComm_cphsh0VReg_80$EN)
	  ctrlComm_cphsh0VReg_80 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_80$D_IN;
	if (ctrlComm_cphsh0VReg_81$EN)
	  ctrlComm_cphsh0VReg_81 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_81$D_IN;
	if (ctrlComm_cphsh0VReg_82$EN)
	  ctrlComm_cphsh0VReg_82 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_82$D_IN;
	if (ctrlComm_cphsh0VReg_83$EN)
	  ctrlComm_cphsh0VReg_83 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_83$D_IN;
	if (ctrlComm_cphsh0VReg_84$EN)
	  ctrlComm_cphsh0VReg_84 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_84$D_IN;
	if (ctrlComm_cphsh0VReg_85$EN)
	  ctrlComm_cphsh0VReg_85 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_85$D_IN;
	if (ctrlComm_cphsh0VReg_86$EN)
	  ctrlComm_cphsh0VReg_86 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_86$D_IN;
	if (ctrlComm_cphsh0VReg_87$EN)
	  ctrlComm_cphsh0VReg_87 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_87$D_IN;
	if (ctrlComm_cphsh0VReg_88$EN)
	  ctrlComm_cphsh0VReg_88 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_88$D_IN;
	if (ctrlComm_cphsh0VReg_89$EN)
	  ctrlComm_cphsh0VReg_89 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_89$D_IN;
	if (ctrlComm_cphsh0VReg_9$EN)
	  ctrlComm_cphsh0VReg_9 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_9$D_IN;
	if (ctrlComm_cphsh0VReg_90$EN)
	  ctrlComm_cphsh0VReg_90 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_90$D_IN;
	if (ctrlComm_cphsh0VReg_91$EN)
	  ctrlComm_cphsh0VReg_91 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_91$D_IN;
	if (ctrlComm_cphsh0VReg_92$EN)
	  ctrlComm_cphsh0VReg_92 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_92$D_IN;
	if (ctrlComm_cphsh0VReg_93$EN)
	  ctrlComm_cphsh0VReg_93 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_93$D_IN;
	if (ctrlComm_cphsh0VReg_94$EN)
	  ctrlComm_cphsh0VReg_94 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_94$D_IN;
	if (ctrlComm_cphsh0VReg_95$EN)
	  ctrlComm_cphsh0VReg_95 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_95$D_IN;
	if (ctrlComm_cphsh0VReg_96$EN)
	  ctrlComm_cphsh0VReg_96 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_96$D_IN;
	if (ctrlComm_cphsh0VReg_97$EN)
	  ctrlComm_cphsh0VReg_97 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_97$D_IN;
	if (ctrlComm_cphsh0VReg_98$EN)
	  ctrlComm_cphsh0VReg_98 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_98$D_IN;
	if (ctrlComm_cphsh0VReg_99$EN)
	  ctrlComm_cphsh0VReg_99 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh0VReg_99$D_IN;
	if (ctrlComm_cphsh1VReg_0$EN)
	  ctrlComm_cphsh1VReg_0 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_0$D_IN;
	if (ctrlComm_cphsh1VReg_1$EN)
	  ctrlComm_cphsh1VReg_1 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_1$D_IN;
	if (ctrlComm_cphsh1VReg_10$EN)
	  ctrlComm_cphsh1VReg_10 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_10$D_IN;
	if (ctrlComm_cphsh1VReg_11$EN)
	  ctrlComm_cphsh1VReg_11 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_11$D_IN;
	if (ctrlComm_cphsh1VReg_12$EN)
	  ctrlComm_cphsh1VReg_12 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_12$D_IN;
	if (ctrlComm_cphsh1VReg_13$EN)
	  ctrlComm_cphsh1VReg_13 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_13$D_IN;
	if (ctrlComm_cphsh1VReg_14$EN)
	  ctrlComm_cphsh1VReg_14 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_14$D_IN;
	if (ctrlComm_cphsh1VReg_15$EN)
	  ctrlComm_cphsh1VReg_15 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_15$D_IN;
	if (ctrlComm_cphsh1VReg_16$EN)
	  ctrlComm_cphsh1VReg_16 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_16$D_IN;
	if (ctrlComm_cphsh1VReg_17$EN)
	  ctrlComm_cphsh1VReg_17 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_17$D_IN;
	if (ctrlComm_cphsh1VReg_18$EN)
	  ctrlComm_cphsh1VReg_18 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_18$D_IN;
	if (ctrlComm_cphsh1VReg_19$EN)
	  ctrlComm_cphsh1VReg_19 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_19$D_IN;
	if (ctrlComm_cphsh1VReg_2$EN)
	  ctrlComm_cphsh1VReg_2 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_2$D_IN;
	if (ctrlComm_cphsh1VReg_20$EN)
	  ctrlComm_cphsh1VReg_20 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_20$D_IN;
	if (ctrlComm_cphsh1VReg_21$EN)
	  ctrlComm_cphsh1VReg_21 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_21$D_IN;
	if (ctrlComm_cphsh1VReg_22$EN)
	  ctrlComm_cphsh1VReg_22 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_22$D_IN;
	if (ctrlComm_cphsh1VReg_23$EN)
	  ctrlComm_cphsh1VReg_23 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_23$D_IN;
	if (ctrlComm_cphsh1VReg_24$EN)
	  ctrlComm_cphsh1VReg_24 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_24$D_IN;
	if (ctrlComm_cphsh1VReg_25$EN)
	  ctrlComm_cphsh1VReg_25 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_25$D_IN;
	if (ctrlComm_cphsh1VReg_26$EN)
	  ctrlComm_cphsh1VReg_26 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_26$D_IN;
	if (ctrlComm_cphsh1VReg_27$EN)
	  ctrlComm_cphsh1VReg_27 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_27$D_IN;
	if (ctrlComm_cphsh1VReg_28$EN)
	  ctrlComm_cphsh1VReg_28 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_28$D_IN;
	if (ctrlComm_cphsh1VReg_29$EN)
	  ctrlComm_cphsh1VReg_29 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_29$D_IN;
	if (ctrlComm_cphsh1VReg_3$EN)
	  ctrlComm_cphsh1VReg_3 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_3$D_IN;
	if (ctrlComm_cphsh1VReg_30$EN)
	  ctrlComm_cphsh1VReg_30 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_30$D_IN;
	if (ctrlComm_cphsh1VReg_31$EN)
	  ctrlComm_cphsh1VReg_31 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_31$D_IN;
	if (ctrlComm_cphsh1VReg_32$EN)
	  ctrlComm_cphsh1VReg_32 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_32$D_IN;
	if (ctrlComm_cphsh1VReg_33$EN)
	  ctrlComm_cphsh1VReg_33 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_33$D_IN;
	if (ctrlComm_cphsh1VReg_34$EN)
	  ctrlComm_cphsh1VReg_34 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_34$D_IN;
	if (ctrlComm_cphsh1VReg_35$EN)
	  ctrlComm_cphsh1VReg_35 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_35$D_IN;
	if (ctrlComm_cphsh1VReg_36$EN)
	  ctrlComm_cphsh1VReg_36 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_36$D_IN;
	if (ctrlComm_cphsh1VReg_37$EN)
	  ctrlComm_cphsh1VReg_37 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_37$D_IN;
	if (ctrlComm_cphsh1VReg_38$EN)
	  ctrlComm_cphsh1VReg_38 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_38$D_IN;
	if (ctrlComm_cphsh1VReg_39$EN)
	  ctrlComm_cphsh1VReg_39 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_39$D_IN;
	if (ctrlComm_cphsh1VReg_4$EN)
	  ctrlComm_cphsh1VReg_4 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_4$D_IN;
	if (ctrlComm_cphsh1VReg_40$EN)
	  ctrlComm_cphsh1VReg_40 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_40$D_IN;
	if (ctrlComm_cphsh1VReg_41$EN)
	  ctrlComm_cphsh1VReg_41 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_41$D_IN;
	if (ctrlComm_cphsh1VReg_42$EN)
	  ctrlComm_cphsh1VReg_42 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_42$D_IN;
	if (ctrlComm_cphsh1VReg_43$EN)
	  ctrlComm_cphsh1VReg_43 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_43$D_IN;
	if (ctrlComm_cphsh1VReg_44$EN)
	  ctrlComm_cphsh1VReg_44 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_44$D_IN;
	if (ctrlComm_cphsh1VReg_45$EN)
	  ctrlComm_cphsh1VReg_45 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_45$D_IN;
	if (ctrlComm_cphsh1VReg_46$EN)
	  ctrlComm_cphsh1VReg_46 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_46$D_IN;
	if (ctrlComm_cphsh1VReg_47$EN)
	  ctrlComm_cphsh1VReg_47 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_47$D_IN;
	if (ctrlComm_cphsh1VReg_48$EN)
	  ctrlComm_cphsh1VReg_48 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_48$D_IN;
	if (ctrlComm_cphsh1VReg_49$EN)
	  ctrlComm_cphsh1VReg_49 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_49$D_IN;
	if (ctrlComm_cphsh1VReg_5$EN)
	  ctrlComm_cphsh1VReg_5 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_5$D_IN;
	if (ctrlComm_cphsh1VReg_50$EN)
	  ctrlComm_cphsh1VReg_50 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_50$D_IN;
	if (ctrlComm_cphsh1VReg_51$EN)
	  ctrlComm_cphsh1VReg_51 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_51$D_IN;
	if (ctrlComm_cphsh1VReg_52$EN)
	  ctrlComm_cphsh1VReg_52 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_52$D_IN;
	if (ctrlComm_cphsh1VReg_53$EN)
	  ctrlComm_cphsh1VReg_53 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_53$D_IN;
	if (ctrlComm_cphsh1VReg_54$EN)
	  ctrlComm_cphsh1VReg_54 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_54$D_IN;
	if (ctrlComm_cphsh1VReg_55$EN)
	  ctrlComm_cphsh1VReg_55 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_55$D_IN;
	if (ctrlComm_cphsh1VReg_56$EN)
	  ctrlComm_cphsh1VReg_56 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_56$D_IN;
	if (ctrlComm_cphsh1VReg_57$EN)
	  ctrlComm_cphsh1VReg_57 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_57$D_IN;
	if (ctrlComm_cphsh1VReg_58$EN)
	  ctrlComm_cphsh1VReg_58 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_58$D_IN;
	if (ctrlComm_cphsh1VReg_59$EN)
	  ctrlComm_cphsh1VReg_59 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_59$D_IN;
	if (ctrlComm_cphsh1VReg_6$EN)
	  ctrlComm_cphsh1VReg_6 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_6$D_IN;
	if (ctrlComm_cphsh1VReg_60$EN)
	  ctrlComm_cphsh1VReg_60 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_60$D_IN;
	if (ctrlComm_cphsh1VReg_61$EN)
	  ctrlComm_cphsh1VReg_61 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_61$D_IN;
	if (ctrlComm_cphsh1VReg_62$EN)
	  ctrlComm_cphsh1VReg_62 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_62$D_IN;
	if (ctrlComm_cphsh1VReg_63$EN)
	  ctrlComm_cphsh1VReg_63 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_63$D_IN;
	if (ctrlComm_cphsh1VReg_64$EN)
	  ctrlComm_cphsh1VReg_64 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_64$D_IN;
	if (ctrlComm_cphsh1VReg_65$EN)
	  ctrlComm_cphsh1VReg_65 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_65$D_IN;
	if (ctrlComm_cphsh1VReg_66$EN)
	  ctrlComm_cphsh1VReg_66 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_66$D_IN;
	if (ctrlComm_cphsh1VReg_67$EN)
	  ctrlComm_cphsh1VReg_67 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_67$D_IN;
	if (ctrlComm_cphsh1VReg_68$EN)
	  ctrlComm_cphsh1VReg_68 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_68$D_IN;
	if (ctrlComm_cphsh1VReg_69$EN)
	  ctrlComm_cphsh1VReg_69 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_69$D_IN;
	if (ctrlComm_cphsh1VReg_7$EN)
	  ctrlComm_cphsh1VReg_7 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_7$D_IN;
	if (ctrlComm_cphsh1VReg_70$EN)
	  ctrlComm_cphsh1VReg_70 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_70$D_IN;
	if (ctrlComm_cphsh1VReg_71$EN)
	  ctrlComm_cphsh1VReg_71 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_71$D_IN;
	if (ctrlComm_cphsh1VReg_72$EN)
	  ctrlComm_cphsh1VReg_72 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_72$D_IN;
	if (ctrlComm_cphsh1VReg_73$EN)
	  ctrlComm_cphsh1VReg_73 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_73$D_IN;
	if (ctrlComm_cphsh1VReg_74$EN)
	  ctrlComm_cphsh1VReg_74 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_74$D_IN;
	if (ctrlComm_cphsh1VReg_75$EN)
	  ctrlComm_cphsh1VReg_75 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_75$D_IN;
	if (ctrlComm_cphsh1VReg_76$EN)
	  ctrlComm_cphsh1VReg_76 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_76$D_IN;
	if (ctrlComm_cphsh1VReg_77$EN)
	  ctrlComm_cphsh1VReg_77 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_77$D_IN;
	if (ctrlComm_cphsh1VReg_78$EN)
	  ctrlComm_cphsh1VReg_78 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_78$D_IN;
	if (ctrlComm_cphsh1VReg_79$EN)
	  ctrlComm_cphsh1VReg_79 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_79$D_IN;
	if (ctrlComm_cphsh1VReg_8$EN)
	  ctrlComm_cphsh1VReg_8 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_8$D_IN;
	if (ctrlComm_cphsh1VReg_80$EN)
	  ctrlComm_cphsh1VReg_80 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_80$D_IN;
	if (ctrlComm_cphsh1VReg_81$EN)
	  ctrlComm_cphsh1VReg_81 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_81$D_IN;
	if (ctrlComm_cphsh1VReg_82$EN)
	  ctrlComm_cphsh1VReg_82 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_82$D_IN;
	if (ctrlComm_cphsh1VReg_83$EN)
	  ctrlComm_cphsh1VReg_83 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_83$D_IN;
	if (ctrlComm_cphsh1VReg_84$EN)
	  ctrlComm_cphsh1VReg_84 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_84$D_IN;
	if (ctrlComm_cphsh1VReg_85$EN)
	  ctrlComm_cphsh1VReg_85 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_85$D_IN;
	if (ctrlComm_cphsh1VReg_86$EN)
	  ctrlComm_cphsh1VReg_86 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_86$D_IN;
	if (ctrlComm_cphsh1VReg_87$EN)
	  ctrlComm_cphsh1VReg_87 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_87$D_IN;
	if (ctrlComm_cphsh1VReg_88$EN)
	  ctrlComm_cphsh1VReg_88 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_88$D_IN;
	if (ctrlComm_cphsh1VReg_89$EN)
	  ctrlComm_cphsh1VReg_89 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_89$D_IN;
	if (ctrlComm_cphsh1VReg_9$EN)
	  ctrlComm_cphsh1VReg_9 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_9$D_IN;
	if (ctrlComm_cphsh1VReg_90$EN)
	  ctrlComm_cphsh1VReg_90 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_90$D_IN;
	if (ctrlComm_cphsh1VReg_91$EN)
	  ctrlComm_cphsh1VReg_91 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_91$D_IN;
	if (ctrlComm_cphsh1VReg_92$EN)
	  ctrlComm_cphsh1VReg_92 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_92$D_IN;
	if (ctrlComm_cphsh1VReg_93$EN)
	  ctrlComm_cphsh1VReg_93 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_93$D_IN;
	if (ctrlComm_cphsh1VReg_94$EN)
	  ctrlComm_cphsh1VReg_94 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_94$D_IN;
	if (ctrlComm_cphsh1VReg_95$EN)
	  ctrlComm_cphsh1VReg_95 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_95$D_IN;
	if (ctrlComm_cphsh1VReg_96$EN)
	  ctrlComm_cphsh1VReg_96 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_96$D_IN;
	if (ctrlComm_cphsh1VReg_97$EN)
	  ctrlComm_cphsh1VReg_97 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_97$D_IN;
	if (ctrlComm_cphsh1VReg_98$EN)
	  ctrlComm_cphsh1VReg_98 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_98$D_IN;
	if (ctrlComm_cphsh1VReg_99$EN)
	  ctrlComm_cphsh1VReg_99 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_cphsh1VReg_99$D_IN;
	if (ctrlComm_encDoneProcessed$EN)
	  ctrlComm_encDoneProcessed <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_encDoneProcessed$D_IN;
	if (ctrlComm_encState$EN)
	  ctrlComm_encState <= `BSV_ASSIGNMENT_DELAY ctrlComm_encState$D_IN;
	if (ctrlComm_plnsh0VReg_0$EN)
	  ctrlComm_plnsh0VReg_0 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_0$D_IN;
	if (ctrlComm_plnsh0VReg_1$EN)
	  ctrlComm_plnsh0VReg_1 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_1$D_IN;
	if (ctrlComm_plnsh0VReg_10$EN)
	  ctrlComm_plnsh0VReg_10 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_10$D_IN;
	if (ctrlComm_plnsh0VReg_11$EN)
	  ctrlComm_plnsh0VReg_11 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_11$D_IN;
	if (ctrlComm_plnsh0VReg_12$EN)
	  ctrlComm_plnsh0VReg_12 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_12$D_IN;
	if (ctrlComm_plnsh0VReg_13$EN)
	  ctrlComm_plnsh0VReg_13 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_13$D_IN;
	if (ctrlComm_plnsh0VReg_14$EN)
	  ctrlComm_plnsh0VReg_14 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_14$D_IN;
	if (ctrlComm_plnsh0VReg_15$EN)
	  ctrlComm_plnsh0VReg_15 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_15$D_IN;
	if (ctrlComm_plnsh0VReg_16$EN)
	  ctrlComm_plnsh0VReg_16 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_16$D_IN;
	if (ctrlComm_plnsh0VReg_17$EN)
	  ctrlComm_plnsh0VReg_17 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_17$D_IN;
	if (ctrlComm_plnsh0VReg_18$EN)
	  ctrlComm_plnsh0VReg_18 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_18$D_IN;
	if (ctrlComm_plnsh0VReg_19$EN)
	  ctrlComm_plnsh0VReg_19 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_19$D_IN;
	if (ctrlComm_plnsh0VReg_2$EN)
	  ctrlComm_plnsh0VReg_2 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_2$D_IN;
	if (ctrlComm_plnsh0VReg_20$EN)
	  ctrlComm_plnsh0VReg_20 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_20$D_IN;
	if (ctrlComm_plnsh0VReg_21$EN)
	  ctrlComm_plnsh0VReg_21 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_21$D_IN;
	if (ctrlComm_plnsh0VReg_22$EN)
	  ctrlComm_plnsh0VReg_22 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_22$D_IN;
	if (ctrlComm_plnsh0VReg_23$EN)
	  ctrlComm_plnsh0VReg_23 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_23$D_IN;
	if (ctrlComm_plnsh0VReg_24$EN)
	  ctrlComm_plnsh0VReg_24 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_24$D_IN;
	if (ctrlComm_plnsh0VReg_25$EN)
	  ctrlComm_plnsh0VReg_25 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_25$D_IN;
	if (ctrlComm_plnsh0VReg_26$EN)
	  ctrlComm_plnsh0VReg_26 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_26$D_IN;
	if (ctrlComm_plnsh0VReg_27$EN)
	  ctrlComm_plnsh0VReg_27 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_27$D_IN;
	if (ctrlComm_plnsh0VReg_28$EN)
	  ctrlComm_plnsh0VReg_28 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_28$D_IN;
	if (ctrlComm_plnsh0VReg_29$EN)
	  ctrlComm_plnsh0VReg_29 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_29$D_IN;
	if (ctrlComm_plnsh0VReg_3$EN)
	  ctrlComm_plnsh0VReg_3 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_3$D_IN;
	if (ctrlComm_plnsh0VReg_30$EN)
	  ctrlComm_plnsh0VReg_30 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_30$D_IN;
	if (ctrlComm_plnsh0VReg_31$EN)
	  ctrlComm_plnsh0VReg_31 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_31$D_IN;
	if (ctrlComm_plnsh0VReg_32$EN)
	  ctrlComm_plnsh0VReg_32 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_32$D_IN;
	if (ctrlComm_plnsh0VReg_33$EN)
	  ctrlComm_plnsh0VReg_33 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_33$D_IN;
	if (ctrlComm_plnsh0VReg_34$EN)
	  ctrlComm_plnsh0VReg_34 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_34$D_IN;
	if (ctrlComm_plnsh0VReg_35$EN)
	  ctrlComm_plnsh0VReg_35 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_35$D_IN;
	if (ctrlComm_plnsh0VReg_36$EN)
	  ctrlComm_plnsh0VReg_36 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_36$D_IN;
	if (ctrlComm_plnsh0VReg_37$EN)
	  ctrlComm_plnsh0VReg_37 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_37$D_IN;
	if (ctrlComm_plnsh0VReg_38$EN)
	  ctrlComm_plnsh0VReg_38 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_38$D_IN;
	if (ctrlComm_plnsh0VReg_39$EN)
	  ctrlComm_plnsh0VReg_39 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_39$D_IN;
	if (ctrlComm_plnsh0VReg_4$EN)
	  ctrlComm_plnsh0VReg_4 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_4$D_IN;
	if (ctrlComm_plnsh0VReg_40$EN)
	  ctrlComm_plnsh0VReg_40 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_40$D_IN;
	if (ctrlComm_plnsh0VReg_41$EN)
	  ctrlComm_plnsh0VReg_41 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_41$D_IN;
	if (ctrlComm_plnsh0VReg_42$EN)
	  ctrlComm_plnsh0VReg_42 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_42$D_IN;
	if (ctrlComm_plnsh0VReg_43$EN)
	  ctrlComm_plnsh0VReg_43 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_43$D_IN;
	if (ctrlComm_plnsh0VReg_44$EN)
	  ctrlComm_plnsh0VReg_44 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_44$D_IN;
	if (ctrlComm_plnsh0VReg_45$EN)
	  ctrlComm_plnsh0VReg_45 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_45$D_IN;
	if (ctrlComm_plnsh0VReg_46$EN)
	  ctrlComm_plnsh0VReg_46 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_46$D_IN;
	if (ctrlComm_plnsh0VReg_47$EN)
	  ctrlComm_plnsh0VReg_47 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_47$D_IN;
	if (ctrlComm_plnsh0VReg_48$EN)
	  ctrlComm_plnsh0VReg_48 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_48$D_IN;
	if (ctrlComm_plnsh0VReg_49$EN)
	  ctrlComm_plnsh0VReg_49 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_49$D_IN;
	if (ctrlComm_plnsh0VReg_5$EN)
	  ctrlComm_plnsh0VReg_5 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_5$D_IN;
	if (ctrlComm_plnsh0VReg_50$EN)
	  ctrlComm_plnsh0VReg_50 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_50$D_IN;
	if (ctrlComm_plnsh0VReg_51$EN)
	  ctrlComm_plnsh0VReg_51 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_51$D_IN;
	if (ctrlComm_plnsh0VReg_52$EN)
	  ctrlComm_plnsh0VReg_52 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_52$D_IN;
	if (ctrlComm_plnsh0VReg_53$EN)
	  ctrlComm_plnsh0VReg_53 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_53$D_IN;
	if (ctrlComm_plnsh0VReg_54$EN)
	  ctrlComm_plnsh0VReg_54 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_54$D_IN;
	if (ctrlComm_plnsh0VReg_55$EN)
	  ctrlComm_plnsh0VReg_55 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_55$D_IN;
	if (ctrlComm_plnsh0VReg_56$EN)
	  ctrlComm_plnsh0VReg_56 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_56$D_IN;
	if (ctrlComm_plnsh0VReg_57$EN)
	  ctrlComm_plnsh0VReg_57 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_57$D_IN;
	if (ctrlComm_plnsh0VReg_58$EN)
	  ctrlComm_plnsh0VReg_58 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_58$D_IN;
	if (ctrlComm_plnsh0VReg_59$EN)
	  ctrlComm_plnsh0VReg_59 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_59$D_IN;
	if (ctrlComm_plnsh0VReg_6$EN)
	  ctrlComm_plnsh0VReg_6 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_6$D_IN;
	if (ctrlComm_plnsh0VReg_60$EN)
	  ctrlComm_plnsh0VReg_60 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_60$D_IN;
	if (ctrlComm_plnsh0VReg_61$EN)
	  ctrlComm_plnsh0VReg_61 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_61$D_IN;
	if (ctrlComm_plnsh0VReg_62$EN)
	  ctrlComm_plnsh0VReg_62 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_62$D_IN;
	if (ctrlComm_plnsh0VReg_63$EN)
	  ctrlComm_plnsh0VReg_63 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_63$D_IN;
	if (ctrlComm_plnsh0VReg_64$EN)
	  ctrlComm_plnsh0VReg_64 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_64$D_IN;
	if (ctrlComm_plnsh0VReg_65$EN)
	  ctrlComm_plnsh0VReg_65 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_65$D_IN;
	if (ctrlComm_plnsh0VReg_66$EN)
	  ctrlComm_plnsh0VReg_66 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_66$D_IN;
	if (ctrlComm_plnsh0VReg_67$EN)
	  ctrlComm_plnsh0VReg_67 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_67$D_IN;
	if (ctrlComm_plnsh0VReg_68$EN)
	  ctrlComm_plnsh0VReg_68 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_68$D_IN;
	if (ctrlComm_plnsh0VReg_69$EN)
	  ctrlComm_plnsh0VReg_69 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_69$D_IN;
	if (ctrlComm_plnsh0VReg_7$EN)
	  ctrlComm_plnsh0VReg_7 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_7$D_IN;
	if (ctrlComm_plnsh0VReg_70$EN)
	  ctrlComm_plnsh0VReg_70 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_70$D_IN;
	if (ctrlComm_plnsh0VReg_71$EN)
	  ctrlComm_plnsh0VReg_71 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_71$D_IN;
	if (ctrlComm_plnsh0VReg_72$EN)
	  ctrlComm_plnsh0VReg_72 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_72$D_IN;
	if (ctrlComm_plnsh0VReg_73$EN)
	  ctrlComm_plnsh0VReg_73 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_73$D_IN;
	if (ctrlComm_plnsh0VReg_74$EN)
	  ctrlComm_plnsh0VReg_74 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_74$D_IN;
	if (ctrlComm_plnsh0VReg_75$EN)
	  ctrlComm_plnsh0VReg_75 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_75$D_IN;
	if (ctrlComm_plnsh0VReg_76$EN)
	  ctrlComm_plnsh0VReg_76 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_76$D_IN;
	if (ctrlComm_plnsh0VReg_77$EN)
	  ctrlComm_plnsh0VReg_77 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_77$D_IN;
	if (ctrlComm_plnsh0VReg_78$EN)
	  ctrlComm_plnsh0VReg_78 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_78$D_IN;
	if (ctrlComm_plnsh0VReg_79$EN)
	  ctrlComm_plnsh0VReg_79 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_79$D_IN;
	if (ctrlComm_plnsh0VReg_8$EN)
	  ctrlComm_plnsh0VReg_8 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_8$D_IN;
	if (ctrlComm_plnsh0VReg_80$EN)
	  ctrlComm_plnsh0VReg_80 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_80$D_IN;
	if (ctrlComm_plnsh0VReg_81$EN)
	  ctrlComm_plnsh0VReg_81 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_81$D_IN;
	if (ctrlComm_plnsh0VReg_82$EN)
	  ctrlComm_plnsh0VReg_82 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_82$D_IN;
	if (ctrlComm_plnsh0VReg_83$EN)
	  ctrlComm_plnsh0VReg_83 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_83$D_IN;
	if (ctrlComm_plnsh0VReg_84$EN)
	  ctrlComm_plnsh0VReg_84 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_84$D_IN;
	if (ctrlComm_plnsh0VReg_85$EN)
	  ctrlComm_plnsh0VReg_85 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_85$D_IN;
	if (ctrlComm_plnsh0VReg_86$EN)
	  ctrlComm_plnsh0VReg_86 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_86$D_IN;
	if (ctrlComm_plnsh0VReg_87$EN)
	  ctrlComm_plnsh0VReg_87 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_87$D_IN;
	if (ctrlComm_plnsh0VReg_88$EN)
	  ctrlComm_plnsh0VReg_88 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_88$D_IN;
	if (ctrlComm_plnsh0VReg_89$EN)
	  ctrlComm_plnsh0VReg_89 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_89$D_IN;
	if (ctrlComm_plnsh0VReg_9$EN)
	  ctrlComm_plnsh0VReg_9 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_9$D_IN;
	if (ctrlComm_plnsh0VReg_90$EN)
	  ctrlComm_plnsh0VReg_90 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_90$D_IN;
	if (ctrlComm_plnsh0VReg_91$EN)
	  ctrlComm_plnsh0VReg_91 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_91$D_IN;
	if (ctrlComm_plnsh0VReg_92$EN)
	  ctrlComm_plnsh0VReg_92 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_92$D_IN;
	if (ctrlComm_plnsh0VReg_93$EN)
	  ctrlComm_plnsh0VReg_93 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_93$D_IN;
	if (ctrlComm_plnsh0VReg_94$EN)
	  ctrlComm_plnsh0VReg_94 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_94$D_IN;
	if (ctrlComm_plnsh0VReg_95$EN)
	  ctrlComm_plnsh0VReg_95 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_95$D_IN;
	if (ctrlComm_plnsh0VReg_96$EN)
	  ctrlComm_plnsh0VReg_96 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_96$D_IN;
	if (ctrlComm_plnsh0VReg_97$EN)
	  ctrlComm_plnsh0VReg_97 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_97$D_IN;
	if (ctrlComm_plnsh0VReg_98$EN)
	  ctrlComm_plnsh0VReg_98 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_98$D_IN;
	if (ctrlComm_plnsh0VReg_99$EN)
	  ctrlComm_plnsh0VReg_99 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh0VReg_99$D_IN;
	if (ctrlComm_plnsh1VReg_0$EN)
	  ctrlComm_plnsh1VReg_0 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_0$D_IN;
	if (ctrlComm_plnsh1VReg_1$EN)
	  ctrlComm_plnsh1VReg_1 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_1$D_IN;
	if (ctrlComm_plnsh1VReg_10$EN)
	  ctrlComm_plnsh1VReg_10 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_10$D_IN;
	if (ctrlComm_plnsh1VReg_11$EN)
	  ctrlComm_plnsh1VReg_11 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_11$D_IN;
	if (ctrlComm_plnsh1VReg_12$EN)
	  ctrlComm_plnsh1VReg_12 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_12$D_IN;
	if (ctrlComm_plnsh1VReg_13$EN)
	  ctrlComm_plnsh1VReg_13 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_13$D_IN;
	if (ctrlComm_plnsh1VReg_14$EN)
	  ctrlComm_plnsh1VReg_14 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_14$D_IN;
	if (ctrlComm_plnsh1VReg_15$EN)
	  ctrlComm_plnsh1VReg_15 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_15$D_IN;
	if (ctrlComm_plnsh1VReg_16$EN)
	  ctrlComm_plnsh1VReg_16 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_16$D_IN;
	if (ctrlComm_plnsh1VReg_17$EN)
	  ctrlComm_plnsh1VReg_17 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_17$D_IN;
	if (ctrlComm_plnsh1VReg_18$EN)
	  ctrlComm_plnsh1VReg_18 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_18$D_IN;
	if (ctrlComm_plnsh1VReg_19$EN)
	  ctrlComm_plnsh1VReg_19 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_19$D_IN;
	if (ctrlComm_plnsh1VReg_2$EN)
	  ctrlComm_plnsh1VReg_2 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_2$D_IN;
	if (ctrlComm_plnsh1VReg_20$EN)
	  ctrlComm_plnsh1VReg_20 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_20$D_IN;
	if (ctrlComm_plnsh1VReg_21$EN)
	  ctrlComm_plnsh1VReg_21 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_21$D_IN;
	if (ctrlComm_plnsh1VReg_22$EN)
	  ctrlComm_plnsh1VReg_22 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_22$D_IN;
	if (ctrlComm_plnsh1VReg_23$EN)
	  ctrlComm_plnsh1VReg_23 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_23$D_IN;
	if (ctrlComm_plnsh1VReg_24$EN)
	  ctrlComm_plnsh1VReg_24 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_24$D_IN;
	if (ctrlComm_plnsh1VReg_25$EN)
	  ctrlComm_plnsh1VReg_25 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_25$D_IN;
	if (ctrlComm_plnsh1VReg_26$EN)
	  ctrlComm_plnsh1VReg_26 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_26$D_IN;
	if (ctrlComm_plnsh1VReg_27$EN)
	  ctrlComm_plnsh1VReg_27 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_27$D_IN;
	if (ctrlComm_plnsh1VReg_28$EN)
	  ctrlComm_plnsh1VReg_28 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_28$D_IN;
	if (ctrlComm_plnsh1VReg_29$EN)
	  ctrlComm_plnsh1VReg_29 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_29$D_IN;
	if (ctrlComm_plnsh1VReg_3$EN)
	  ctrlComm_plnsh1VReg_3 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_3$D_IN;
	if (ctrlComm_plnsh1VReg_30$EN)
	  ctrlComm_plnsh1VReg_30 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_30$D_IN;
	if (ctrlComm_plnsh1VReg_31$EN)
	  ctrlComm_plnsh1VReg_31 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_31$D_IN;
	if (ctrlComm_plnsh1VReg_32$EN)
	  ctrlComm_plnsh1VReg_32 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_32$D_IN;
	if (ctrlComm_plnsh1VReg_33$EN)
	  ctrlComm_plnsh1VReg_33 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_33$D_IN;
	if (ctrlComm_plnsh1VReg_34$EN)
	  ctrlComm_plnsh1VReg_34 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_34$D_IN;
	if (ctrlComm_plnsh1VReg_35$EN)
	  ctrlComm_plnsh1VReg_35 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_35$D_IN;
	if (ctrlComm_plnsh1VReg_36$EN)
	  ctrlComm_plnsh1VReg_36 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_36$D_IN;
	if (ctrlComm_plnsh1VReg_37$EN)
	  ctrlComm_plnsh1VReg_37 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_37$D_IN;
	if (ctrlComm_plnsh1VReg_38$EN)
	  ctrlComm_plnsh1VReg_38 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_38$D_IN;
	if (ctrlComm_plnsh1VReg_39$EN)
	  ctrlComm_plnsh1VReg_39 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_39$D_IN;
	if (ctrlComm_plnsh1VReg_4$EN)
	  ctrlComm_plnsh1VReg_4 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_4$D_IN;
	if (ctrlComm_plnsh1VReg_40$EN)
	  ctrlComm_plnsh1VReg_40 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_40$D_IN;
	if (ctrlComm_plnsh1VReg_41$EN)
	  ctrlComm_plnsh1VReg_41 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_41$D_IN;
	if (ctrlComm_plnsh1VReg_42$EN)
	  ctrlComm_plnsh1VReg_42 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_42$D_IN;
	if (ctrlComm_plnsh1VReg_43$EN)
	  ctrlComm_plnsh1VReg_43 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_43$D_IN;
	if (ctrlComm_plnsh1VReg_44$EN)
	  ctrlComm_plnsh1VReg_44 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_44$D_IN;
	if (ctrlComm_plnsh1VReg_45$EN)
	  ctrlComm_plnsh1VReg_45 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_45$D_IN;
	if (ctrlComm_plnsh1VReg_46$EN)
	  ctrlComm_plnsh1VReg_46 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_46$D_IN;
	if (ctrlComm_plnsh1VReg_47$EN)
	  ctrlComm_plnsh1VReg_47 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_47$D_IN;
	if (ctrlComm_plnsh1VReg_48$EN)
	  ctrlComm_plnsh1VReg_48 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_48$D_IN;
	if (ctrlComm_plnsh1VReg_49$EN)
	  ctrlComm_plnsh1VReg_49 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_49$D_IN;
	if (ctrlComm_plnsh1VReg_5$EN)
	  ctrlComm_plnsh1VReg_5 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_5$D_IN;
	if (ctrlComm_plnsh1VReg_50$EN)
	  ctrlComm_plnsh1VReg_50 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_50$D_IN;
	if (ctrlComm_plnsh1VReg_51$EN)
	  ctrlComm_plnsh1VReg_51 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_51$D_IN;
	if (ctrlComm_plnsh1VReg_52$EN)
	  ctrlComm_plnsh1VReg_52 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_52$D_IN;
	if (ctrlComm_plnsh1VReg_53$EN)
	  ctrlComm_plnsh1VReg_53 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_53$D_IN;
	if (ctrlComm_plnsh1VReg_54$EN)
	  ctrlComm_plnsh1VReg_54 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_54$D_IN;
	if (ctrlComm_plnsh1VReg_55$EN)
	  ctrlComm_plnsh1VReg_55 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_55$D_IN;
	if (ctrlComm_plnsh1VReg_56$EN)
	  ctrlComm_plnsh1VReg_56 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_56$D_IN;
	if (ctrlComm_plnsh1VReg_57$EN)
	  ctrlComm_plnsh1VReg_57 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_57$D_IN;
	if (ctrlComm_plnsh1VReg_58$EN)
	  ctrlComm_plnsh1VReg_58 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_58$D_IN;
	if (ctrlComm_plnsh1VReg_59$EN)
	  ctrlComm_plnsh1VReg_59 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_59$D_IN;
	if (ctrlComm_plnsh1VReg_6$EN)
	  ctrlComm_plnsh1VReg_6 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_6$D_IN;
	if (ctrlComm_plnsh1VReg_60$EN)
	  ctrlComm_plnsh1VReg_60 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_60$D_IN;
	if (ctrlComm_plnsh1VReg_61$EN)
	  ctrlComm_plnsh1VReg_61 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_61$D_IN;
	if (ctrlComm_plnsh1VReg_62$EN)
	  ctrlComm_plnsh1VReg_62 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_62$D_IN;
	if (ctrlComm_plnsh1VReg_63$EN)
	  ctrlComm_plnsh1VReg_63 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_63$D_IN;
	if (ctrlComm_plnsh1VReg_64$EN)
	  ctrlComm_plnsh1VReg_64 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_64$D_IN;
	if (ctrlComm_plnsh1VReg_65$EN)
	  ctrlComm_plnsh1VReg_65 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_65$D_IN;
	if (ctrlComm_plnsh1VReg_66$EN)
	  ctrlComm_plnsh1VReg_66 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_66$D_IN;
	if (ctrlComm_plnsh1VReg_67$EN)
	  ctrlComm_plnsh1VReg_67 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_67$D_IN;
	if (ctrlComm_plnsh1VReg_68$EN)
	  ctrlComm_plnsh1VReg_68 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_68$D_IN;
	if (ctrlComm_plnsh1VReg_69$EN)
	  ctrlComm_plnsh1VReg_69 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_69$D_IN;
	if (ctrlComm_plnsh1VReg_7$EN)
	  ctrlComm_plnsh1VReg_7 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_7$D_IN;
	if (ctrlComm_plnsh1VReg_70$EN)
	  ctrlComm_plnsh1VReg_70 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_70$D_IN;
	if (ctrlComm_plnsh1VReg_71$EN)
	  ctrlComm_plnsh1VReg_71 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_71$D_IN;
	if (ctrlComm_plnsh1VReg_72$EN)
	  ctrlComm_plnsh1VReg_72 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_72$D_IN;
	if (ctrlComm_plnsh1VReg_73$EN)
	  ctrlComm_plnsh1VReg_73 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_73$D_IN;
	if (ctrlComm_plnsh1VReg_74$EN)
	  ctrlComm_plnsh1VReg_74 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_74$D_IN;
	if (ctrlComm_plnsh1VReg_75$EN)
	  ctrlComm_plnsh1VReg_75 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_75$D_IN;
	if (ctrlComm_plnsh1VReg_76$EN)
	  ctrlComm_plnsh1VReg_76 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_76$D_IN;
	if (ctrlComm_plnsh1VReg_77$EN)
	  ctrlComm_plnsh1VReg_77 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_77$D_IN;
	if (ctrlComm_plnsh1VReg_78$EN)
	  ctrlComm_plnsh1VReg_78 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_78$D_IN;
	if (ctrlComm_plnsh1VReg_79$EN)
	  ctrlComm_plnsh1VReg_79 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_79$D_IN;
	if (ctrlComm_plnsh1VReg_8$EN)
	  ctrlComm_plnsh1VReg_8 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_8$D_IN;
	if (ctrlComm_plnsh1VReg_80$EN)
	  ctrlComm_plnsh1VReg_80 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_80$D_IN;
	if (ctrlComm_plnsh1VReg_81$EN)
	  ctrlComm_plnsh1VReg_81 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_81$D_IN;
	if (ctrlComm_plnsh1VReg_82$EN)
	  ctrlComm_plnsh1VReg_82 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_82$D_IN;
	if (ctrlComm_plnsh1VReg_83$EN)
	  ctrlComm_plnsh1VReg_83 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_83$D_IN;
	if (ctrlComm_plnsh1VReg_84$EN)
	  ctrlComm_plnsh1VReg_84 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_84$D_IN;
	if (ctrlComm_plnsh1VReg_85$EN)
	  ctrlComm_plnsh1VReg_85 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_85$D_IN;
	if (ctrlComm_plnsh1VReg_86$EN)
	  ctrlComm_plnsh1VReg_86 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_86$D_IN;
	if (ctrlComm_plnsh1VReg_87$EN)
	  ctrlComm_plnsh1VReg_87 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_87$D_IN;
	if (ctrlComm_plnsh1VReg_88$EN)
	  ctrlComm_plnsh1VReg_88 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_88$D_IN;
	if (ctrlComm_plnsh1VReg_89$EN)
	  ctrlComm_plnsh1VReg_89 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_89$D_IN;
	if (ctrlComm_plnsh1VReg_9$EN)
	  ctrlComm_plnsh1VReg_9 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_9$D_IN;
	if (ctrlComm_plnsh1VReg_90$EN)
	  ctrlComm_plnsh1VReg_90 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_90$D_IN;
	if (ctrlComm_plnsh1VReg_91$EN)
	  ctrlComm_plnsh1VReg_91 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_91$D_IN;
	if (ctrlComm_plnsh1VReg_92$EN)
	  ctrlComm_plnsh1VReg_92 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_92$D_IN;
	if (ctrlComm_plnsh1VReg_93$EN)
	  ctrlComm_plnsh1VReg_93 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_93$D_IN;
	if (ctrlComm_plnsh1VReg_94$EN)
	  ctrlComm_plnsh1VReg_94 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_94$D_IN;
	if (ctrlComm_plnsh1VReg_95$EN)
	  ctrlComm_plnsh1VReg_95 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_95$D_IN;
	if (ctrlComm_plnsh1VReg_96$EN)
	  ctrlComm_plnsh1VReg_96 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_96$D_IN;
	if (ctrlComm_plnsh1VReg_97$EN)
	  ctrlComm_plnsh1VReg_97 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_97$D_IN;
	if (ctrlComm_plnsh1VReg_98$EN)
	  ctrlComm_plnsh1VReg_98 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_98$D_IN;
	if (ctrlComm_plnsh1VReg_99$EN)
	  ctrlComm_plnsh1VReg_99 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_plnsh1VReg_99$D_IN;
	if (ctrlComm_random_cnt$EN)
	  ctrlComm_random_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_random_cnt$D_IN;
	if (ctrlComm_rdiSwitch$EN)
	  ctrlComm_rdiSwitch <= `BSV_ASSIGNMENT_DELAY ctrlComm_rdiSwitch$D_IN;
	if (ctrlComm_seedVReg_0$EN)
	  ctrlComm_seedVReg_0 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_0$D_IN;
	if (ctrlComm_seedVReg_1$EN)
	  ctrlComm_seedVReg_1 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_1$D_IN;
	if (ctrlComm_seedVReg_2$EN)
	  ctrlComm_seedVReg_2 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_2$D_IN;
	if (ctrlComm_seedVReg_3$EN)
	  ctrlComm_seedVReg_3 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_3$D_IN;
	if (ctrlComm_seedVReg_4$EN)
	  ctrlComm_seedVReg_4 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_4$D_IN;
	if (ctrlComm_seedVReg_5$EN)
	  ctrlComm_seedVReg_5 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_5$D_IN;
	if (ctrlComm_seedVReg_6$EN)
	  ctrlComm_seedVReg_6 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_6$D_IN;
	if (ctrlComm_seedVReg_7$EN)
	  ctrlComm_seedVReg_7 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_7$D_IN;
	if (ctrlComm_seedVReg_8$EN)
	  ctrlComm_seedVReg_8 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_8$D_IN;
	if (ctrlComm_seedVReg_9$EN)
	  ctrlComm_seedVReg_9 <= `BSV_ASSIGNMENT_DELAY
	      ctrlComm_seedVReg_9$D_IN;
	if (ctrlComm_state$EN)
	  ctrlComm_state <= `BSV_ASSIGNMENT_DELAY ctrlComm_state$D_IN;
	if (deviceRdyCnt$EN)
	  deviceRdyCnt <= `BSV_ASSIGNMENT_DELAY deviceRdyCnt$D_IN;
	if (deviceRdyReg$EN)
	  deviceRdyReg <= `BSV_ASSIGNMENT_DELAY deviceRdyReg$D_IN;
	if (m2cCDCProc_doneLvlReg1$EN)
	  m2cCDCProc_doneLvlReg1 <= `BSV_ASSIGNMENT_DELAY
	      m2cCDCProc_doneLvlReg1$D_IN;
	if (m2cCDCProc_doneLvlReg2$EN)
	  m2cCDCProc_doneLvlReg2 <= `BSV_ASSIGNMENT_DELAY
	      m2cCDCProc_doneLvlReg2$D_IN;
	if (m2cCDCProc_doneLvlReg3$EN)
	  m2cCDCProc_doneLvlReg3 <= `BSV_ASSIGNMENT_DELAY
	      m2cCDCProc_doneLvlReg3$D_IN;
	if (m2cCDCProc_enLvlReg$EN)
	  m2cCDCProc_enLvlReg <= `BSV_ASSIGNMENT_DELAY
	      m2cCDCProc_enLvlReg$D_IN;
	if (m2cCDCProc_txRdy$EN)
	  m2cCDCProc_txRdy <= `BSV_ASSIGNMENT_DELAY m2cCDCProc_txRdy$D_IN;
	if (randManage_addr$EN)
	  randManage_addr <= `BSV_ASSIGNMENT_DELAY randManage_addr$D_IN;
	if (randManage_prng_state$EN)
	  randManage_prng_state <= `BSV_ASSIGNMENT_DELAY
	      randManage_prng_state$D_IN;
	if (randManage_prng_warmUpCnt$EN)
	  randManage_prng_warmUpCnt <= `BSV_ASSIGNMENT_DELAY
	      randManage_prng_warmUpCnt$D_IN;
	if (randManage_rdi_0$EN)
	  randManage_rdi_0 <= `BSV_ASSIGNMENT_DELAY randManage_rdi_0$D_IN;
	if (randManage_state$EN)
	  randManage_state <= `BSV_ASSIGNMENT_DELAY randManage_state$D_IN;
      end
    if (c2mCDCProc_dataReg$EN)
      c2mCDCProc_dataReg <= `BSV_ASSIGNMENT_DELAY c2mCDCProc_dataReg$D_IN;
    if (m2cCDCProc_dataReg$EN)
      m2cCDCProc_dataReg <= `BSV_ASSIGNMENT_DELAY m2cCDCProc_dataReg$D_IN;
    if (randManage_prng_triviumCore_regA$EN)
      randManage_prng_triviumCore_regA <= `BSV_ASSIGNMENT_DELAY
	  randManage_prng_triviumCore_regA$D_IN;
    if (randManage_prng_triviumCore_regB$EN)
      randManage_prng_triviumCore_regB <= `BSV_ASSIGNMENT_DELAY
	  randManage_prng_triviumCore_regB$D_IN;
    if (randManage_prng_triviumCore_regC$EN)
      randManage_prng_triviumCore_regC <= `BSV_ASSIGNMENT_DELAY
	  randManage_prng_triviumCore_regC$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c2mCDCProc_dataReg = 16'hAAAA;
    c2mCDCProc_doneLvlReg = 1'h0;
    c2mCDCProc_enLvlReg1 = 1'h0;
    c2mCDCProc_enLvlReg2 = 1'h0;
    c2mCDCProc_enLvlReg3 = 1'h0;
    c2mCDCProc_rxVld = 1'h0;
    ctrlComm_addr = 14'h2AAA;
    ctrlComm_cphsh0VReg_0 = 16'hAAAA;
    ctrlComm_cphsh0VReg_1 = 16'hAAAA;
    ctrlComm_cphsh0VReg_10 = 16'hAAAA;
    ctrlComm_cphsh0VReg_11 = 16'hAAAA;
    ctrlComm_cphsh0VReg_12 = 16'hAAAA;
    ctrlComm_cphsh0VReg_13 = 16'hAAAA;
    ctrlComm_cphsh0VReg_14 = 16'hAAAA;
    ctrlComm_cphsh0VReg_15 = 16'hAAAA;
    ctrlComm_cphsh0VReg_16 = 16'hAAAA;
    ctrlComm_cphsh0VReg_17 = 16'hAAAA;
    ctrlComm_cphsh0VReg_18 = 16'hAAAA;
    ctrlComm_cphsh0VReg_19 = 16'hAAAA;
    ctrlComm_cphsh0VReg_2 = 16'hAAAA;
    ctrlComm_cphsh0VReg_20 = 16'hAAAA;
    ctrlComm_cphsh0VReg_21 = 16'hAAAA;
    ctrlComm_cphsh0VReg_22 = 16'hAAAA;
    ctrlComm_cphsh0VReg_23 = 16'hAAAA;
    ctrlComm_cphsh0VReg_24 = 16'hAAAA;
    ctrlComm_cphsh0VReg_25 = 16'hAAAA;
    ctrlComm_cphsh0VReg_26 = 16'hAAAA;
    ctrlComm_cphsh0VReg_27 = 16'hAAAA;
    ctrlComm_cphsh0VReg_28 = 16'hAAAA;
    ctrlComm_cphsh0VReg_29 = 16'hAAAA;
    ctrlComm_cphsh0VReg_3 = 16'hAAAA;
    ctrlComm_cphsh0VReg_30 = 16'hAAAA;
    ctrlComm_cphsh0VReg_31 = 16'hAAAA;
    ctrlComm_cphsh0VReg_32 = 16'hAAAA;
    ctrlComm_cphsh0VReg_33 = 16'hAAAA;
    ctrlComm_cphsh0VReg_34 = 16'hAAAA;
    ctrlComm_cphsh0VReg_35 = 16'hAAAA;
    ctrlComm_cphsh0VReg_36 = 16'hAAAA;
    ctrlComm_cphsh0VReg_37 = 16'hAAAA;
    ctrlComm_cphsh0VReg_38 = 16'hAAAA;
    ctrlComm_cphsh0VReg_39 = 16'hAAAA;
    ctrlComm_cphsh0VReg_4 = 16'hAAAA;
    ctrlComm_cphsh0VReg_40 = 16'hAAAA;
    ctrlComm_cphsh0VReg_41 = 16'hAAAA;
    ctrlComm_cphsh0VReg_42 = 16'hAAAA;
    ctrlComm_cphsh0VReg_43 = 16'hAAAA;
    ctrlComm_cphsh0VReg_44 = 16'hAAAA;
    ctrlComm_cphsh0VReg_45 = 16'hAAAA;
    ctrlComm_cphsh0VReg_46 = 16'hAAAA;
    ctrlComm_cphsh0VReg_47 = 16'hAAAA;
    ctrlComm_cphsh0VReg_48 = 16'hAAAA;
    ctrlComm_cphsh0VReg_49 = 16'hAAAA;
    ctrlComm_cphsh0VReg_5 = 16'hAAAA;
    ctrlComm_cphsh0VReg_50 = 16'hAAAA;
    ctrlComm_cphsh0VReg_51 = 16'hAAAA;
    ctrlComm_cphsh0VReg_52 = 16'hAAAA;
    ctrlComm_cphsh0VReg_53 = 16'hAAAA;
    ctrlComm_cphsh0VReg_54 = 16'hAAAA;
    ctrlComm_cphsh0VReg_55 = 16'hAAAA;
    ctrlComm_cphsh0VReg_56 = 16'hAAAA;
    ctrlComm_cphsh0VReg_57 = 16'hAAAA;
    ctrlComm_cphsh0VReg_58 = 16'hAAAA;
    ctrlComm_cphsh0VReg_59 = 16'hAAAA;
    ctrlComm_cphsh0VReg_6 = 16'hAAAA;
    ctrlComm_cphsh0VReg_60 = 16'hAAAA;
    ctrlComm_cphsh0VReg_61 = 16'hAAAA;
    ctrlComm_cphsh0VReg_62 = 16'hAAAA;
    ctrlComm_cphsh0VReg_63 = 16'hAAAA;
    ctrlComm_cphsh0VReg_64 = 16'hAAAA;
    ctrlComm_cphsh0VReg_65 = 16'hAAAA;
    ctrlComm_cphsh0VReg_66 = 16'hAAAA;
    ctrlComm_cphsh0VReg_67 = 16'hAAAA;
    ctrlComm_cphsh0VReg_68 = 16'hAAAA;
    ctrlComm_cphsh0VReg_69 = 16'hAAAA;
    ctrlComm_cphsh0VReg_7 = 16'hAAAA;
    ctrlComm_cphsh0VReg_70 = 16'hAAAA;
    ctrlComm_cphsh0VReg_71 = 16'hAAAA;
    ctrlComm_cphsh0VReg_72 = 16'hAAAA;
    ctrlComm_cphsh0VReg_73 = 16'hAAAA;
    ctrlComm_cphsh0VReg_74 = 16'hAAAA;
    ctrlComm_cphsh0VReg_75 = 16'hAAAA;
    ctrlComm_cphsh0VReg_76 = 16'hAAAA;
    ctrlComm_cphsh0VReg_77 = 16'hAAAA;
    ctrlComm_cphsh0VReg_78 = 16'hAAAA;
    ctrlComm_cphsh0VReg_79 = 16'hAAAA;
    ctrlComm_cphsh0VReg_8 = 16'hAAAA;
    ctrlComm_cphsh0VReg_80 = 16'hAAAA;
    ctrlComm_cphsh0VReg_81 = 16'hAAAA;
    ctrlComm_cphsh0VReg_82 = 16'hAAAA;
    ctrlComm_cphsh0VReg_83 = 16'hAAAA;
    ctrlComm_cphsh0VReg_84 = 16'hAAAA;
    ctrlComm_cphsh0VReg_85 = 16'hAAAA;
    ctrlComm_cphsh0VReg_86 = 16'hAAAA;
    ctrlComm_cphsh0VReg_87 = 16'hAAAA;
    ctrlComm_cphsh0VReg_88 = 16'hAAAA;
    ctrlComm_cphsh0VReg_89 = 16'hAAAA;
    ctrlComm_cphsh0VReg_9 = 16'hAAAA;
    ctrlComm_cphsh0VReg_90 = 16'hAAAA;
    ctrlComm_cphsh0VReg_91 = 16'hAAAA;
    ctrlComm_cphsh0VReg_92 = 16'hAAAA;
    ctrlComm_cphsh0VReg_93 = 16'hAAAA;
    ctrlComm_cphsh0VReg_94 = 16'hAAAA;
    ctrlComm_cphsh0VReg_95 = 16'hAAAA;
    ctrlComm_cphsh0VReg_96 = 16'hAAAA;
    ctrlComm_cphsh0VReg_97 = 16'hAAAA;
    ctrlComm_cphsh0VReg_98 = 16'hAAAA;
    ctrlComm_cphsh0VReg_99 = 16'hAAAA;
    ctrlComm_cphsh1VReg_0 = 16'hAAAA;
    ctrlComm_cphsh1VReg_1 = 16'hAAAA;
    ctrlComm_cphsh1VReg_10 = 16'hAAAA;
    ctrlComm_cphsh1VReg_11 = 16'hAAAA;
    ctrlComm_cphsh1VReg_12 = 16'hAAAA;
    ctrlComm_cphsh1VReg_13 = 16'hAAAA;
    ctrlComm_cphsh1VReg_14 = 16'hAAAA;
    ctrlComm_cphsh1VReg_15 = 16'hAAAA;
    ctrlComm_cphsh1VReg_16 = 16'hAAAA;
    ctrlComm_cphsh1VReg_17 = 16'hAAAA;
    ctrlComm_cphsh1VReg_18 = 16'hAAAA;
    ctrlComm_cphsh1VReg_19 = 16'hAAAA;
    ctrlComm_cphsh1VReg_2 = 16'hAAAA;
    ctrlComm_cphsh1VReg_20 = 16'hAAAA;
    ctrlComm_cphsh1VReg_21 = 16'hAAAA;
    ctrlComm_cphsh1VReg_22 = 16'hAAAA;
    ctrlComm_cphsh1VReg_23 = 16'hAAAA;
    ctrlComm_cphsh1VReg_24 = 16'hAAAA;
    ctrlComm_cphsh1VReg_25 = 16'hAAAA;
    ctrlComm_cphsh1VReg_26 = 16'hAAAA;
    ctrlComm_cphsh1VReg_27 = 16'hAAAA;
    ctrlComm_cphsh1VReg_28 = 16'hAAAA;
    ctrlComm_cphsh1VReg_29 = 16'hAAAA;
    ctrlComm_cphsh1VReg_3 = 16'hAAAA;
    ctrlComm_cphsh1VReg_30 = 16'hAAAA;
    ctrlComm_cphsh1VReg_31 = 16'hAAAA;
    ctrlComm_cphsh1VReg_32 = 16'hAAAA;
    ctrlComm_cphsh1VReg_33 = 16'hAAAA;
    ctrlComm_cphsh1VReg_34 = 16'hAAAA;
    ctrlComm_cphsh1VReg_35 = 16'hAAAA;
    ctrlComm_cphsh1VReg_36 = 16'hAAAA;
    ctrlComm_cphsh1VReg_37 = 16'hAAAA;
    ctrlComm_cphsh1VReg_38 = 16'hAAAA;
    ctrlComm_cphsh1VReg_39 = 16'hAAAA;
    ctrlComm_cphsh1VReg_4 = 16'hAAAA;
    ctrlComm_cphsh1VReg_40 = 16'hAAAA;
    ctrlComm_cphsh1VReg_41 = 16'hAAAA;
    ctrlComm_cphsh1VReg_42 = 16'hAAAA;
    ctrlComm_cphsh1VReg_43 = 16'hAAAA;
    ctrlComm_cphsh1VReg_44 = 16'hAAAA;
    ctrlComm_cphsh1VReg_45 = 16'hAAAA;
    ctrlComm_cphsh1VReg_46 = 16'hAAAA;
    ctrlComm_cphsh1VReg_47 = 16'hAAAA;
    ctrlComm_cphsh1VReg_48 = 16'hAAAA;
    ctrlComm_cphsh1VReg_49 = 16'hAAAA;
    ctrlComm_cphsh1VReg_5 = 16'hAAAA;
    ctrlComm_cphsh1VReg_50 = 16'hAAAA;
    ctrlComm_cphsh1VReg_51 = 16'hAAAA;
    ctrlComm_cphsh1VReg_52 = 16'hAAAA;
    ctrlComm_cphsh1VReg_53 = 16'hAAAA;
    ctrlComm_cphsh1VReg_54 = 16'hAAAA;
    ctrlComm_cphsh1VReg_55 = 16'hAAAA;
    ctrlComm_cphsh1VReg_56 = 16'hAAAA;
    ctrlComm_cphsh1VReg_57 = 16'hAAAA;
    ctrlComm_cphsh1VReg_58 = 16'hAAAA;
    ctrlComm_cphsh1VReg_59 = 16'hAAAA;
    ctrlComm_cphsh1VReg_6 = 16'hAAAA;
    ctrlComm_cphsh1VReg_60 = 16'hAAAA;
    ctrlComm_cphsh1VReg_61 = 16'hAAAA;
    ctrlComm_cphsh1VReg_62 = 16'hAAAA;
    ctrlComm_cphsh1VReg_63 = 16'hAAAA;
    ctrlComm_cphsh1VReg_64 = 16'hAAAA;
    ctrlComm_cphsh1VReg_65 = 16'hAAAA;
    ctrlComm_cphsh1VReg_66 = 16'hAAAA;
    ctrlComm_cphsh1VReg_67 = 16'hAAAA;
    ctrlComm_cphsh1VReg_68 = 16'hAAAA;
    ctrlComm_cphsh1VReg_69 = 16'hAAAA;
    ctrlComm_cphsh1VReg_7 = 16'hAAAA;
    ctrlComm_cphsh1VReg_70 = 16'hAAAA;
    ctrlComm_cphsh1VReg_71 = 16'hAAAA;
    ctrlComm_cphsh1VReg_72 = 16'hAAAA;
    ctrlComm_cphsh1VReg_73 = 16'hAAAA;
    ctrlComm_cphsh1VReg_74 = 16'hAAAA;
    ctrlComm_cphsh1VReg_75 = 16'hAAAA;
    ctrlComm_cphsh1VReg_76 = 16'hAAAA;
    ctrlComm_cphsh1VReg_77 = 16'hAAAA;
    ctrlComm_cphsh1VReg_78 = 16'hAAAA;
    ctrlComm_cphsh1VReg_79 = 16'hAAAA;
    ctrlComm_cphsh1VReg_8 = 16'hAAAA;
    ctrlComm_cphsh1VReg_80 = 16'hAAAA;
    ctrlComm_cphsh1VReg_81 = 16'hAAAA;
    ctrlComm_cphsh1VReg_82 = 16'hAAAA;
    ctrlComm_cphsh1VReg_83 = 16'hAAAA;
    ctrlComm_cphsh1VReg_84 = 16'hAAAA;
    ctrlComm_cphsh1VReg_85 = 16'hAAAA;
    ctrlComm_cphsh1VReg_86 = 16'hAAAA;
    ctrlComm_cphsh1VReg_87 = 16'hAAAA;
    ctrlComm_cphsh1VReg_88 = 16'hAAAA;
    ctrlComm_cphsh1VReg_89 = 16'hAAAA;
    ctrlComm_cphsh1VReg_9 = 16'hAAAA;
    ctrlComm_cphsh1VReg_90 = 16'hAAAA;
    ctrlComm_cphsh1VReg_91 = 16'hAAAA;
    ctrlComm_cphsh1VReg_92 = 16'hAAAA;
    ctrlComm_cphsh1VReg_93 = 16'hAAAA;
    ctrlComm_cphsh1VReg_94 = 16'hAAAA;
    ctrlComm_cphsh1VReg_95 = 16'hAAAA;
    ctrlComm_cphsh1VReg_96 = 16'hAAAA;
    ctrlComm_cphsh1VReg_97 = 16'hAAAA;
    ctrlComm_cphsh1VReg_98 = 16'hAAAA;
    ctrlComm_cphsh1VReg_99 = 16'hAAAA;
    ctrlComm_encDoneProcessed = 1'h0;
    ctrlComm_encState = 2'h2;
    ctrlComm_plnsh0VReg_0 = 16'hAAAA;
    ctrlComm_plnsh0VReg_1 = 16'hAAAA;
    ctrlComm_plnsh0VReg_10 = 16'hAAAA;
    ctrlComm_plnsh0VReg_11 = 16'hAAAA;
    ctrlComm_plnsh0VReg_12 = 16'hAAAA;
    ctrlComm_plnsh0VReg_13 = 16'hAAAA;
    ctrlComm_plnsh0VReg_14 = 16'hAAAA;
    ctrlComm_plnsh0VReg_15 = 16'hAAAA;
    ctrlComm_plnsh0VReg_16 = 16'hAAAA;
    ctrlComm_plnsh0VReg_17 = 16'hAAAA;
    ctrlComm_plnsh0VReg_18 = 16'hAAAA;
    ctrlComm_plnsh0VReg_19 = 16'hAAAA;
    ctrlComm_plnsh0VReg_2 = 16'hAAAA;
    ctrlComm_plnsh0VReg_20 = 16'hAAAA;
    ctrlComm_plnsh0VReg_21 = 16'hAAAA;
    ctrlComm_plnsh0VReg_22 = 16'hAAAA;
    ctrlComm_plnsh0VReg_23 = 16'hAAAA;
    ctrlComm_plnsh0VReg_24 = 16'hAAAA;
    ctrlComm_plnsh0VReg_25 = 16'hAAAA;
    ctrlComm_plnsh0VReg_26 = 16'hAAAA;
    ctrlComm_plnsh0VReg_27 = 16'hAAAA;
    ctrlComm_plnsh0VReg_28 = 16'hAAAA;
    ctrlComm_plnsh0VReg_29 = 16'hAAAA;
    ctrlComm_plnsh0VReg_3 = 16'hAAAA;
    ctrlComm_plnsh0VReg_30 = 16'hAAAA;
    ctrlComm_plnsh0VReg_31 = 16'hAAAA;
    ctrlComm_plnsh0VReg_32 = 16'hAAAA;
    ctrlComm_plnsh0VReg_33 = 16'hAAAA;
    ctrlComm_plnsh0VReg_34 = 16'hAAAA;
    ctrlComm_plnsh0VReg_35 = 16'hAAAA;
    ctrlComm_plnsh0VReg_36 = 16'hAAAA;
    ctrlComm_plnsh0VReg_37 = 16'hAAAA;
    ctrlComm_plnsh0VReg_38 = 16'hAAAA;
    ctrlComm_plnsh0VReg_39 = 16'hAAAA;
    ctrlComm_plnsh0VReg_4 = 16'hAAAA;
    ctrlComm_plnsh0VReg_40 = 16'hAAAA;
    ctrlComm_plnsh0VReg_41 = 16'hAAAA;
    ctrlComm_plnsh0VReg_42 = 16'hAAAA;
    ctrlComm_plnsh0VReg_43 = 16'hAAAA;
    ctrlComm_plnsh0VReg_44 = 16'hAAAA;
    ctrlComm_plnsh0VReg_45 = 16'hAAAA;
    ctrlComm_plnsh0VReg_46 = 16'hAAAA;
    ctrlComm_plnsh0VReg_47 = 16'hAAAA;
    ctrlComm_plnsh0VReg_48 = 16'hAAAA;
    ctrlComm_plnsh0VReg_49 = 16'hAAAA;
    ctrlComm_plnsh0VReg_5 = 16'hAAAA;
    ctrlComm_plnsh0VReg_50 = 16'hAAAA;
    ctrlComm_plnsh0VReg_51 = 16'hAAAA;
    ctrlComm_plnsh0VReg_52 = 16'hAAAA;
    ctrlComm_plnsh0VReg_53 = 16'hAAAA;
    ctrlComm_plnsh0VReg_54 = 16'hAAAA;
    ctrlComm_plnsh0VReg_55 = 16'hAAAA;
    ctrlComm_plnsh0VReg_56 = 16'hAAAA;
    ctrlComm_plnsh0VReg_57 = 16'hAAAA;
    ctrlComm_plnsh0VReg_58 = 16'hAAAA;
    ctrlComm_plnsh0VReg_59 = 16'hAAAA;
    ctrlComm_plnsh0VReg_6 = 16'hAAAA;
    ctrlComm_plnsh0VReg_60 = 16'hAAAA;
    ctrlComm_plnsh0VReg_61 = 16'hAAAA;
    ctrlComm_plnsh0VReg_62 = 16'hAAAA;
    ctrlComm_plnsh0VReg_63 = 16'hAAAA;
    ctrlComm_plnsh0VReg_64 = 16'hAAAA;
    ctrlComm_plnsh0VReg_65 = 16'hAAAA;
    ctrlComm_plnsh0VReg_66 = 16'hAAAA;
    ctrlComm_plnsh0VReg_67 = 16'hAAAA;
    ctrlComm_plnsh0VReg_68 = 16'hAAAA;
    ctrlComm_plnsh0VReg_69 = 16'hAAAA;
    ctrlComm_plnsh0VReg_7 = 16'hAAAA;
    ctrlComm_plnsh0VReg_70 = 16'hAAAA;
    ctrlComm_plnsh0VReg_71 = 16'hAAAA;
    ctrlComm_plnsh0VReg_72 = 16'hAAAA;
    ctrlComm_plnsh0VReg_73 = 16'hAAAA;
    ctrlComm_plnsh0VReg_74 = 16'hAAAA;
    ctrlComm_plnsh0VReg_75 = 16'hAAAA;
    ctrlComm_plnsh0VReg_76 = 16'hAAAA;
    ctrlComm_plnsh0VReg_77 = 16'hAAAA;
    ctrlComm_plnsh0VReg_78 = 16'hAAAA;
    ctrlComm_plnsh0VReg_79 = 16'hAAAA;
    ctrlComm_plnsh0VReg_8 = 16'hAAAA;
    ctrlComm_plnsh0VReg_80 = 16'hAAAA;
    ctrlComm_plnsh0VReg_81 = 16'hAAAA;
    ctrlComm_plnsh0VReg_82 = 16'hAAAA;
    ctrlComm_plnsh0VReg_83 = 16'hAAAA;
    ctrlComm_plnsh0VReg_84 = 16'hAAAA;
    ctrlComm_plnsh0VReg_85 = 16'hAAAA;
    ctrlComm_plnsh0VReg_86 = 16'hAAAA;
    ctrlComm_plnsh0VReg_87 = 16'hAAAA;
    ctrlComm_plnsh0VReg_88 = 16'hAAAA;
    ctrlComm_plnsh0VReg_89 = 16'hAAAA;
    ctrlComm_plnsh0VReg_9 = 16'hAAAA;
    ctrlComm_plnsh0VReg_90 = 16'hAAAA;
    ctrlComm_plnsh0VReg_91 = 16'hAAAA;
    ctrlComm_plnsh0VReg_92 = 16'hAAAA;
    ctrlComm_plnsh0VReg_93 = 16'hAAAA;
    ctrlComm_plnsh0VReg_94 = 16'hAAAA;
    ctrlComm_plnsh0VReg_95 = 16'hAAAA;
    ctrlComm_plnsh0VReg_96 = 16'hAAAA;
    ctrlComm_plnsh0VReg_97 = 16'hAAAA;
    ctrlComm_plnsh0VReg_98 = 16'hAAAA;
    ctrlComm_plnsh0VReg_99 = 16'hAAAA;
    ctrlComm_plnsh1VReg_0 = 16'hAAAA;
    ctrlComm_plnsh1VReg_1 = 16'hAAAA;
    ctrlComm_plnsh1VReg_10 = 16'hAAAA;
    ctrlComm_plnsh1VReg_11 = 16'hAAAA;
    ctrlComm_plnsh1VReg_12 = 16'hAAAA;
    ctrlComm_plnsh1VReg_13 = 16'hAAAA;
    ctrlComm_plnsh1VReg_14 = 16'hAAAA;
    ctrlComm_plnsh1VReg_15 = 16'hAAAA;
    ctrlComm_plnsh1VReg_16 = 16'hAAAA;
    ctrlComm_plnsh1VReg_17 = 16'hAAAA;
    ctrlComm_plnsh1VReg_18 = 16'hAAAA;
    ctrlComm_plnsh1VReg_19 = 16'hAAAA;
    ctrlComm_plnsh1VReg_2 = 16'hAAAA;
    ctrlComm_plnsh1VReg_20 = 16'hAAAA;
    ctrlComm_plnsh1VReg_21 = 16'hAAAA;
    ctrlComm_plnsh1VReg_22 = 16'hAAAA;
    ctrlComm_plnsh1VReg_23 = 16'hAAAA;
    ctrlComm_plnsh1VReg_24 = 16'hAAAA;
    ctrlComm_plnsh1VReg_25 = 16'hAAAA;
    ctrlComm_plnsh1VReg_26 = 16'hAAAA;
    ctrlComm_plnsh1VReg_27 = 16'hAAAA;
    ctrlComm_plnsh1VReg_28 = 16'hAAAA;
    ctrlComm_plnsh1VReg_29 = 16'hAAAA;
    ctrlComm_plnsh1VReg_3 = 16'hAAAA;
    ctrlComm_plnsh1VReg_30 = 16'hAAAA;
    ctrlComm_plnsh1VReg_31 = 16'hAAAA;
    ctrlComm_plnsh1VReg_32 = 16'hAAAA;
    ctrlComm_plnsh1VReg_33 = 16'hAAAA;
    ctrlComm_plnsh1VReg_34 = 16'hAAAA;
    ctrlComm_plnsh1VReg_35 = 16'hAAAA;
    ctrlComm_plnsh1VReg_36 = 16'hAAAA;
    ctrlComm_plnsh1VReg_37 = 16'hAAAA;
    ctrlComm_plnsh1VReg_38 = 16'hAAAA;
    ctrlComm_plnsh1VReg_39 = 16'hAAAA;
    ctrlComm_plnsh1VReg_4 = 16'hAAAA;
    ctrlComm_plnsh1VReg_40 = 16'hAAAA;
    ctrlComm_plnsh1VReg_41 = 16'hAAAA;
    ctrlComm_plnsh1VReg_42 = 16'hAAAA;
    ctrlComm_plnsh1VReg_43 = 16'hAAAA;
    ctrlComm_plnsh1VReg_44 = 16'hAAAA;
    ctrlComm_plnsh1VReg_45 = 16'hAAAA;
    ctrlComm_plnsh1VReg_46 = 16'hAAAA;
    ctrlComm_plnsh1VReg_47 = 16'hAAAA;
    ctrlComm_plnsh1VReg_48 = 16'hAAAA;
    ctrlComm_plnsh1VReg_49 = 16'hAAAA;
    ctrlComm_plnsh1VReg_5 = 16'hAAAA;
    ctrlComm_plnsh1VReg_50 = 16'hAAAA;
    ctrlComm_plnsh1VReg_51 = 16'hAAAA;
    ctrlComm_plnsh1VReg_52 = 16'hAAAA;
    ctrlComm_plnsh1VReg_53 = 16'hAAAA;
    ctrlComm_plnsh1VReg_54 = 16'hAAAA;
    ctrlComm_plnsh1VReg_55 = 16'hAAAA;
    ctrlComm_plnsh1VReg_56 = 16'hAAAA;
    ctrlComm_plnsh1VReg_57 = 16'hAAAA;
    ctrlComm_plnsh1VReg_58 = 16'hAAAA;
    ctrlComm_plnsh1VReg_59 = 16'hAAAA;
    ctrlComm_plnsh1VReg_6 = 16'hAAAA;
    ctrlComm_plnsh1VReg_60 = 16'hAAAA;
    ctrlComm_plnsh1VReg_61 = 16'hAAAA;
    ctrlComm_plnsh1VReg_62 = 16'hAAAA;
    ctrlComm_plnsh1VReg_63 = 16'hAAAA;
    ctrlComm_plnsh1VReg_64 = 16'hAAAA;
    ctrlComm_plnsh1VReg_65 = 16'hAAAA;
    ctrlComm_plnsh1VReg_66 = 16'hAAAA;
    ctrlComm_plnsh1VReg_67 = 16'hAAAA;
    ctrlComm_plnsh1VReg_68 = 16'hAAAA;
    ctrlComm_plnsh1VReg_69 = 16'hAAAA;
    ctrlComm_plnsh1VReg_7 = 16'hAAAA;
    ctrlComm_plnsh1VReg_70 = 16'hAAAA;
    ctrlComm_plnsh1VReg_71 = 16'hAAAA;
    ctrlComm_plnsh1VReg_72 = 16'hAAAA;
    ctrlComm_plnsh1VReg_73 = 16'hAAAA;
    ctrlComm_plnsh1VReg_74 = 16'hAAAA;
    ctrlComm_plnsh1VReg_75 = 16'hAAAA;
    ctrlComm_plnsh1VReg_76 = 16'hAAAA;
    ctrlComm_plnsh1VReg_77 = 16'hAAAA;
    ctrlComm_plnsh1VReg_78 = 16'hAAAA;
    ctrlComm_plnsh1VReg_79 = 16'hAAAA;
    ctrlComm_plnsh1VReg_8 = 16'hAAAA;
    ctrlComm_plnsh1VReg_80 = 16'hAAAA;
    ctrlComm_plnsh1VReg_81 = 16'hAAAA;
    ctrlComm_plnsh1VReg_82 = 16'hAAAA;
    ctrlComm_plnsh1VReg_83 = 16'hAAAA;
    ctrlComm_plnsh1VReg_84 = 16'hAAAA;
    ctrlComm_plnsh1VReg_85 = 16'hAAAA;
    ctrlComm_plnsh1VReg_86 = 16'hAAAA;
    ctrlComm_plnsh1VReg_87 = 16'hAAAA;
    ctrlComm_plnsh1VReg_88 = 16'hAAAA;
    ctrlComm_plnsh1VReg_89 = 16'hAAAA;
    ctrlComm_plnsh1VReg_9 = 16'hAAAA;
    ctrlComm_plnsh1VReg_90 = 16'hAAAA;
    ctrlComm_plnsh1VReg_91 = 16'hAAAA;
    ctrlComm_plnsh1VReg_92 = 16'hAAAA;
    ctrlComm_plnsh1VReg_93 = 16'hAAAA;
    ctrlComm_plnsh1VReg_94 = 16'hAAAA;
    ctrlComm_plnsh1VReg_95 = 16'hAAAA;
    ctrlComm_plnsh1VReg_96 = 16'hAAAA;
    ctrlComm_plnsh1VReg_97 = 16'hAAAA;
    ctrlComm_plnsh1VReg_98 = 16'hAAAA;
    ctrlComm_plnsh1VReg_99 = 16'hAAAA;
    ctrlComm_random_cnt = 5'h0A;
    ctrlComm_rdiSwitch = 1'h0;
    ctrlComm_seedVReg_0 = 16'hAAAA;
    ctrlComm_seedVReg_1 = 16'hAAAA;
    ctrlComm_seedVReg_2 = 16'hAAAA;
    ctrlComm_seedVReg_3 = 16'hAAAA;
    ctrlComm_seedVReg_4 = 16'hAAAA;
    ctrlComm_seedVReg_5 = 16'hAAAA;
    ctrlComm_seedVReg_6 = 16'hAAAA;
    ctrlComm_seedVReg_7 = 16'hAAAA;
    ctrlComm_seedVReg_8 = 16'hAAAA;
    ctrlComm_seedVReg_9 = 16'hAAAA;
    ctrlComm_state = 2'h2;
    deviceRdyCnt = 2'h2;
    deviceRdyReg = 1'h0;
    m2cCDCProc_dataReg = 16'hAAAA;
    m2cCDCProc_doneLvlReg1 = 1'h0;
    m2cCDCProc_doneLvlReg2 = 1'h0;
    m2cCDCProc_doneLvlReg3 = 1'h0;
    m2cCDCProc_enLvlReg = 1'h0;
    m2cCDCProc_txRdy = 1'h0;
    randManage_addr = 16'hAAAA;
    randManage_prng_state = 2'h2;
    randManage_prng_triviumCore_regA = 93'h0AAAAAAAAAAAAAAAAAAAAAAA;
    randManage_prng_triviumCore_regB = 84'hAAAAAAAAAAAAAAAAAAAAA;
    randManage_prng_triviumCore_regC = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    randManage_prng_warmUpCnt = 10'h2AA;
    randManage_rdi_0 = 2'h2;
    randManage_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk)
  begin
    #0;
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrlComm_encStateTrans1 && ctrlComm_encState == 2'd3)
	$display("Error: \"MainFPGA.bsv\", line 36, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ctrlComm_encStateTrans1] and\n  [RL_ctrlComm_encStateTrans2] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (randManage_prng_state == 2'd1 &&
	  WILL_FIRE_RL_ctrlComm_encDoneProcess)
	$display("Error: \"MainFPGA.bsv\", line 33, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_prng_stateWarmUp]\n  and [RL_ctrlComm_encDoneProcess] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_randManage_stateRandGen && ctrlComm_encState == 2'd3)
	$display("Error: \"MainFPGA.bsv\", line 36, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_stateRandGen] and\n  [RL_ctrlComm_encStateTrans2] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_randManage_stateRandGen &&
	  WILL_FIRE_RL_ctrlComm_encStateTrans1)
	$display("Error: \"MainFPGA.bsv\", line 36, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_stateRandGen] and\n  [RL_ctrlComm_encStateTrans1] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_randManage_stateRandGen &&
	  WILL_FIRE_RL_ctrlComm_encDoneProcess)
	$display("Error: \"MainFPGA.bsv\", line 35, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_stateRandGen] and\n  [RL_ctrlComm_encDoneProcess] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_randManage_stateRandGen &&
	  WILL_FIRE_RL_randManage_stateWarmUp)
	$display("Error: \"MainFPGA.bsv\", line 35, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_stateRandGen] and\n  [RL_randManage_stateWarmUp] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_randManage_stateRandGen &&
	  randManage_prng_state == 2'd1)
	$display("Error: \"RandManage.bsv\", line 53, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_randManage_stateRandGen] and\n  [RL_randManage_prng_stateWarmUp] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrlComm_encDoneProcess &&
	  WILL_FIRE_RL_randManage_stateWarmUp)
	$display("Error: \"MainFPGA.bsv\", line 35, column 64: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ctrlComm_encDoneProcess] and\n  [RL_randManage_stateWarmUp] ) fired in the same clock cycle.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrlComm_encDoneProcess &&
	  WILL_FIRE_RL_ctrlComm_encStateTrans1)
	$display("Error: \"CtrlComm.bsv\", line 171, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ctrlComm_encDoneProcess] and\n  [RL_ctrlComm_encStateTrans1] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMainFPGA

