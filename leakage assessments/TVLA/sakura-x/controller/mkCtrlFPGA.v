//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Mon Nov 20 21:09:38 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// usb_dout                       O     8 reg
// usb_rd                         O     1 reg
// usb_wr                         O     1 reg
// usb_dio_oe                     O     1 reg
// c2m_dout                       O    16 reg
// c2m_en_lvl                     O     1 reg
// m2c_done_lvl                   O     1 reg
// clk                            I     1 clock
// rst_n                          I     1 reset
// usb_din                        I     8 reg
// usb_rxf                        I     1 reg
// usb_txe                        I     1 reg
// c2m_done_lvl                   I     1 reg
// m2c_din                        I    16 reg
// m2c_en_lvl                     I     1 reg
// device_rdy                     I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCtrlFPGA(clk,
		  rst_n,

		  usb_din,
		  usb_rxf,
		  usb_txe,

		  usb_dout,

		  usb_rd,

		  usb_wr,

		  usb_dio_oe,

		  c2m_dout,

		  c2m_en_lvl,

		  c2m_done_lvl,

		  m2c_din,
		  m2c_en_lvl,

		  m2c_done_lvl,

		  device_rdy);
  input  clk;
  input  rst_n;

  // action method usb_put
  input  [7 : 0] usb_din;
  input  usb_rxf;
  input  usb_txe;

  // value method usb_dout
  output [7 : 0] usb_dout;

  // value method usb_rd
  output usb_rd;

  // value method usb_wr
  output usb_wr;

  // value method usb_dioOe
  output usb_dio_oe;

  // value method cdcPort_c2m_dout
  output [15 : 0] c2m_dout;

  // value method cdcPort_c2m_enLvl
  output c2m_en_lvl;

  // action method cdcPort_c2m_put
  input  c2m_done_lvl;

  // action method cdcPort_m2c_put
  input  [15 : 0] m2c_din;
  input  m2c_en_lvl;

  // value method cdcPort_m2c_doneLvl
  output m2c_done_lvl;

  // action method cdcPort_put
  input  device_rdy;

  // signals for module outputs
  wire [15 : 0] c2m_dout;
  wire [7 : 0] usb_dout;
  wire c2m_en_lvl, m2c_done_lvl, usb_dio_oe, usb_rd, usb_wr;

  // inlined wires
  wire _write_RL_controller_ttestStateFix$EN_controller_ttestState$wget;

  // register cdcProc_c2mPktReg
  reg [15 : 0] cdcProc_c2mPktReg;
  wire [15 : 0] cdcProc_c2mPktReg$D_IN;
  wire cdcProc_c2mPktReg$EN;

  // register cdcProc_devRdyReg1
  reg cdcProc_devRdyReg1;
  wire cdcProc_devRdyReg1$D_IN, cdcProc_devRdyReg1$EN;

  // register cdcProc_devRdyReg2
  reg cdcProc_devRdyReg2;
  wire cdcProc_devRdyReg2$D_IN, cdcProc_devRdyReg2$EN;

  // register cdcProc_doneLvlReg
  reg cdcProc_doneLvlReg;
  wire cdcProc_doneLvlReg$D_IN, cdcProc_doneLvlReg$EN;

  // register cdcProc_doneLvlReg1
  reg cdcProc_doneLvlReg1;
  wire cdcProc_doneLvlReg1$D_IN, cdcProc_doneLvlReg1$EN;

  // register cdcProc_doneLvlReg2
  reg cdcProc_doneLvlReg2;
  wire cdcProc_doneLvlReg2$D_IN, cdcProc_doneLvlReg2$EN;

  // register cdcProc_doneLvlReg3
  reg cdcProc_doneLvlReg3;
  wire cdcProc_doneLvlReg3$D_IN, cdcProc_doneLvlReg3$EN;

  // register cdcProc_enLvlReg
  reg cdcProc_enLvlReg;
  wire cdcProc_enLvlReg$D_IN, cdcProc_enLvlReg$EN;

  // register cdcProc_enLvlReg1
  reg cdcProc_enLvlReg1;
  wire cdcProc_enLvlReg1$D_IN, cdcProc_enLvlReg1$EN;

  // register cdcProc_enLvlReg2
  reg cdcProc_enLvlReg2;
  wire cdcProc_enLvlReg2$D_IN, cdcProc_enLvlReg2$EN;

  // register cdcProc_enLvlReg3
  reg cdcProc_enLvlReg3;
  wire cdcProc_enLvlReg3$D_IN, cdcProc_enLvlReg3$EN;

  // register cdcProc_m2cMsgReg
  reg [15 : 0] cdcProc_m2cMsgReg;
  wire [15 : 0] cdcProc_m2cMsgReg$D_IN;
  wire cdcProc_m2cMsgReg$EN;

  // register cdcProc_rxVld
  reg cdcProc_rxVld;
  wire cdcProc_rxVld$D_IN, cdcProc_rxVld$EN;

  // register cdcProc_txRdy
  reg cdcProc_txRdy;
  wire cdcProc_txRdy$D_IN, cdcProc_txRdy$EN;

  // register controller_coinInd
  reg [3 : 0] controller_coinInd;
  reg [3 : 0] controller_coinInd$D_IN;
  wire controller_coinInd$EN;

  // register controller_coinsChk
  reg [15 : 0] controller_coinsChk;
  wire [15 : 0] controller_coinsChk$D_IN;
  wire controller_coinsChk$EN;

  // register controller_curPlnInd
  reg [6 : 0] controller_curPlnInd;
  reg [6 : 0] controller_curPlnInd$D_IN;
  wire controller_curPlnInd$EN;

  // register controller_curSeqNum
  reg [13 : 0] controller_curSeqNum;
  wire [13 : 0] controller_curSeqNum$D_IN;
  wire controller_curSeqNum$EN;

  // register controller_curShareInd
  reg controller_curShareInd;
  reg controller_curShareInd$D_IN;
  wire controller_curShareInd$EN;

  // register controller_fixPlnSh0Mask
  reg [15 : 0] controller_fixPlnSh0Mask;
  wire [15 : 0] controller_fixPlnSh0Mask$D_IN;
  wire controller_fixPlnSh0Mask$EN;

  // register controller_fixPln_0
  reg [15 : 0] controller_fixPln_0;
  wire [15 : 0] controller_fixPln_0$D_IN;
  wire controller_fixPln_0$EN;

  // register controller_fixPln_1
  reg [15 : 0] controller_fixPln_1;
  wire [15 : 0] controller_fixPln_1$D_IN;
  wire controller_fixPln_1$EN;

  // register controller_fixPln_10
  reg [15 : 0] controller_fixPln_10;
  wire [15 : 0] controller_fixPln_10$D_IN;
  wire controller_fixPln_10$EN;

  // register controller_fixPln_11
  reg [15 : 0] controller_fixPln_11;
  wire [15 : 0] controller_fixPln_11$D_IN;
  wire controller_fixPln_11$EN;

  // register controller_fixPln_12
  reg [15 : 0] controller_fixPln_12;
  wire [15 : 0] controller_fixPln_12$D_IN;
  wire controller_fixPln_12$EN;

  // register controller_fixPln_13
  reg [15 : 0] controller_fixPln_13;
  wire [15 : 0] controller_fixPln_13$D_IN;
  wire controller_fixPln_13$EN;

  // register controller_fixPln_14
  reg [15 : 0] controller_fixPln_14;
  wire [15 : 0] controller_fixPln_14$D_IN;
  wire controller_fixPln_14$EN;

  // register controller_fixPln_15
  reg [15 : 0] controller_fixPln_15;
  wire [15 : 0] controller_fixPln_15$D_IN;
  wire controller_fixPln_15$EN;

  // register controller_fixPln_16
  reg [15 : 0] controller_fixPln_16;
  wire [15 : 0] controller_fixPln_16$D_IN;
  wire controller_fixPln_16$EN;

  // register controller_fixPln_17
  reg [15 : 0] controller_fixPln_17;
  wire [15 : 0] controller_fixPln_17$D_IN;
  wire controller_fixPln_17$EN;

  // register controller_fixPln_18
  reg [15 : 0] controller_fixPln_18;
  wire [15 : 0] controller_fixPln_18$D_IN;
  wire controller_fixPln_18$EN;

  // register controller_fixPln_19
  reg [15 : 0] controller_fixPln_19;
  wire [15 : 0] controller_fixPln_19$D_IN;
  wire controller_fixPln_19$EN;

  // register controller_fixPln_2
  reg [15 : 0] controller_fixPln_2;
  wire [15 : 0] controller_fixPln_2$D_IN;
  wire controller_fixPln_2$EN;

  // register controller_fixPln_20
  reg [15 : 0] controller_fixPln_20;
  wire [15 : 0] controller_fixPln_20$D_IN;
  wire controller_fixPln_20$EN;

  // register controller_fixPln_21
  reg [15 : 0] controller_fixPln_21;
  wire [15 : 0] controller_fixPln_21$D_IN;
  wire controller_fixPln_21$EN;

  // register controller_fixPln_22
  reg [15 : 0] controller_fixPln_22;
  wire [15 : 0] controller_fixPln_22$D_IN;
  wire controller_fixPln_22$EN;

  // register controller_fixPln_23
  reg [15 : 0] controller_fixPln_23;
  wire [15 : 0] controller_fixPln_23$D_IN;
  wire controller_fixPln_23$EN;

  // register controller_fixPln_24
  reg [15 : 0] controller_fixPln_24;
  wire [15 : 0] controller_fixPln_24$D_IN;
  wire controller_fixPln_24$EN;

  // register controller_fixPln_25
  reg [15 : 0] controller_fixPln_25;
  wire [15 : 0] controller_fixPln_25$D_IN;
  wire controller_fixPln_25$EN;

  // register controller_fixPln_26
  reg [15 : 0] controller_fixPln_26;
  wire [15 : 0] controller_fixPln_26$D_IN;
  wire controller_fixPln_26$EN;

  // register controller_fixPln_27
  reg [15 : 0] controller_fixPln_27;
  wire [15 : 0] controller_fixPln_27$D_IN;
  wire controller_fixPln_27$EN;

  // register controller_fixPln_28
  reg [15 : 0] controller_fixPln_28;
  wire [15 : 0] controller_fixPln_28$D_IN;
  wire controller_fixPln_28$EN;

  // register controller_fixPln_29
  reg [15 : 0] controller_fixPln_29;
  wire [15 : 0] controller_fixPln_29$D_IN;
  wire controller_fixPln_29$EN;

  // register controller_fixPln_3
  reg [15 : 0] controller_fixPln_3;
  wire [15 : 0] controller_fixPln_3$D_IN;
  wire controller_fixPln_3$EN;

  // register controller_fixPln_30
  reg [15 : 0] controller_fixPln_30;
  wire [15 : 0] controller_fixPln_30$D_IN;
  wire controller_fixPln_30$EN;

  // register controller_fixPln_31
  reg [15 : 0] controller_fixPln_31;
  wire [15 : 0] controller_fixPln_31$D_IN;
  wire controller_fixPln_31$EN;

  // register controller_fixPln_32
  reg [15 : 0] controller_fixPln_32;
  wire [15 : 0] controller_fixPln_32$D_IN;
  wire controller_fixPln_32$EN;

  // register controller_fixPln_33
  reg [15 : 0] controller_fixPln_33;
  wire [15 : 0] controller_fixPln_33$D_IN;
  wire controller_fixPln_33$EN;

  // register controller_fixPln_34
  reg [15 : 0] controller_fixPln_34;
  wire [15 : 0] controller_fixPln_34$D_IN;
  wire controller_fixPln_34$EN;

  // register controller_fixPln_35
  reg [15 : 0] controller_fixPln_35;
  wire [15 : 0] controller_fixPln_35$D_IN;
  wire controller_fixPln_35$EN;

  // register controller_fixPln_36
  reg [15 : 0] controller_fixPln_36;
  wire [15 : 0] controller_fixPln_36$D_IN;
  wire controller_fixPln_36$EN;

  // register controller_fixPln_37
  reg [15 : 0] controller_fixPln_37;
  wire [15 : 0] controller_fixPln_37$D_IN;
  wire controller_fixPln_37$EN;

  // register controller_fixPln_38
  reg [15 : 0] controller_fixPln_38;
  wire [15 : 0] controller_fixPln_38$D_IN;
  wire controller_fixPln_38$EN;

  // register controller_fixPln_39
  reg [15 : 0] controller_fixPln_39;
  wire [15 : 0] controller_fixPln_39$D_IN;
  wire controller_fixPln_39$EN;

  // register controller_fixPln_4
  reg [15 : 0] controller_fixPln_4;
  wire [15 : 0] controller_fixPln_4$D_IN;
  wire controller_fixPln_4$EN;

  // register controller_fixPln_40
  reg [15 : 0] controller_fixPln_40;
  wire [15 : 0] controller_fixPln_40$D_IN;
  wire controller_fixPln_40$EN;

  // register controller_fixPln_41
  reg [15 : 0] controller_fixPln_41;
  wire [15 : 0] controller_fixPln_41$D_IN;
  wire controller_fixPln_41$EN;

  // register controller_fixPln_42
  reg [15 : 0] controller_fixPln_42;
  wire [15 : 0] controller_fixPln_42$D_IN;
  wire controller_fixPln_42$EN;

  // register controller_fixPln_43
  reg [15 : 0] controller_fixPln_43;
  wire [15 : 0] controller_fixPln_43$D_IN;
  wire controller_fixPln_43$EN;

  // register controller_fixPln_44
  reg [15 : 0] controller_fixPln_44;
  wire [15 : 0] controller_fixPln_44$D_IN;
  wire controller_fixPln_44$EN;

  // register controller_fixPln_45
  reg [15 : 0] controller_fixPln_45;
  wire [15 : 0] controller_fixPln_45$D_IN;
  wire controller_fixPln_45$EN;

  // register controller_fixPln_46
  reg [15 : 0] controller_fixPln_46;
  wire [15 : 0] controller_fixPln_46$D_IN;
  wire controller_fixPln_46$EN;

  // register controller_fixPln_47
  reg [15 : 0] controller_fixPln_47;
  wire [15 : 0] controller_fixPln_47$D_IN;
  wire controller_fixPln_47$EN;

  // register controller_fixPln_48
  reg [15 : 0] controller_fixPln_48;
  wire [15 : 0] controller_fixPln_48$D_IN;
  wire controller_fixPln_48$EN;

  // register controller_fixPln_49
  reg [15 : 0] controller_fixPln_49;
  wire [15 : 0] controller_fixPln_49$D_IN;
  wire controller_fixPln_49$EN;

  // register controller_fixPln_5
  reg [15 : 0] controller_fixPln_5;
  wire [15 : 0] controller_fixPln_5$D_IN;
  wire controller_fixPln_5$EN;

  // register controller_fixPln_50
  reg [15 : 0] controller_fixPln_50;
  wire [15 : 0] controller_fixPln_50$D_IN;
  wire controller_fixPln_50$EN;

  // register controller_fixPln_51
  reg [15 : 0] controller_fixPln_51;
  wire [15 : 0] controller_fixPln_51$D_IN;
  wire controller_fixPln_51$EN;

  // register controller_fixPln_52
  reg [15 : 0] controller_fixPln_52;
  wire [15 : 0] controller_fixPln_52$D_IN;
  wire controller_fixPln_52$EN;

  // register controller_fixPln_53
  reg [15 : 0] controller_fixPln_53;
  wire [15 : 0] controller_fixPln_53$D_IN;
  wire controller_fixPln_53$EN;

  // register controller_fixPln_54
  reg [15 : 0] controller_fixPln_54;
  wire [15 : 0] controller_fixPln_54$D_IN;
  wire controller_fixPln_54$EN;

  // register controller_fixPln_55
  reg [15 : 0] controller_fixPln_55;
  wire [15 : 0] controller_fixPln_55$D_IN;
  wire controller_fixPln_55$EN;

  // register controller_fixPln_56
  reg [15 : 0] controller_fixPln_56;
  wire [15 : 0] controller_fixPln_56$D_IN;
  wire controller_fixPln_56$EN;

  // register controller_fixPln_57
  reg [15 : 0] controller_fixPln_57;
  wire [15 : 0] controller_fixPln_57$D_IN;
  wire controller_fixPln_57$EN;

  // register controller_fixPln_58
  reg [15 : 0] controller_fixPln_58;
  wire [15 : 0] controller_fixPln_58$D_IN;
  wire controller_fixPln_58$EN;

  // register controller_fixPln_59
  reg [15 : 0] controller_fixPln_59;
  wire [15 : 0] controller_fixPln_59$D_IN;
  wire controller_fixPln_59$EN;

  // register controller_fixPln_6
  reg [15 : 0] controller_fixPln_6;
  wire [15 : 0] controller_fixPln_6$D_IN;
  wire controller_fixPln_6$EN;

  // register controller_fixPln_60
  reg [15 : 0] controller_fixPln_60;
  wire [15 : 0] controller_fixPln_60$D_IN;
  wire controller_fixPln_60$EN;

  // register controller_fixPln_61
  reg [15 : 0] controller_fixPln_61;
  wire [15 : 0] controller_fixPln_61$D_IN;
  wire controller_fixPln_61$EN;

  // register controller_fixPln_62
  reg [15 : 0] controller_fixPln_62;
  wire [15 : 0] controller_fixPln_62$D_IN;
  wire controller_fixPln_62$EN;

  // register controller_fixPln_63
  reg [15 : 0] controller_fixPln_63;
  wire [15 : 0] controller_fixPln_63$D_IN;
  wire controller_fixPln_63$EN;

  // register controller_fixPln_64
  reg [15 : 0] controller_fixPln_64;
  wire [15 : 0] controller_fixPln_64$D_IN;
  wire controller_fixPln_64$EN;

  // register controller_fixPln_65
  reg [15 : 0] controller_fixPln_65;
  wire [15 : 0] controller_fixPln_65$D_IN;
  wire controller_fixPln_65$EN;

  // register controller_fixPln_66
  reg [15 : 0] controller_fixPln_66;
  wire [15 : 0] controller_fixPln_66$D_IN;
  wire controller_fixPln_66$EN;

  // register controller_fixPln_67
  reg [15 : 0] controller_fixPln_67;
  wire [15 : 0] controller_fixPln_67$D_IN;
  wire controller_fixPln_67$EN;

  // register controller_fixPln_68
  reg [15 : 0] controller_fixPln_68;
  wire [15 : 0] controller_fixPln_68$D_IN;
  wire controller_fixPln_68$EN;

  // register controller_fixPln_69
  reg [15 : 0] controller_fixPln_69;
  wire [15 : 0] controller_fixPln_69$D_IN;
  wire controller_fixPln_69$EN;

  // register controller_fixPln_7
  reg [15 : 0] controller_fixPln_7;
  wire [15 : 0] controller_fixPln_7$D_IN;
  wire controller_fixPln_7$EN;

  // register controller_fixPln_70
  reg [15 : 0] controller_fixPln_70;
  wire [15 : 0] controller_fixPln_70$D_IN;
  wire controller_fixPln_70$EN;

  // register controller_fixPln_71
  reg [15 : 0] controller_fixPln_71;
  wire [15 : 0] controller_fixPln_71$D_IN;
  wire controller_fixPln_71$EN;

  // register controller_fixPln_72
  reg [15 : 0] controller_fixPln_72;
  wire [15 : 0] controller_fixPln_72$D_IN;
  wire controller_fixPln_72$EN;

  // register controller_fixPln_73
  reg [15 : 0] controller_fixPln_73;
  wire [15 : 0] controller_fixPln_73$D_IN;
  wire controller_fixPln_73$EN;

  // register controller_fixPln_74
  reg [15 : 0] controller_fixPln_74;
  wire [15 : 0] controller_fixPln_74$D_IN;
  wire controller_fixPln_74$EN;

  // register controller_fixPln_75
  reg [15 : 0] controller_fixPln_75;
  wire [15 : 0] controller_fixPln_75$D_IN;
  wire controller_fixPln_75$EN;

  // register controller_fixPln_76
  reg [15 : 0] controller_fixPln_76;
  wire [15 : 0] controller_fixPln_76$D_IN;
  wire controller_fixPln_76$EN;

  // register controller_fixPln_77
  reg [15 : 0] controller_fixPln_77;
  wire [15 : 0] controller_fixPln_77$D_IN;
  wire controller_fixPln_77$EN;

  // register controller_fixPln_78
  reg [15 : 0] controller_fixPln_78;
  wire [15 : 0] controller_fixPln_78$D_IN;
  wire controller_fixPln_78$EN;

  // register controller_fixPln_79
  reg [15 : 0] controller_fixPln_79;
  wire [15 : 0] controller_fixPln_79$D_IN;
  wire controller_fixPln_79$EN;

  // register controller_fixPln_8
  reg [15 : 0] controller_fixPln_8;
  wire [15 : 0] controller_fixPln_8$D_IN;
  wire controller_fixPln_8$EN;

  // register controller_fixPln_80
  reg [15 : 0] controller_fixPln_80;
  wire [15 : 0] controller_fixPln_80$D_IN;
  wire controller_fixPln_80$EN;

  // register controller_fixPln_81
  reg [15 : 0] controller_fixPln_81;
  wire [15 : 0] controller_fixPln_81$D_IN;
  wire controller_fixPln_81$EN;

  // register controller_fixPln_82
  reg [15 : 0] controller_fixPln_82;
  wire [15 : 0] controller_fixPln_82$D_IN;
  wire controller_fixPln_82$EN;

  // register controller_fixPln_83
  reg [15 : 0] controller_fixPln_83;
  wire [15 : 0] controller_fixPln_83$D_IN;
  wire controller_fixPln_83$EN;

  // register controller_fixPln_84
  reg [15 : 0] controller_fixPln_84;
  wire [15 : 0] controller_fixPln_84$D_IN;
  wire controller_fixPln_84$EN;

  // register controller_fixPln_85
  reg [15 : 0] controller_fixPln_85;
  wire [15 : 0] controller_fixPln_85$D_IN;
  wire controller_fixPln_85$EN;

  // register controller_fixPln_86
  reg [15 : 0] controller_fixPln_86;
  wire [15 : 0] controller_fixPln_86$D_IN;
  wire controller_fixPln_86$EN;

  // register controller_fixPln_87
  reg [15 : 0] controller_fixPln_87;
  wire [15 : 0] controller_fixPln_87$D_IN;
  wire controller_fixPln_87$EN;

  // register controller_fixPln_88
  reg [15 : 0] controller_fixPln_88;
  wire [15 : 0] controller_fixPln_88$D_IN;
  wire controller_fixPln_88$EN;

  // register controller_fixPln_89
  reg [15 : 0] controller_fixPln_89;
  wire [15 : 0] controller_fixPln_89$D_IN;
  wire controller_fixPln_89$EN;

  // register controller_fixPln_9
  reg [15 : 0] controller_fixPln_9;
  wire [15 : 0] controller_fixPln_9$D_IN;
  wire controller_fixPln_9$EN;

  // register controller_fixPln_90
  reg [15 : 0] controller_fixPln_90;
  wire [15 : 0] controller_fixPln_90$D_IN;
  wire controller_fixPln_90$EN;

  // register controller_fixPln_91
  reg [15 : 0] controller_fixPln_91;
  wire [15 : 0] controller_fixPln_91$D_IN;
  wire controller_fixPln_91$EN;

  // register controller_fixPln_92
  reg [15 : 0] controller_fixPln_92;
  wire [15 : 0] controller_fixPln_92$D_IN;
  wire controller_fixPln_92$EN;

  // register controller_fixPln_93
  reg [15 : 0] controller_fixPln_93;
  wire [15 : 0] controller_fixPln_93$D_IN;
  wire controller_fixPln_93$EN;

  // register controller_fixPln_94
  reg [15 : 0] controller_fixPln_94;
  wire [15 : 0] controller_fixPln_94$D_IN;
  wire controller_fixPln_94$EN;

  // register controller_fixPln_95
  reg [15 : 0] controller_fixPln_95;
  wire [15 : 0] controller_fixPln_95$D_IN;
  wire controller_fixPln_95$EN;

  // register controller_fixPln_96
  reg [15 : 0] controller_fixPln_96;
  wire [15 : 0] controller_fixPln_96$D_IN;
  wire controller_fixPln_96$EN;

  // register controller_fixPln_97
  reg [15 : 0] controller_fixPln_97;
  wire [15 : 0] controller_fixPln_97$D_IN;
  wire controller_fixPln_97$EN;

  // register controller_fixPln_98
  reg [15 : 0] controller_fixPln_98;
  wire [15 : 0] controller_fixPln_98$D_IN;
  wire controller_fixPln_98$EN;

  // register controller_fixPln_99
  reg [15 : 0] controller_fixPln_99;
  wire [15 : 0] controller_fixPln_99$D_IN;
  wire controller_fixPln_99$EN;

  // register controller_maxShareInd
  reg controller_maxShareInd;
  wire controller_maxShareInd$D_IN, controller_maxShareInd$EN;

  // register controller_prngCoin_state
  reg [1 : 0] controller_prngCoin_state;
  wire [1 : 0] controller_prngCoin_state$D_IN;
  wire controller_prngCoin_state$EN;

  // register controller_prngCoin_triviumCore_regA
  reg [92 : 0] controller_prngCoin_triviumCore_regA;
  wire [92 : 0] controller_prngCoin_triviumCore_regA$D_IN;
  wire controller_prngCoin_triviumCore_regA$EN;

  // register controller_prngCoin_triviumCore_regB
  reg [83 : 0] controller_prngCoin_triviumCore_regB;
  wire [83 : 0] controller_prngCoin_triviumCore_regB$D_IN;
  wire controller_prngCoin_triviumCore_regB$EN;

  // register controller_prngCoin_triviumCore_regC
  reg [110 : 0] controller_prngCoin_triviumCore_regC;
  wire [110 : 0] controller_prngCoin_triviumCore_regC$D_IN;
  wire controller_prngCoin_triviumCore_regC$EN;

  // register controller_prngCoin_warmUpCnt
  reg [10 : 0] controller_prngCoin_warmUpCnt;
  wire [10 : 0] controller_prngCoin_warmUpCnt$D_IN;
  wire controller_prngCoin_warmUpCnt$EN;

  // register controller_prngShare_state
  reg [1 : 0] controller_prngShare_state;
  wire [1 : 0] controller_prngShare_state$D_IN;
  wire controller_prngShare_state$EN;

  // register controller_prngShare_triviumCore_regA
  reg [92 : 0] controller_prngShare_triviumCore_regA;
  reg [92 : 0] controller_prngShare_triviumCore_regA$D_IN;
  wire controller_prngShare_triviumCore_regA$EN;

  // register controller_prngShare_triviumCore_regB
  reg [83 : 0] controller_prngShare_triviumCore_regB;
  reg [83 : 0] controller_prngShare_triviumCore_regB$D_IN;
  wire controller_prngShare_triviumCore_regB$EN;

  // register controller_prngShare_triviumCore_regC
  reg [110 : 0] controller_prngShare_triviumCore_regC;
  reg [110 : 0] controller_prngShare_triviumCore_regC$D_IN;
  wire controller_prngShare_triviumCore_regC$EN;

  // register controller_prngShare_warmUpCnt
  reg [6 : 0] controller_prngShare_warmUpCnt;
  wire [6 : 0] controller_prngShare_warmUpCnt$D_IN;
  wire controller_prngShare_warmUpCnt$EN;

  // register controller_seedCoin_0
  reg [15 : 0] controller_seedCoin_0;
  wire [15 : 0] controller_seedCoin_0$D_IN;
  wire controller_seedCoin_0$EN;

  // register controller_seedCoin_1
  reg [15 : 0] controller_seedCoin_1;
  wire [15 : 0] controller_seedCoin_1$D_IN;
  wire controller_seedCoin_1$EN;

  // register controller_seedCoin_2
  reg [15 : 0] controller_seedCoin_2;
  wire [15 : 0] controller_seedCoin_2$D_IN;
  wire controller_seedCoin_2$EN;

  // register controller_seedCoin_3
  reg [15 : 0] controller_seedCoin_3;
  wire [15 : 0] controller_seedCoin_3$D_IN;
  wire controller_seedCoin_3$EN;

  // register controller_seedCoin_4
  reg [15 : 0] controller_seedCoin_4;
  wire [15 : 0] controller_seedCoin_4$D_IN;
  wire controller_seedCoin_4$EN;

  // register controller_seedCoin_5
  reg [15 : 0] controller_seedCoin_5;
  wire [15 : 0] controller_seedCoin_5$D_IN;
  wire controller_seedCoin_5$EN;

  // register controller_seedCoin_6
  reg [15 : 0] controller_seedCoin_6;
  wire [15 : 0] controller_seedCoin_6$D_IN;
  wire controller_seedCoin_6$EN;

  // register controller_seedCoin_7
  reg [15 : 0] controller_seedCoin_7;
  wire [15 : 0] controller_seedCoin_7$D_IN;
  wire controller_seedCoin_7$EN;

  // register controller_seedCoin_8
  reg [15 : 0] controller_seedCoin_8;
  wire [15 : 0] controller_seedCoin_8$D_IN;
  wire controller_seedCoin_8$EN;

  // register controller_seedCoin_9
  reg [15 : 0] controller_seedCoin_9;
  wire [15 : 0] controller_seedCoin_9$D_IN;
  wire controller_seedCoin_9$EN;

  // register controller_seedShare_0
  reg [15 : 0] controller_seedShare_0;
  wire [15 : 0] controller_seedShare_0$D_IN;
  wire controller_seedShare_0$EN;

  // register controller_seedShare_1
  reg [15 : 0] controller_seedShare_1;
  wire [15 : 0] controller_seedShare_1$D_IN;
  wire controller_seedShare_1$EN;

  // register controller_seedShare_2
  reg [15 : 0] controller_seedShare_2;
  wire [15 : 0] controller_seedShare_2$D_IN;
  wire controller_seedShare_2$EN;

  // register controller_seedShare_3
  reg [15 : 0] controller_seedShare_3;
  wire [15 : 0] controller_seedShare_3$D_IN;
  wire controller_seedShare_3$EN;

  // register controller_seedShare_4
  reg [15 : 0] controller_seedShare_4;
  wire [15 : 0] controller_seedShare_4$D_IN;
  wire controller_seedShare_4$EN;

  // register controller_seedShare_5
  reg [15 : 0] controller_seedShare_5;
  wire [15 : 0] controller_seedShare_5$D_IN;
  wire controller_seedShare_5$EN;

  // register controller_seedShare_6
  reg [15 : 0] controller_seedShare_6;
  wire [15 : 0] controller_seedShare_6$D_IN;
  wire controller_seedShare_6$EN;

  // register controller_seedShare_7
  reg [15 : 0] controller_seedShare_7;
  wire [15 : 0] controller_seedShare_7$D_IN;
  wire controller_seedShare_7$EN;

  // register controller_seedShare_8
  reg [15 : 0] controller_seedShare_8;
  wire [15 : 0] controller_seedShare_8$D_IN;
  wire controller_seedShare_8$EN;

  // register controller_seedShare_9
  reg [15 : 0] controller_seedShare_9;
  wire [15 : 0] controller_seedShare_9$D_IN;
  wire controller_seedShare_9$EN;

  // register controller_seqNum
  reg [13 : 0] controller_seqNum;
  wire [13 : 0] controller_seqNum$D_IN;
  wire controller_seqNum$EN;

  // register controller_ttestState
  reg [2 : 0] controller_ttestState;
  reg [2 : 0] controller_ttestState$D_IN;
  wire controller_ttestState$EN;

  // register hostRxMsgRouter_bodyH
  reg [7 : 0] hostRxMsgRouter_bodyH;
  wire [7 : 0] hostRxMsgRouter_bodyH$D_IN;
  wire hostRxMsgRouter_bodyH$EN;

  // register hostRxMsgRouter_bodyL
  reg [7 : 0] hostRxMsgRouter_bodyL;
  wire [7 : 0] hostRxMsgRouter_bodyL$D_IN;
  wire hostRxMsgRouter_bodyL$EN;

  // register hostRxMsgRouter_destLabel
  reg hostRxMsgRouter_destLabel;
  wire hostRxMsgRouter_destLabel$D_IN, hostRxMsgRouter_destLabel$EN;

  // register hostRxMsgRouter_headH
  reg [7 : 0] hostRxMsgRouter_headH;
  wire [7 : 0] hostRxMsgRouter_headH$D_IN;
  wire hostRxMsgRouter_headH$EN;

  // register hostRxMsgRouter_headL
  reg [7 : 0] hostRxMsgRouter_headL;
  wire [7 : 0] hostRxMsgRouter_headL$D_IN;
  wire hostRxMsgRouter_headL$EN;

  // register hostRxMsgRouter_state
  reg [2 : 0] hostRxMsgRouter_state;
  wire [2 : 0] hostRxMsgRouter_state$D_IN;
  wire hostRxMsgRouter_state$EN;

  // register hostTxMsgPack_bodyH
  reg [7 : 0] hostTxMsgPack_bodyH;
  wire [7 : 0] hostTxMsgPack_bodyH$D_IN;
  wire hostTxMsgPack_bodyH$EN;

  // register hostTxMsgPack_bodyL
  reg [7 : 0] hostTxMsgPack_bodyL;
  wire [7 : 0] hostTxMsgPack_bodyL$D_IN;
  wire hostTxMsgPack_bodyL$EN;

  // register hostTxMsgPack_srcLabel
  reg hostTxMsgPack_srcLabel;
  wire hostTxMsgPack_srcLabel$D_IN, hostTxMsgPack_srcLabel$EN;

  // register hostTxMsgPack_state
  reg [1 : 0] hostTxMsgPack_state;
  wire [1 : 0] hostTxMsgPack_state$D_IN;
  wire hostTxMsgPack_state$EN;

  // register mainComm_c2mBodyReg
  reg [15 : 0] mainComm_c2mBodyReg;
  wire [15 : 0] mainComm_c2mBodyReg$D_IN;
  wire mainComm_c2mBodyReg$EN;

  // register mainComm_c2mHeaderReg
  reg [15 : 0] mainComm_c2mHeaderReg;
  wire [15 : 0] mainComm_c2mHeaderReg$D_IN;
  wire mainComm_c2mHeaderReg$EN;

  // register mainComm_c2mState
  reg [1 : 0] mainComm_c2mState;
  wire [1 : 0] mainComm_c2mState$D_IN;
  wire mainComm_c2mState$EN;

  // register usbComm_rdState
  reg [2 : 0] usbComm_rdState;
  reg [2 : 0] usbComm_rdState$D_IN;
  wire usbComm_rdState$EN;

  // register usbComm_usbDioOe
  reg usbComm_usbDioOe;
  wire usbComm_usbDioOe$D_IN, usbComm_usbDioOe$EN;

  // register usbComm_usbDout
  reg [7 : 0] usbComm_usbDout;
  wire [7 : 0] usbComm_usbDout$D_IN;
  wire usbComm_usbDout$EN;

  // register usbComm_usbRd
  reg usbComm_usbRd;
  wire usbComm_usbRd$D_IN, usbComm_usbRd$EN;

  // register usbComm_usbRxfReg1
  reg usbComm_usbRxfReg1;
  wire usbComm_usbRxfReg1$D_IN, usbComm_usbRxfReg1$EN;

  // register usbComm_usbRxfReg2
  reg usbComm_usbRxfReg2;
  wire usbComm_usbRxfReg2$D_IN, usbComm_usbRxfReg2$EN;

  // register usbComm_usbTxeReg1
  reg usbComm_usbTxeReg1;
  wire usbComm_usbTxeReg1$D_IN, usbComm_usbTxeReg1$EN;

  // register usbComm_usbTxeReg2
  reg usbComm_usbTxeReg2;
  wire usbComm_usbTxeReg2$D_IN, usbComm_usbTxeReg2$EN;

  // register usbComm_usbWr
  reg usbComm_usbWr;
  wire usbComm_usbWr$D_IN, usbComm_usbWr$EN;

  // register usbComm_wrState
  reg [2 : 0] usbComm_wrState;
  reg [2 : 0] usbComm_wrState$D_IN;
  wire usbComm_wrState$EN;

  // ports of submodule controller_ic2hMsgFIFO
  wire [15 : 0] controller_ic2hMsgFIFO$D_IN, controller_ic2hMsgFIFO$D_OUT;
  wire controller_ic2hMsgFIFO$CLR,
       controller_ic2hMsgFIFO$DEQ,
       controller_ic2hMsgFIFO$EMPTY_N,
       controller_ic2hMsgFIFO$ENQ,
       controller_ic2hMsgFIFO$FULL_N;

  // ports of submodule controller_ic2mMsgFIFO
  reg [31 : 0] controller_ic2mMsgFIFO$D_IN;
  wire [31 : 0] controller_ic2mMsgFIFO$D_OUT;
  wire controller_ic2mMsgFIFO$CLR,
       controller_ic2mMsgFIFO$DEQ,
       controller_ic2mMsgFIFO$EMPTY_N,
       controller_ic2mMsgFIFO$ENQ,
       controller_ic2mMsgFIFO$FULL_N;

  // ports of submodule mainComm_m2cMsgFIFO_f
  wire [15 : 0] mainComm_m2cMsgFIFO_f$D_IN, mainComm_m2cMsgFIFO_f$D_OUT;
  wire mainComm_m2cMsgFIFO_f$CLR,
       mainComm_m2cMsgFIFO_f$DEQ,
       mainComm_m2cMsgFIFO_f$EMPTY_N,
       mainComm_m2cMsgFIFO_f$ENQ,
       mainComm_m2cMsgFIFO_f$FULL_N;

  // ports of submodule usbComm_rxFIFO
  wire [7 : 0] usbComm_rxFIFO$D_IN, usbComm_rxFIFO$D_OUT;
  wire usbComm_rxFIFO$CLR,
       usbComm_rxFIFO$DEQ,
       usbComm_rxFIFO$EMPTY_N,
       usbComm_rxFIFO$ENQ,
       usbComm_rxFIFO$FULL_N;

  // ports of submodule usbComm_txFIFO
  reg [7 : 0] usbComm_txFIFO$D_IN;
  wire [7 : 0] usbComm_txFIFO$D_OUT;
  wire usbComm_txFIFO$CLR,
       usbComm_txFIFO$DEQ,
       usbComm_txFIFO$EMPTY_N,
       usbComm_txFIFO$ENQ,
       usbComm_txFIFO$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_c2h_mkConnectionGetPut,
       WILL_FIRE_RL_cdctx_mkConnectionGetPut,
       WILL_FIRE_RL_controller_prngCoin_stateWarmUp,
       WILL_FIRE_RL_controller_prngShare_stateWarmUp,
       WILL_FIRE_RL_controller_ttestStateCoin,
       WILL_FIRE_RL_controller_ttestStateDone,
       WILL_FIRE_RL_controller_ttestStateEnc,
       WILL_FIRE_RL_controller_ttestStateFix,
       WILL_FIRE_RL_controller_ttestStateInit,
       WILL_FIRE_RL_controller_ttestStateRand,
       WILL_FIRE_RL_h2c_mkConnectionGetPut,
       WILL_FIRE_RL_ic2h_mkConnectionGetPut,
       WILL_FIRE_RL_ic2m_mkConnectionGetPut,
       WILL_FIRE_RL_ih2c_mkConnectionGetPut,
       WILL_FIRE_RL_ih2m_mkConnectionGetPut,
       WILL_FIRE_RL_im2c_im2h,
       WILL_FIRE_RL_usbComm_rdStateRD,
       WILL_FIRE_RL_usbComm_rdStateWrStateIDLE;

  // inputs to muxes for submodule ports
  reg [15 : 0] MUX_controller_ic2hMsgFIFO$enq_1__VAL_1;
  reg [2 : 0] MUX_hostRxMsgRouter_state$write_1__VAL_1;
  reg [1 : 0] MUX_hostTxMsgPack_state$write_1__VAL_1;
  wire [110 : 0] MUX_controller_prngCoin_triviumCore_regC$write_1__VAL_1,
		 MUX_controller_prngShare_triviumCore_regC$write_1__VAL_1;
  wire [92 : 0] MUX_controller_prngCoin_triviumCore_regA$write_1__VAL_1,
		MUX_controller_prngShare_triviumCore_regA$write_1__VAL_1;
  wire [83 : 0] MUX_controller_prngCoin_triviumCore_regB$write_1__VAL_1,
		MUX_controller_prngShare_triviumCore_regB$write_1__VAL_1;
  wire [31 : 0] MUX_controller_ic2mMsgFIFO$enq_1__VAL_1,
		MUX_controller_ic2mMsgFIFO$enq_1__VAL_2;
  wire [15 : 0] MUX_controller_coinsChk$write_1__VAL_3,
		MUX_controller_fixPlnSh0Mask$write_1__VAL_2,
		MUX_mainComm_c2mHeaderReg$write_1__VAL_1;
  wire [13 : 0] MUX_controller_curSeqNum$write_1__VAL_1,
		MUX_controller_curSeqNum$write_1__VAL_2;
  wire [10 : 0] MUX_controller_prngCoin_warmUpCnt$write_1__VAL_2;
  wire [6 : 0] MUX_controller_curPlnInd$write_1__VAL_1,
	       MUX_controller_prngShare_warmUpCnt$write_1__VAL_2;
  wire [3 : 0] MUX_controller_coinInd$write_1__VAL_3;
  wire [2 : 0] MUX_controller_ttestState$write_1__VAL_1,
	       MUX_controller_ttestState$write_1__VAL_2,
	       MUX_controller_ttestState$write_1__VAL_8;
  wire [1 : 0] MUX_mainComm_c2mState$write_1__VAL_1;
  wire MUX_cdcProc_rxVld$write_1__SEL_1,
       MUX_cdcProc_rxVld$write_1__SEL_2,
       MUX_controller_coinInd$write_1__SEL_1,
       MUX_controller_coinInd$write_1__SEL_2,
       MUX_controller_coinInd$write_1__SEL_3,
       MUX_controller_curPlnInd$write_1__PSEL_1,
       MUX_controller_curPlnInd$write_1__SEL_1,
       MUX_controller_curSeqNum$write_1__SEL_1,
       MUX_controller_curShareInd$write_1__VAL_3,
       MUX_controller_ic2hMsgFIFO$enq_1__SEL_1,
       MUX_controller_prngCoin_state$write_1__SEL_1,
       MUX_controller_prngCoin_triviumCore_regA$write_1__SEL_1,
       MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1,
       MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3,
       MUX_controller_ttestState$write_1__SEL_2,
       MUX_controller_ttestState$write_1__SEL_4,
       MUX_controller_ttestState$write_1__SEL_6,
       MUX_controller_ttestState$write_1__SEL_7,
       MUX_hostRxMsgRouter_state$write_1__SEL_1,
       MUX_hostTxMsgPack_bodyH$write_1__SEL_1,
       MUX_hostTxMsgPack_state$write_1__SEL_1,
       MUX_mainComm_c2mState$write_1__SEL_1,
       MUX_usbComm_rdState$write_1__SEL_1,
       MUX_usbComm_usbDioOe$write_1__SEL_1;

  // remaining internal signals
  reg [15 : 0] SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258,
	       x__h18840,
	       x__h18868,
	       x__h18878;
  reg [1 : 0] CASE_mainComm_c2mHeaderReg_BITS_15_TO_14_0_0_1_ETC__q1;
  reg IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d367;
  wire [110 : 0] x__h21816, x__h22366;
  wire [92 : 0] x__h20176, x__h21478, x__h22028, x__h36091;
  wire [83 : 0] x__h21337, x__h21647, x__h22197, x__h37246;
  wire [79 : 0] x__h20197, x__h21358, x__h36112, x__h37267;
  wire [15 : 0] shareNum__h18858,
		t1__h22013,
		t2__h22010,
		t2__h22014,
		t3__h22011,
		t3__h22015,
		v__h22000,
		x1_avValue_body__h13222,
		x__h13175,
		x__h18849,
		x__h22061,
		x__h22230,
		x__h22399,
		x__h22538,
		x__h22539,
		x__h37517,
		x__h37688,
		x__h38027,
		y__h17212,
		y__h22063,
		y__h22232,
		y__h22401,
		y_avValue_body__h12606;
  wire [13 : 0] b__h37684, ic2mMsg_header_addr__h13243;
  wire [7 : 0] y_avValue__h18589;
  wire IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d351,
       NOT_cdcProc_doneLvlReg3_63_EQ_cdcProc_doneLvlR_ETC___d765,
       NOT_hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_ETC___d357,
       controller_ttestState_23_EQ_0_32_AND_hostRxMsg_ETC___d371,
       hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395,
       hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416,
       hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_1_3_ETC___d449,
       t1__h21463,
       t2__h21460,
       t2__h21464,
       t3__h21461,
       t3__h21465,
       x__h21511,
       x__h21680,
       x__h21849,
       x__h21988,
       x__h21989,
       x__h37527,
       y__h21513,
       y__h21682,
       y__h21851;

  // value method usb_dout
  assign usb_dout = usbComm_usbDout ;

  // value method usb_rd
  assign usb_rd = usbComm_usbRd ;

  // value method usb_wr
  assign usb_wr = usbComm_usbWr ;

  // value method usb_dioOe
  assign usb_dio_oe = usbComm_usbDioOe ;

  // value method cdcPort_c2m_dout
  assign c2m_dout = cdcProc_c2mPktReg ;

  // value method cdcPort_c2m_enLvl
  assign c2m_en_lvl = cdcProc_enLvlReg ;

  // value method cdcPort_m2c_doneLvl
  assign m2c_done_lvl = cdcProc_doneLvlReg ;

  // submodule controller_ic2hMsgFIFO
  FIFO2 #(.width(32'd16), .guarded(1'd1)) controller_ic2hMsgFIFO(.RST(rst_n),
								 .CLK(clk),
								 .D_IN(controller_ic2hMsgFIFO$D_IN),
								 .ENQ(controller_ic2hMsgFIFO$ENQ),
								 .DEQ(controller_ic2hMsgFIFO$DEQ),
								 .CLR(controller_ic2hMsgFIFO$CLR),
								 .D_OUT(controller_ic2hMsgFIFO$D_OUT),
								 .FULL_N(controller_ic2hMsgFIFO$FULL_N),
								 .EMPTY_N(controller_ic2hMsgFIFO$EMPTY_N));

  // submodule controller_ic2mMsgFIFO
  FIFO2 #(.width(32'd32), .guarded(1'd1)) controller_ic2mMsgFIFO(.RST(rst_n),
								 .CLK(clk),
								 .D_IN(controller_ic2mMsgFIFO$D_IN),
								 .ENQ(controller_ic2mMsgFIFO$ENQ),
								 .DEQ(controller_ic2mMsgFIFO$DEQ),
								 .CLR(controller_ic2mMsgFIFO$CLR),
								 .D_OUT(controller_ic2mMsgFIFO$D_OUT),
								 .FULL_N(controller_ic2mMsgFIFO$FULL_N),
								 .EMPTY_N(controller_ic2mMsgFIFO$EMPTY_N));

  // submodule mainComm_m2cMsgFIFO_f
  FIFO2 #(.width(32'd16), .guarded(1'd1)) mainComm_m2cMsgFIFO_f(.RST(rst_n),
								.CLK(clk),
								.D_IN(mainComm_m2cMsgFIFO_f$D_IN),
								.ENQ(mainComm_m2cMsgFIFO_f$ENQ),
								.DEQ(mainComm_m2cMsgFIFO_f$DEQ),
								.CLR(mainComm_m2cMsgFIFO_f$CLR),
								.D_OUT(mainComm_m2cMsgFIFO_f$D_OUT),
								.FULL_N(mainComm_m2cMsgFIFO_f$FULL_N),
								.EMPTY_N(mainComm_m2cMsgFIFO_f$EMPTY_N));

  // submodule usbComm_rxFIFO
  FIFO2 #(.width(32'd8), .guarded(1'd1)) usbComm_rxFIFO(.RST(rst_n),
							.CLK(clk),
							.D_IN(usbComm_rxFIFO$D_IN),
							.ENQ(usbComm_rxFIFO$ENQ),
							.DEQ(usbComm_rxFIFO$DEQ),
							.CLR(usbComm_rxFIFO$CLR),
							.D_OUT(usbComm_rxFIFO$D_OUT),
							.FULL_N(usbComm_rxFIFO$FULL_N),
							.EMPTY_N(usbComm_rxFIFO$EMPTY_N));

  // submodule usbComm_txFIFO
  FIFO2 #(.width(32'd8), .guarded(1'd1)) usbComm_txFIFO(.RST(rst_n),
							.CLK(clk),
							.D_IN(usbComm_txFIFO$D_IN),
							.ENQ(usbComm_txFIFO$ENQ),
							.DEQ(usbComm_txFIFO$DEQ),
							.CLR(usbComm_txFIFO$CLR),
							.D_OUT(usbComm_txFIFO$D_OUT),
							.FULL_N(usbComm_txFIFO$FULL_N),
							.EMPTY_N(usbComm_txFIFO$EMPTY_N));

  // rule RL_usbComm_rdStateWrStateIDLE
  assign WILL_FIRE_RL_usbComm_rdStateWrStateIDLE =
	     usbComm_rdState == 3'd0 && usbComm_wrState == 3'd0 ;

  // rule RL_usbComm_rdStateRD
  assign WILL_FIRE_RL_usbComm_rdStateRD =
	     usbComm_rxFIFO$FULL_N && usbComm_rdState == 3'd1 ;

  // rule RL_controller_ttestStateInit
  assign WILL_FIRE_RL_controller_ttestStateInit =
	     controller_prngCoin_state == 2'd2 &&
	     controller_ic2mMsgFIFO$FULL_N &&
	     controller_ttestState == 3'd1 ;

  // rule RL_controller_ttestStateRand
  assign WILL_FIRE_RL_controller_ttestStateRand =
	     controller_prngShare_state == 2'd2 &&
	     controller_ic2mMsgFIFO$FULL_N &&
	     controller_ttestState == 3'd2 ;

  // rule RL_controller_ttestStateFix
  assign WILL_FIRE_RL_controller_ttestStateFix =
	     controller_ic2mMsgFIFO$FULL_N &&
	     (!controller_curShareInd ||
	      controller_prngShare_state == 2'd2) &&
	     controller_ttestState == 3'd3 ;

  // rule RL_controller_ttestStateEnc
  assign WILL_FIRE_RL_controller_ttestStateEnc =
	     controller_ic2mMsgFIFO$FULL_N && controller_ttestState == 3'd4 ;

  // rule RL_controller_ttestStateCoin
  assign WILL_FIRE_RL_controller_ttestStateCoin =
	     controller_prngCoin_state == 2'd2 &&
	     controller_ttestState == 3'd6 ;

  // rule RL_controller_ttestStateDone
  assign WILL_FIRE_RL_controller_ttestStateDone =
	     controller_ic2hMsgFIFO$FULL_N && controller_ttestState == 3'd7 ;

  // rule RL_h2c_mkConnectionGetPut
  assign WILL_FIRE_RL_h2c_mkConnectionGetPut =
	     hostRxMsgRouter_state != 3'd5 && usbComm_rxFIFO$EMPTY_N ;

  // rule RL_c2h_mkConnectionGetPut
  assign WILL_FIRE_RL_c2h_mkConnectionGetPut =
	     hostTxMsgPack_state != 2'd0 && usbComm_txFIFO$FULL_N ;

  // rule RL_controller_prngCoin_stateWarmUp
  assign WILL_FIRE_RL_controller_prngCoin_stateWarmUp =
	     controller_prngCoin_state == 2'd1 &&
	     !WILL_FIRE_RL_ih2c_mkConnectionGetPut ;

  // rule RL_controller_prngShare_stateWarmUp
  assign WILL_FIRE_RL_controller_prngShare_stateWarmUp =
	     controller_prngShare_state == 2'd1 &&
	     !WILL_FIRE_RL_ih2c_mkConnectionGetPut ;

  // rule RL_im2c_im2h
  assign WILL_FIRE_RL_im2c_im2h =
	     mainComm_m2cMsgFIFO_f$EMPTY_N &&
	     (controller_ttestState == 3'd5 || hostTxMsgPack_state == 2'd0) &&
	     !WILL_FIRE_RL_ic2h_mkConnectionGetPut &&
	     !WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     !WILL_FIRE_RL_c2h_mkConnectionGetPut ;

  // rule RL_ic2h_mkConnectionGetPut
  assign WILL_FIRE_RL_ic2h_mkConnectionGetPut =
	     hostTxMsgPack_state == 2'd0 && controller_ic2hMsgFIFO$EMPTY_N ;

  // rule RL_ih2m_mkConnectionGetPut
  assign WILL_FIRE_RL_ih2m_mkConnectionGetPut =
	     hostRxMsgRouter_state == 3'd5 && !hostRxMsgRouter_destLabel &&
	     mainComm_c2mState == 2'd0 ;

  // rule RL_ic2m_mkConnectionGetPut
  assign WILL_FIRE_RL_ic2m_mkConnectionGetPut =
	     mainComm_c2mState == 2'd0 && controller_ic2mMsgFIFO$EMPTY_N &&
	     !WILL_FIRE_RL_ih2m_mkConnectionGetPut ;

  // rule RL_ih2c_mkConnectionGetPut
  assign WILL_FIRE_RL_ih2c_mkConnectionGetPut =
	     hostRxMsgRouter_state == 3'd5 && hostRxMsgRouter_destLabel &&
	     controller_ttestState_23_EQ_0_32_AND_hostRxMsg_ETC___d371 ;

  // rule RL_cdctx_mkConnectionGetPut
  assign WILL_FIRE_RL_cdctx_mkConnectionGetPut =
	     cdcProc_txRdy && cdcProc_devRdyReg2 &&
	     (mainComm_c2mState == 2'd1 || mainComm_c2mState == 2'd2) ;

  // inputs to muxes for submodule ports
  assign MUX_cdcProc_rxVld$write_1__SEL_1 =
	     cdcProc_enLvlReg3 != cdcProc_enLvlReg2 && cdcProc_devRdyReg2 ;
  assign MUX_cdcProc_rxVld$write_1__SEL_2 =
	     cdcProc_rxVld && mainComm_m2cMsgFIFO_f$FULL_N ;
  assign MUX_controller_coinInd$write_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ;
  assign MUX_controller_coinInd$write_1__SEL_2 =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState == 3'd5 &&
	     controller_curSeqNum == 14'd0 ;
  assign MUX_controller_coinInd$write_1__SEL_3 =
	     WILL_FIRE_RL_controller_ttestStateCoin &&
	     controller_coinInd != 4'd0 ;
  assign MUX_controller_curPlnInd$write_1__PSEL_1 =
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_ttestStateFix ;
  assign MUX_controller_curPlnInd$write_1__SEL_1 =
	     MUX_controller_curPlnInd$write_1__PSEL_1 &&
	     !controller_curShareInd ;
  assign MUX_controller_curSeqNum$write_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd1) ;
  assign MUX_controller_ic2hMsgFIFO$enq_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_1_3_ETC___d449 ;
  assign MUX_controller_prngCoin_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ;
  assign MUX_controller_prngCoin_triviumCore_regA$write_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395 ;
  assign MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1 =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416 ;
  assign MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3 =
	     WILL_FIRE_RL_controller_ttestStateFix && controller_curShareInd ;
  assign MUX_controller_ttestState$write_1__SEL_2 =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState == 3'd5 ;
  assign MUX_controller_ttestState$write_1__SEL_4 =
	     WILL_FIRE_RL_controller_ttestStateCoin &&
	     controller_coinInd == 4'd0 ;
  assign MUX_controller_ttestState$write_1__SEL_6 =
	     WILL_FIRE_RL_controller_ttestStateFix &&
	     controller_curPlnInd == 7'd0 &&
	     !controller_curShareInd ;
  assign MUX_controller_ttestState$write_1__SEL_7 =
	     WILL_FIRE_RL_controller_ttestStateRand &&
	     controller_curPlnInd == 7'd0 &&
	     !controller_curShareInd ;
  assign MUX_hostRxMsgRouter_state$write_1__SEL_1 =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_state == 3'd0 ||
	      hostRxMsgRouter_state == 3'd1 ||
	      hostRxMsgRouter_state == 3'd2 ||
	      hostRxMsgRouter_state == 3'd3 ||
	      hostRxMsgRouter_state == 3'd4) ;
  assign MUX_hostTxMsgPack_bodyH$write_1__SEL_1 =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState != 3'd5 ;
  assign MUX_hostTxMsgPack_state$write_1__SEL_1 =
	     WILL_FIRE_RL_c2h_mkConnectionGetPut &&
	     (hostTxMsgPack_state == 2'd1 || hostTxMsgPack_state == 2'd2 ||
	      hostTxMsgPack_state == 2'd3) ;
  assign MUX_mainComm_c2mState$write_1__SEL_1 =
	     WILL_FIRE_RL_cdctx_mkConnectionGetPut &&
	     (mainComm_c2mHeaderReg[15:14] == 2'd0 ||
	      mainComm_c2mHeaderReg[15:14] == 2'd1 ||
	      mainComm_c2mHeaderReg[15:14] == 2'd2 ||
	      mainComm_c2mState != 2'd1) ;
  assign MUX_usbComm_rdState$write_1__SEL_1 =
	     WILL_FIRE_RL_usbComm_rdStateWrStateIDLE && !usbComm_usbRxfReg2 &&
	     usbComm_rxFIFO$FULL_N ;
  assign MUX_usbComm_usbDioOe$write_1__SEL_1 =
	     WILL_FIRE_RL_usbComm_rdStateWrStateIDLE &&
	     (usbComm_usbRxfReg2 || !usbComm_rxFIFO$FULL_N) &&
	     !usbComm_usbTxeReg2 &&
	     usbComm_txFIFO$EMPTY_N ;
  assign MUX_controller_coinInd$write_1__VAL_3 = controller_coinInd - 4'd1 ;
  assign MUX_controller_coinsChk$write_1__VAL_3 =
	     controller_coinsChk ^ y__h17212 ;
  assign MUX_controller_curPlnInd$write_1__VAL_1 =
	     controller_curPlnInd - 7'd1 ;
  assign MUX_controller_curSeqNum$write_1__VAL_1 =
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       14'd0 :
	       controller_seqNum ;
  assign MUX_controller_curSeqNum$write_1__VAL_2 =
	     controller_curSeqNum - 14'd1 ;
  assign MUX_controller_curShareInd$write_1__VAL_3 =
	     controller_curShareInd ?
	       controller_curShareInd - 1'd1 :
	       controller_maxShareInd ;
  assign MUX_controller_fixPlnSh0Mask$write_1__VAL_2 =
	     controller_curShareInd ? x__h13175 : 16'd0 ;
  always@(hostRxMsgRouter_headH or
	  hostRxMsgRouter_headL or
	  x__h18840 or
	  x__h18849 or
	  shareNum__h18858 or
	  x__h18868 or x__h18878 or x__h37517 or v__h22000)
  begin
    case ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] })
      7'd0: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = x__h18840;
      7'd16: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = x__h18849;
      7'd17: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = shareNum__h18858;
      7'd32: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = x__h18868;
      7'd33: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = x__h18878;
      7'd48: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = x__h37517;
      7'd49: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = v__h22000;
      default: MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 = 16'd65532;
    endcase
  end
  assign MUX_controller_ic2mMsgFIFO$enq_1__VAL_1 =
	     { 2'd2, ic2mMsg_header_addr__h13243, v__h22000 } ;
  assign MUX_controller_ic2mMsgFIFO$enq_1__VAL_2 =
	     { 2'd2, ic2mMsg_header_addr__h13243, x1_avValue_body__h13222 } ;
  assign MUX_controller_prngCoin_triviumCore_regA$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ? x__h20176 : x__h21478 ;
  assign MUX_controller_prngCoin_triviumCore_regB$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ? x__h21337 : x__h21647 ;
  assign MUX_controller_prngCoin_triviumCore_regC$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ?
	       111'h7000000000000000000000000000 :
	       x__h21816 ;
  assign MUX_controller_prngCoin_warmUpCnt$write_1__VAL_2 =
	     controller_prngCoin_warmUpCnt + 11'd1 ;
  assign MUX_controller_prngShare_triviumCore_regA$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ? x__h36091 : x__h22028 ;
  assign MUX_controller_prngShare_triviumCore_regB$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ? x__h37246 : x__h22197 ;
  assign MUX_controller_prngShare_triviumCore_regC$write_1__VAL_1 =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ?
	       111'h7000000000000000000000000000 :
	       x__h22366 ;
  assign MUX_controller_prngShare_warmUpCnt$write_1__VAL_2 =
	     controller_prngShare_warmUpCnt + 7'd1 ;
  assign MUX_controller_ttestState$write_1__VAL_1 =
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       3'd0 :
	       3'd1 ;
  assign MUX_controller_ttestState$write_1__VAL_2 =
	     (controller_curSeqNum == 14'd0) ? 3'd6 : 3'd1 ;
  assign MUX_controller_ttestState$write_1__VAL_8 = x__h37527 ? 3'd2 : 3'd3 ;
  always@(hostRxMsgRouter_state or hostRxMsgRouter_headH)
  begin
    case (hostRxMsgRouter_state)
      3'd0: MUX_hostRxMsgRouter_state$write_1__VAL_1 = 3'd1;
      3'd1: MUX_hostRxMsgRouter_state$write_1__VAL_1 = 3'd2;
      3'd2:
	  MUX_hostRxMsgRouter_state$write_1__VAL_1 =
	      (hostRxMsgRouter_headH[7:6] == 2'd2) ? 3'd3 : 3'd5;
      3'd3: MUX_hostRxMsgRouter_state$write_1__VAL_1 = 3'd4;
      default: MUX_hostRxMsgRouter_state$write_1__VAL_1 = 3'd5;
    endcase
  end
  always@(hostTxMsgPack_state)
  begin
    case (hostTxMsgPack_state)
      2'd1: MUX_hostTxMsgPack_state$write_1__VAL_1 = 2'd2;
      2'd2: MUX_hostTxMsgPack_state$write_1__VAL_1 = 2'd3;
      default: MUX_hostTxMsgPack_state$write_1__VAL_1 = 2'd0;
    endcase
  end
  assign MUX_mainComm_c2mHeaderReg$write_1__VAL_1 =
	     { hostRxMsgRouter_headH, hostRxMsgRouter_headL } ;
  assign MUX_mainComm_c2mState$write_1__VAL_1 =
	     (mainComm_c2mState == 2'd1) ?
	       CASE_mainComm_c2mHeaderReg_BITS_15_TO_14_0_0_1_ETC__q1 :
	       2'd0 ;

  // inlined wires
  assign _write_RL_controller_ttestStateFix$EN_controller_ttestState$wget =
	     controller_curPlnInd == 7'd0 && !controller_curShareInd ;

  // register cdcProc_c2mPktReg
  assign cdcProc_c2mPktReg$D_IN =
	     (mainComm_c2mState == 2'd1) ?
	       mainComm_c2mHeaderReg :
	       mainComm_c2mBodyReg ;
  assign cdcProc_c2mPktReg$EN = WILL_FIRE_RL_cdctx_mkConnectionGetPut ;

  // register cdcProc_devRdyReg1
  assign cdcProc_devRdyReg1$D_IN = device_rdy ;
  assign cdcProc_devRdyReg1$EN = 1'd1 ;

  // register cdcProc_devRdyReg2
  assign cdcProc_devRdyReg2$D_IN = cdcProc_devRdyReg1 ;
  assign cdcProc_devRdyReg2$EN = 1'd1 ;

  // register cdcProc_doneLvlReg
  assign cdcProc_doneLvlReg$D_IN = ~cdcProc_doneLvlReg ;
  assign cdcProc_doneLvlReg$EN = MUX_cdcProc_rxVld$write_1__SEL_2 ;

  // register cdcProc_doneLvlReg1
  assign cdcProc_doneLvlReg1$D_IN = c2m_done_lvl ;
  assign cdcProc_doneLvlReg1$EN = 1'd1 ;

  // register cdcProc_doneLvlReg2
  assign cdcProc_doneLvlReg2$D_IN = cdcProc_doneLvlReg1 ;
  assign cdcProc_doneLvlReg2$EN = 1'd1 ;

  // register cdcProc_doneLvlReg3
  assign cdcProc_doneLvlReg3$D_IN = cdcProc_doneLvlReg2 ;
  assign cdcProc_doneLvlReg3$EN = 1'd1 ;

  // register cdcProc_enLvlReg
  assign cdcProc_enLvlReg$D_IN = ~cdcProc_enLvlReg ;
  assign cdcProc_enLvlReg$EN = WILL_FIRE_RL_cdctx_mkConnectionGetPut ;

  // register cdcProc_enLvlReg1
  assign cdcProc_enLvlReg1$D_IN = m2c_en_lvl ;
  assign cdcProc_enLvlReg1$EN = 1'd1 ;

  // register cdcProc_enLvlReg2
  assign cdcProc_enLvlReg2$D_IN = cdcProc_enLvlReg1 ;
  assign cdcProc_enLvlReg2$EN = 1'd1 ;

  // register cdcProc_enLvlReg3
  assign cdcProc_enLvlReg3$D_IN = cdcProc_enLvlReg2 ;
  assign cdcProc_enLvlReg3$EN = 1'd1 ;

  // register cdcProc_m2cMsgReg
  assign cdcProc_m2cMsgReg$D_IN = m2c_din ;
  assign cdcProc_m2cMsgReg$EN = MUX_cdcProc_rxVld$write_1__SEL_1 ;

  // register cdcProc_rxVld
  assign cdcProc_rxVld$D_IN = MUX_cdcProc_rxVld$write_1__SEL_1 ;
  assign cdcProc_rxVld$EN =
	     cdcProc_enLvlReg3 != cdcProc_enLvlReg2 && cdcProc_devRdyReg2 ||
	     cdcProc_rxVld && mainComm_m2cMsgFIFO_f$FULL_N ;

  // register cdcProc_txRdy
  assign cdcProc_txRdy$D_IN =
	     NOT_cdcProc_doneLvlReg3_63_EQ_cdcProc_doneLvlR_ETC___d765 ;
  assign cdcProc_txRdy$EN =
	     NOT_cdcProc_doneLvlReg3_63_EQ_cdcProc_doneLvlR_ETC___d765 ||
	     WILL_FIRE_RL_cdctx_mkConnectionGetPut ;

  // register controller_coinInd
  always@(MUX_controller_coinInd$write_1__SEL_1 or
	  MUX_controller_coinInd$write_1__SEL_2 or
	  MUX_controller_coinInd$write_1__SEL_3 or
	  MUX_controller_coinInd$write_1__VAL_3)
  case (1'b1)
    MUX_controller_coinInd$write_1__SEL_1: controller_coinInd$D_IN = 4'd0;
    MUX_controller_coinInd$write_1__SEL_2: controller_coinInd$D_IN = 4'd15;
    MUX_controller_coinInd$write_1__SEL_3:
	controller_coinInd$D_IN = MUX_controller_coinInd$write_1__VAL_3;
    default: controller_coinInd$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign controller_coinInd$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ||
	     WILL_FIRE_RL_controller_ttestStateCoin &&
	     controller_coinInd != 4'd0 ||
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState == 3'd5 &&
	     controller_curSeqNum == 14'd0 ;

  // register controller_coinsChk
  assign controller_coinsChk$D_IN =
	     (MUX_controller_coinInd$write_1__SEL_1 ||
	      MUX_controller_coinInd$write_1__SEL_2) ?
	       16'd0 :
	       MUX_controller_coinsChk$write_1__VAL_3 ;
  assign controller_coinsChk$EN =
	     WILL_FIRE_RL_controller_ttestStateCoin && x__h37527 ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ||
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState == 3'd5 &&
	     controller_curSeqNum == 14'd0 ;

  // register controller_curPlnInd
  always@(MUX_controller_curPlnInd$write_1__SEL_1 or
	  MUX_controller_curPlnInd$write_1__VAL_1 or
	  MUX_controller_coinInd$write_1__SEL_1 or
	  WILL_FIRE_RL_controller_ttestStateInit)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_controller_curPlnInd$write_1__SEL_1:
	  controller_curPlnInd$D_IN = MUX_controller_curPlnInd$write_1__VAL_1;
      MUX_controller_coinInd$write_1__SEL_1: controller_curPlnInd$D_IN = 7'd0;
      WILL_FIRE_RL_controller_ttestStateInit:
	  controller_curPlnInd$D_IN = 7'd99;
      default: controller_curPlnInd$D_IN =
		   7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign controller_curPlnInd$EN =
	     (WILL_FIRE_RL_controller_ttestStateRand ||
	      WILL_FIRE_RL_controller_ttestStateFix) &&
	     !controller_curShareInd ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ||
	     WILL_FIRE_RL_controller_ttestStateInit ;

  // register controller_curSeqNum
  assign controller_curSeqNum$D_IN =
	     MUX_controller_curSeqNum$write_1__SEL_1 ?
	       MUX_controller_curSeqNum$write_1__VAL_1 :
	       MUX_controller_curSeqNum$write_1__VAL_2 ;
  assign controller_curSeqNum$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd1) ||
	     WILL_FIRE_RL_controller_ttestStateInit ;

  // register controller_curShareInd
  always@(MUX_controller_coinInd$write_1__SEL_1 or
	  WILL_FIRE_RL_controller_ttestStateInit or
	  controller_maxShareInd or
	  MUX_controller_curPlnInd$write_1__PSEL_1 or
	  MUX_controller_curShareInd$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_controller_coinInd$write_1__SEL_1:
	  controller_curShareInd$D_IN = 1'd0;
      WILL_FIRE_RL_controller_ttestStateInit:
	  controller_curShareInd$D_IN = controller_maxShareInd;
      MUX_controller_curPlnInd$write_1__PSEL_1:
	  controller_curShareInd$D_IN =
	      MUX_controller_curShareInd$write_1__VAL_3;
      default: controller_curShareInd$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign controller_curShareInd$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ||
	     WILL_FIRE_RL_controller_ttestStateInit ||
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_ttestStateFix ;

  // register controller_fixPlnSh0Mask
  assign controller_fixPlnSh0Mask$D_IN =
	     WILL_FIRE_RL_controller_ttestStateFix ?
	       MUX_controller_fixPlnSh0Mask$write_1__VAL_2 :
	       16'd0 ;
  assign controller_fixPlnSh0Mask$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	     14'd8192 ||
	     WILL_FIRE_RL_controller_ttestStateFix ||
	     WILL_FIRE_RL_controller_ttestStateInit ;

  // register controller_fixPln_0
  assign controller_fixPln_0$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_0$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_1
  assign controller_fixPln_1$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_1$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd1 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_10
  assign controller_fixPln_10$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_10$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd10 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_11
  assign controller_fixPln_11$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_11$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd11 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_12
  assign controller_fixPln_12$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_12$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd12 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_13
  assign controller_fixPln_13$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_13$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd13 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_14
  assign controller_fixPln_14$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_14$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd14 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_15
  assign controller_fixPln_15$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_15$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd15 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_16
  assign controller_fixPln_16$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_16$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd16 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_17
  assign controller_fixPln_17$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_17$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd17 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_18
  assign controller_fixPln_18$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_18$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd18 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_19
  assign controller_fixPln_19$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_19$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd19 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_2
  assign controller_fixPln_2$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_2$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd2 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_20
  assign controller_fixPln_20$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_20$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd20 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_21
  assign controller_fixPln_21$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_21$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd21 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_22
  assign controller_fixPln_22$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_22$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd22 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_23
  assign controller_fixPln_23$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_23$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd23 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_24
  assign controller_fixPln_24$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_24$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd24 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_25
  assign controller_fixPln_25$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_25$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd25 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_26
  assign controller_fixPln_26$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_26$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd26 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_27
  assign controller_fixPln_27$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_27$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd27 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_28
  assign controller_fixPln_28$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_28$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd28 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_29
  assign controller_fixPln_29$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_29$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd29 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_3
  assign controller_fixPln_3$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_3$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd3 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_30
  assign controller_fixPln_30$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_30$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd30 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_31
  assign controller_fixPln_31$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_31$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd31 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_32
  assign controller_fixPln_32$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_32$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd32 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_33
  assign controller_fixPln_33$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_33$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd33 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_34
  assign controller_fixPln_34$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_34$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd34 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_35
  assign controller_fixPln_35$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_35$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd35 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_36
  assign controller_fixPln_36$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_36$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd36 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_37
  assign controller_fixPln_37$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_37$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd37 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_38
  assign controller_fixPln_38$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_38$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd38 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_39
  assign controller_fixPln_39$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_39$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd39 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_4
  assign controller_fixPln_4$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_4$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd4 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_40
  assign controller_fixPln_40$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_40$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd40 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_41
  assign controller_fixPln_41$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_41$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd41 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_42
  assign controller_fixPln_42$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_42$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd42 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_43
  assign controller_fixPln_43$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_43$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd43 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_44
  assign controller_fixPln_44$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_44$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd44 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_45
  assign controller_fixPln_45$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_45$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd45 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_46
  assign controller_fixPln_46$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_46$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd46 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_47
  assign controller_fixPln_47$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_47$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd47 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_48
  assign controller_fixPln_48$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_48$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd48 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_49
  assign controller_fixPln_49$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_49$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd49 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_5
  assign controller_fixPln_5$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_5$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd5 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_50
  assign controller_fixPln_50$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_50$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd50 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_51
  assign controller_fixPln_51$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_51$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd51 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_52
  assign controller_fixPln_52$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_52$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd52 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_53
  assign controller_fixPln_53$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_53$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd53 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_54
  assign controller_fixPln_54$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_54$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd54 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_55
  assign controller_fixPln_55$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_55$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd55 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_56
  assign controller_fixPln_56$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_56$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd56 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_57
  assign controller_fixPln_57$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_57$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd57 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_58
  assign controller_fixPln_58$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_58$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd58 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_59
  assign controller_fixPln_59$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_59$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd59 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_6
  assign controller_fixPln_6$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_6$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd6 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_60
  assign controller_fixPln_60$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_60$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd60 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_61
  assign controller_fixPln_61$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_61$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd61 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_62
  assign controller_fixPln_62$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_62$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd62 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_63
  assign controller_fixPln_63$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_63$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd63 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_64
  assign controller_fixPln_64$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_64$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd64 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_65
  assign controller_fixPln_65$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_65$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd65 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_66
  assign controller_fixPln_66$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_66$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd66 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_67
  assign controller_fixPln_67$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_67$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd67 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_68
  assign controller_fixPln_68$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_68$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd68 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_69
  assign controller_fixPln_69$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_69$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd69 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_7
  assign controller_fixPln_7$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_7$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd7 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_70
  assign controller_fixPln_70$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_70$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd70 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_71
  assign controller_fixPln_71$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_71$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd71 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_72
  assign controller_fixPln_72$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_72$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd72 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_73
  assign controller_fixPln_73$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_73$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd73 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_74
  assign controller_fixPln_74$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_74$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd74 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_75
  assign controller_fixPln_75$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_75$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd75 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_76
  assign controller_fixPln_76$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_76$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd76 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_77
  assign controller_fixPln_77$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_77$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd77 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_78
  assign controller_fixPln_78$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_78$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd78 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_79
  assign controller_fixPln_79$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_79$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd79 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_8
  assign controller_fixPln_8$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_8$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd8 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_80
  assign controller_fixPln_80$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_80$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd80 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_81
  assign controller_fixPln_81$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_81$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd81 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_82
  assign controller_fixPln_82$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_82$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd82 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_83
  assign controller_fixPln_83$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_83$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd83 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_84
  assign controller_fixPln_84$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_84$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd84 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_85
  assign controller_fixPln_85$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_85$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd85 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_86
  assign controller_fixPln_86$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_86$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd86 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_87
  assign controller_fixPln_87$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_87$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd87 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_88
  assign controller_fixPln_88$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_88$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd88 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_89
  assign controller_fixPln_89$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_89$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd89 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_9
  assign controller_fixPln_9$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_9$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd9 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_90
  assign controller_fixPln_90$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_90$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd90 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_91
  assign controller_fixPln_91$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_91$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd91 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_92
  assign controller_fixPln_92$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_92$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd92 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_93
  assign controller_fixPln_93$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_93$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd93 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_94
  assign controller_fixPln_94$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_94$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd94 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_95
  assign controller_fixPln_95$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_95$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd95 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_96
  assign controller_fixPln_96$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_96$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd96 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_97
  assign controller_fixPln_97$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_97$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd97 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_98
  assign controller_fixPln_98$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_98$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd98 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_fixPln_99
  assign controller_fixPln_99$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_fixPln_99$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[6:0] == 7'd99 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0) ;

  // register controller_maxShareInd
  assign controller_maxShareInd$D_IN =
	     hostRxMsgRouter_headH[7:6] != 2'd0 && x__h37688[0] ;
  assign controller_maxShareInd$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd17) ;

  // register controller_prngCoin_state
  assign controller_prngCoin_state$D_IN =
	     MUX_controller_prngCoin_state$write_1__SEL_1 ? 2'd1 : 2'd2 ;
  assign controller_prngCoin_state$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     WILL_FIRE_RL_controller_prngCoin_stateWarmUp &&
	     controller_prngCoin_warmUpCnt == 11'd1151 ;

  // register controller_prngCoin_triviumCore_regA
  assign controller_prngCoin_triviumCore_regA$D_IN =
	     MUX_controller_prngCoin_triviumCore_regA$write_1__SEL_1 ?
	       MUX_controller_prngCoin_triviumCore_regA$write_1__VAL_1 :
	       x__h21478 ;
  assign controller_prngCoin_triviumCore_regA$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395 ||
	     WILL_FIRE_RL_controller_ttestStateCoin ||
	     WILL_FIRE_RL_controller_ttestStateInit ||
	     WILL_FIRE_RL_controller_prngCoin_stateWarmUp ;

  // register controller_prngCoin_triviumCore_regB
  assign controller_prngCoin_triviumCore_regB$D_IN =
	     MUX_controller_prngCoin_triviumCore_regA$write_1__SEL_1 ?
	       MUX_controller_prngCoin_triviumCore_regB$write_1__VAL_1 :
	       x__h21647 ;
  assign controller_prngCoin_triviumCore_regB$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395 ||
	     WILL_FIRE_RL_controller_ttestStateCoin ||
	     WILL_FIRE_RL_controller_ttestStateInit ||
	     WILL_FIRE_RL_controller_prngCoin_stateWarmUp ;

  // register controller_prngCoin_triviumCore_regC
  assign controller_prngCoin_triviumCore_regC$D_IN =
	     MUX_controller_prngCoin_triviumCore_regA$write_1__SEL_1 ?
	       MUX_controller_prngCoin_triviumCore_regC$write_1__VAL_1 :
	       x__h21816 ;
  assign controller_prngCoin_triviumCore_regC$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395 ||
	     WILL_FIRE_RL_controller_ttestStateCoin ||
	     WILL_FIRE_RL_controller_ttestStateInit ||
	     WILL_FIRE_RL_controller_prngCoin_stateWarmUp ;

  // register controller_prngCoin_warmUpCnt
  assign controller_prngCoin_warmUpCnt$D_IN =
	     MUX_controller_prngCoin_state$write_1__SEL_1 ?
	       11'd0 :
	       MUX_controller_prngCoin_warmUpCnt$write_1__VAL_2 ;
  assign controller_prngCoin_warmUpCnt$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     WILL_FIRE_RL_controller_prngCoin_stateWarmUp ;

  // register controller_prngShare_state
  assign controller_prngShare_state$D_IN =
	     MUX_controller_prngCoin_state$write_1__SEL_1 ? 2'd1 : 2'd2 ;
  assign controller_prngShare_state$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     WILL_FIRE_RL_controller_prngShare_stateWarmUp &&
	     controller_prngShare_warmUpCnt == 7'd71 ;

  // register controller_prngShare_triviumCore_regA
  always@(MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1 or
	  MUX_controller_prngShare_triviumCore_regA$write_1__VAL_1 or
	  WILL_FIRE_RL_controller_prngShare_stateWarmUp or
	  x__h22028 or
	  MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_controller_ttestStateRand)
  case (1'b1)
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1:
	controller_prngShare_triviumCore_regA$D_IN =
	    MUX_controller_prngShare_triviumCore_regA$write_1__VAL_1;
    WILL_FIRE_RL_controller_prngShare_stateWarmUp:
	controller_prngShare_triviumCore_regA$D_IN = x__h22028;
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3:
	controller_prngShare_triviumCore_regA$D_IN = x__h22028;
    WILL_FIRE_RL_controller_ttestStateRand:
	controller_prngShare_triviumCore_regA$D_IN = x__h22028;
    default: controller_prngShare_triviumCore_regA$D_IN =
		 93'h0AAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign controller_prngShare_triviumCore_regA$EN =
	     WILL_FIRE_RL_controller_ttestStateFix &&
	     controller_curShareInd ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416 ||
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_prngShare_stateWarmUp ;

  // register controller_prngShare_triviumCore_regB
  always@(MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1 or
	  MUX_controller_prngShare_triviumCore_regB$write_1__VAL_1 or
	  WILL_FIRE_RL_controller_prngShare_stateWarmUp or
	  x__h22197 or
	  MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_controller_ttestStateRand)
  case (1'b1)
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1:
	controller_prngShare_triviumCore_regB$D_IN =
	    MUX_controller_prngShare_triviumCore_regB$write_1__VAL_1;
    WILL_FIRE_RL_controller_prngShare_stateWarmUp:
	controller_prngShare_triviumCore_regB$D_IN = x__h22197;
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3:
	controller_prngShare_triviumCore_regB$D_IN = x__h22197;
    WILL_FIRE_RL_controller_ttestStateRand:
	controller_prngShare_triviumCore_regB$D_IN = x__h22197;
    default: controller_prngShare_triviumCore_regB$D_IN =
		 84'hAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign controller_prngShare_triviumCore_regB$EN =
	     WILL_FIRE_RL_controller_ttestStateFix &&
	     controller_curShareInd ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416 ||
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_prngShare_stateWarmUp ;

  // register controller_prngShare_triviumCore_regC
  always@(MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1 or
	  MUX_controller_prngShare_triviumCore_regC$write_1__VAL_1 or
	  WILL_FIRE_RL_controller_prngShare_stateWarmUp or
	  x__h22366 or
	  MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3 or
	  WILL_FIRE_RL_controller_ttestStateRand)
  case (1'b1)
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_1:
	controller_prngShare_triviumCore_regC$D_IN =
	    MUX_controller_prngShare_triviumCore_regC$write_1__VAL_1;
    WILL_FIRE_RL_controller_prngShare_stateWarmUp:
	controller_prngShare_triviumCore_regC$D_IN = x__h22366;
    MUX_controller_prngShare_triviumCore_regA$write_1__SEL_3:
	controller_prngShare_triviumCore_regC$D_IN = x__h22366;
    WILL_FIRE_RL_controller_ttestStateRand:
	controller_prngShare_triviumCore_regC$D_IN = x__h22366;
    default: controller_prngShare_triviumCore_regC$D_IN =
		 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign controller_prngShare_triviumCore_regC$EN =
	     WILL_FIRE_RL_controller_ttestStateFix &&
	     controller_curShareInd ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416 ||
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_prngShare_stateWarmUp ;

  // register controller_prngShare_warmUpCnt
  assign controller_prngShare_warmUpCnt$D_IN =
	     MUX_controller_prngCoin_state$write_1__SEL_1 ?
	       7'd0 :
	       MUX_controller_prngShare_warmUpCnt$write_1__VAL_2 ;
  assign controller_prngShare_warmUpCnt$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     WILL_FIRE_RL_controller_prngShare_stateWarmUp ;

  // register controller_seedCoin_0
  assign controller_seedCoin_0$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_0$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_1
  assign controller_seedCoin_1$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_1$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd1 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_2
  assign controller_seedCoin_2$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_2$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd2 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_3
  assign controller_seedCoin_3$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_3$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd3 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_4
  assign controller_seedCoin_4$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_4$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd4 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_5
  assign controller_seedCoin_5$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_5$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd5 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_6
  assign controller_seedCoin_6$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_6$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd6 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_7
  assign controller_seedCoin_7$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_7$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd7 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_8
  assign controller_seedCoin_8$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_8$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd8 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedCoin_9
  assign controller_seedCoin_9$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedCoin_9$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd9 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32) ;

  // register controller_seedShare_0
  assign controller_seedShare_0$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_0$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_1
  assign controller_seedShare_1$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_1$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd1 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_2
  assign controller_seedShare_2$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_2$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd2 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_3
  assign controller_seedShare_3$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_3$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd3 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_4
  assign controller_seedShare_4$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_4$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd4 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_5
  assign controller_seedShare_5$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_5$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd5 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_6
  assign controller_seedShare_6$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_6$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd6 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_7
  assign controller_seedShare_7$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_7$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd7 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_8
  assign controller_seedShare_8$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_8$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd8 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seedShare_9
  assign controller_seedShare_9$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192) ?
	       16'd0 :
	       x__h38027 ;
  assign controller_seedShare_9$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headL[3:0] == 4'd9 &&
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33) ;

  // register controller_seqNum
  assign controller_seqNum$D_IN =
	     (hostRxMsgRouter_headH[7:6] == 2'd0) ? 14'd0 : b__h37684 ;
  assign controller_seqNum$EN =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      hostRxMsgRouter_headH[7:6] != 2'd0 &&
	      hostRxMsgRouter_headH[7:6] != 2'd1 &&
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd16) ;

  // register controller_ttestState
  always@(MUX_controller_curSeqNum$write_1__SEL_1 or
	  MUX_controller_ttestState$write_1__VAL_1 or
	  MUX_controller_ttestState$write_1__SEL_2 or
	  MUX_controller_ttestState$write_1__VAL_2 or
	  WILL_FIRE_RL_controller_ttestStateDone or
	  MUX_controller_ttestState$write_1__SEL_4 or
	  WILL_FIRE_RL_controller_ttestStateEnc or
	  MUX_controller_ttestState$write_1__SEL_6 or
	  MUX_controller_ttestState$write_1__SEL_7 or
	  WILL_FIRE_RL_controller_ttestStateInit or
	  MUX_controller_ttestState$write_1__VAL_8)
  case (1'b1)
    MUX_controller_curSeqNum$write_1__SEL_1:
	controller_ttestState$D_IN = MUX_controller_ttestState$write_1__VAL_1;
    MUX_controller_ttestState$write_1__SEL_2:
	controller_ttestState$D_IN = MUX_controller_ttestState$write_1__VAL_2;
    WILL_FIRE_RL_controller_ttestStateDone: controller_ttestState$D_IN = 3'd0;
    MUX_controller_ttestState$write_1__SEL_4:
	controller_ttestState$D_IN = 3'd7;
    WILL_FIRE_RL_controller_ttestStateEnc: controller_ttestState$D_IN = 3'd5;
    MUX_controller_ttestState$write_1__SEL_6 ||
    MUX_controller_ttestState$write_1__SEL_7:
	controller_ttestState$D_IN = 3'd4;
    WILL_FIRE_RL_controller_ttestStateInit:
	controller_ttestState$D_IN = MUX_controller_ttestState$write_1__VAL_8;
    default: controller_ttestState$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign controller_ttestState$EN =
	     WILL_FIRE_RL_controller_ttestStateCoin &&
	     controller_coinInd == 4'd0 ||
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState == 3'd5 ||
	     (WILL_FIRE_RL_controller_ttestStateRand ||
	      WILL_FIRE_RL_controller_ttestStateFix) &&
	     controller_curPlnInd == 7'd0 &&
	     !controller_curShareInd ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd8192 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } ==
	      14'd1) ||
	     WILL_FIRE_RL_controller_ttestStateInit ||
	     WILL_FIRE_RL_controller_ttestStateDone ||
	     WILL_FIRE_RL_controller_ttestStateEnc ;

  // register hostRxMsgRouter_bodyH
  assign hostRxMsgRouter_bodyH$D_IN =
	     (hostRxMsgRouter_state == 3'd2) ? 8'd0 : usbComm_rxFIFO$D_OUT ;
  assign hostRxMsgRouter_bodyH$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_state == 3'd2 &&
	      hostRxMsgRouter_headH[7:6] != 2'd2 ||
	      hostRxMsgRouter_state == 3'd3) ;

  // register hostRxMsgRouter_bodyL
  assign hostRxMsgRouter_bodyL$D_IN =
	     (hostRxMsgRouter_state == 3'd2) ? 8'd0 : usbComm_rxFIFO$D_OUT ;
  assign hostRxMsgRouter_bodyL$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_state == 3'd2 &&
	      hostRxMsgRouter_headH[7:6] != 2'd2 ||
	      hostRxMsgRouter_state == 3'd4) ;

  // register hostRxMsgRouter_destLabel
  assign hostRxMsgRouter_destLabel$D_IN = usbComm_rxFIFO$D_OUT[0] ;
  assign hostRxMsgRouter_destLabel$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     hostRxMsgRouter_state == 3'd0 ;

  // register hostRxMsgRouter_headH
  assign hostRxMsgRouter_headH$D_IN = usbComm_rxFIFO$D_OUT ;
  assign hostRxMsgRouter_headH$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     hostRxMsgRouter_state == 3'd1 ;

  // register hostRxMsgRouter_headL
  assign hostRxMsgRouter_headL$D_IN = usbComm_rxFIFO$D_OUT ;
  assign hostRxMsgRouter_headL$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     hostRxMsgRouter_state == 3'd2 ;

  // register hostRxMsgRouter_state
  assign hostRxMsgRouter_state$D_IN =
	     MUX_hostRxMsgRouter_state$write_1__SEL_1 ?
	       MUX_hostRxMsgRouter_state$write_1__VAL_1 :
	       3'd0 ;
  assign hostRxMsgRouter_state$EN =
	     WILL_FIRE_RL_h2c_mkConnectionGetPut &&
	     (hostRxMsgRouter_state == 3'd0 ||
	      hostRxMsgRouter_state == 3'd1 ||
	      hostRxMsgRouter_state == 3'd2 ||
	      hostRxMsgRouter_state == 3'd3 ||
	      hostRxMsgRouter_state == 3'd4) ||
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut ||
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ;

  // register hostTxMsgPack_bodyH
  assign hostTxMsgPack_bodyH$D_IN =
	     MUX_hostTxMsgPack_bodyH$write_1__SEL_1 ?
	       mainComm_m2cMsgFIFO_f$D_OUT[15:8] :
	       controller_ic2hMsgFIFO$D_OUT[15:8] ;
  assign hostTxMsgPack_bodyH$EN =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState != 3'd5 ||
	     WILL_FIRE_RL_ic2h_mkConnectionGetPut ;

  // register hostTxMsgPack_bodyL
  assign hostTxMsgPack_bodyL$D_IN =
	     MUX_hostTxMsgPack_bodyH$write_1__SEL_1 ?
	       mainComm_m2cMsgFIFO_f$D_OUT[7:0] :
	       controller_ic2hMsgFIFO$D_OUT[7:0] ;
  assign hostTxMsgPack_bodyL$EN =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState != 3'd5 ||
	     WILL_FIRE_RL_ic2h_mkConnectionGetPut ;

  // register hostTxMsgPack_srcLabel
  assign hostTxMsgPack_srcLabel$D_IN =
	     !MUX_hostTxMsgPack_bodyH$write_1__SEL_1 ;
  assign hostTxMsgPack_srcLabel$EN =
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState != 3'd5 ||
	     WILL_FIRE_RL_ic2h_mkConnectionGetPut ;

  // register hostTxMsgPack_state
  assign hostTxMsgPack_state$D_IN =
	     MUX_hostTxMsgPack_state$write_1__SEL_1 ?
	       MUX_hostTxMsgPack_state$write_1__VAL_1 :
	       2'd1 ;
  assign hostTxMsgPack_state$EN =
	     WILL_FIRE_RL_c2h_mkConnectionGetPut &&
	     (hostTxMsgPack_state == 2'd1 || hostTxMsgPack_state == 2'd2 ||
	      hostTxMsgPack_state == 2'd3) ||
	     WILL_FIRE_RL_im2c_im2h && controller_ttestState != 3'd5 ||
	     WILL_FIRE_RL_ic2h_mkConnectionGetPut ;

  // register mainComm_c2mBodyReg
  assign mainComm_c2mBodyReg$D_IN =
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ?
	       x__h38027 :
	       controller_ic2mMsgFIFO$D_OUT[15:0] ;
  assign mainComm_c2mBodyReg$EN =
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ||
	     WILL_FIRE_RL_ic2m_mkConnectionGetPut ;

  // register mainComm_c2mHeaderReg
  assign mainComm_c2mHeaderReg$D_IN =
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ?
	       MUX_mainComm_c2mHeaderReg$write_1__VAL_1 :
	       controller_ic2mMsgFIFO$D_OUT[31:16] ;
  assign mainComm_c2mHeaderReg$EN =
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ||
	     WILL_FIRE_RL_ic2m_mkConnectionGetPut ;

  // register mainComm_c2mState
  assign mainComm_c2mState$D_IN =
	     MUX_mainComm_c2mState$write_1__SEL_1 ?
	       MUX_mainComm_c2mState$write_1__VAL_1 :
	       2'd1 ;
  assign mainComm_c2mState$EN =
	     WILL_FIRE_RL_cdctx_mkConnectionGetPut &&
	     (mainComm_c2mHeaderReg[15:14] == 2'd0 ||
	      mainComm_c2mHeaderReg[15:14] == 2'd1 ||
	      mainComm_c2mHeaderReg[15:14] == 2'd2 ||
	      mainComm_c2mState != 2'd1) ||
	     WILL_FIRE_RL_ic2m_mkConnectionGetPut ||
	     WILL_FIRE_RL_ih2m_mkConnectionGetPut ;

  // register usbComm_rdState
  always@(MUX_usbComm_rdState$write_1__SEL_1 or
	  usbComm_rdState or WILL_FIRE_RL_usbComm_rdStateRD)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_usbComm_rdState$write_1__SEL_1: usbComm_rdState$D_IN = 3'd1;
      usbComm_rdState == 3'd4: usbComm_rdState$D_IN = 3'd0;
      WILL_FIRE_RL_usbComm_rdStateRD: usbComm_rdState$D_IN = 3'd2;
      usbComm_rdState == 3'd2: usbComm_rdState$D_IN = 3'd3;
      usbComm_rdState == 3'd3: usbComm_rdState$D_IN = 3'd4;
      default: usbComm_rdState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign usbComm_rdState$EN =
	     WILL_FIRE_RL_usbComm_rdStateWrStateIDLE && !usbComm_usbRxfReg2 &&
	     usbComm_rxFIFO$FULL_N ||
	     usbComm_rdState == 3'd4 ||
	     WILL_FIRE_RL_usbComm_rdStateRD ||
	     usbComm_rdState == 3'd2 ||
	     usbComm_rdState == 3'd3 ;

  // register usbComm_usbDioOe
  assign usbComm_usbDioOe$D_IN = MUX_usbComm_usbDioOe$write_1__SEL_1 ;
  assign usbComm_usbDioOe$EN =
	     MUX_usbComm_usbDioOe$write_1__SEL_1 || usbComm_wrState == 3'd2 ;

  // register usbComm_usbDout
  assign usbComm_usbDout$D_IN = usbComm_txFIFO$D_OUT ;
  assign usbComm_usbDout$EN = MUX_usbComm_usbDioOe$write_1__SEL_1 ;

  // register usbComm_usbRd
  assign usbComm_usbRd$D_IN = !MUX_usbComm_rdState$write_1__SEL_1 ;
  assign usbComm_usbRd$EN =
	     WILL_FIRE_RL_usbComm_rdStateWrStateIDLE && !usbComm_usbRxfReg2 &&
	     usbComm_rxFIFO$FULL_N ||
	     WILL_FIRE_RL_usbComm_rdStateRD ;

  // register usbComm_usbRxfReg1
  assign usbComm_usbRxfReg1$D_IN = usb_rxf ;
  assign usbComm_usbRxfReg1$EN = 1'd1 ;

  // register usbComm_usbRxfReg2
  assign usbComm_usbRxfReg2$D_IN = usbComm_usbRxfReg1 ;
  assign usbComm_usbRxfReg2$EN = 1'd1 ;

  // register usbComm_usbTxeReg1
  assign usbComm_usbTxeReg1$D_IN = usb_txe ;
  assign usbComm_usbTxeReg1$EN = 1'd1 ;

  // register usbComm_usbTxeReg2
  assign usbComm_usbTxeReg2$D_IN = usbComm_usbTxeReg1 ;
  assign usbComm_usbTxeReg2$EN = 1'd1 ;

  // register usbComm_usbWr
  assign usbComm_usbWr$D_IN = usbComm_wrState != 3'd1 ;
  assign usbComm_usbWr$EN =
	     usbComm_wrState == 3'd1 || usbComm_wrState == 3'd2 ;

  // register usbComm_wrState
  always@(MUX_usbComm_usbDioOe$write_1__SEL_1 or usbComm_wrState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_usbComm_usbDioOe$write_1__SEL_1: usbComm_wrState$D_IN = 3'd1;
      usbComm_wrState == 3'd4: usbComm_wrState$D_IN = 3'd0;
      usbComm_wrState == 3'd1: usbComm_wrState$D_IN = 3'd2;
      usbComm_wrState == 3'd2: usbComm_wrState$D_IN = 3'd3;
      usbComm_wrState == 3'd3: usbComm_wrState$D_IN = 3'd4;
      default: usbComm_wrState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign usbComm_wrState$EN =
	     MUX_usbComm_usbDioOe$write_1__SEL_1 || usbComm_wrState == 3'd4 ||
	     usbComm_wrState == 3'd1 ||
	     usbComm_wrState == 3'd2 ||
	     usbComm_wrState == 3'd3 ;

  // submodule controller_ic2hMsgFIFO
  assign controller_ic2hMsgFIFO$D_IN =
	     MUX_controller_ic2hMsgFIFO$enq_1__SEL_1 ?
	       MUX_controller_ic2hMsgFIFO$enq_1__VAL_1 :
	       controller_coinsChk ;
  assign controller_ic2hMsgFIFO$ENQ =
	     WILL_FIRE_RL_ih2c_mkConnectionGetPut &&
	     hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_1_3_ETC___d449 ||
	     WILL_FIRE_RL_controller_ttestStateDone ;
  assign controller_ic2hMsgFIFO$DEQ = WILL_FIRE_RL_ic2h_mkConnectionGetPut ;
  assign controller_ic2hMsgFIFO$CLR = MUX_controller_coinInd$write_1__SEL_1 ;

  // submodule controller_ic2mMsgFIFO
  always@(WILL_FIRE_RL_controller_ttestStateRand or
	  MUX_controller_ic2mMsgFIFO$enq_1__VAL_1 or
	  WILL_FIRE_RL_controller_ttestStateFix or
	  MUX_controller_ic2mMsgFIFO$enq_1__VAL_2 or
	  WILL_FIRE_RL_controller_ttestStateEnc or
	  WILL_FIRE_RL_controller_ttestStateInit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_controller_ttestStateRand:
	  controller_ic2mMsgFIFO$D_IN =
	      MUX_controller_ic2mMsgFIFO$enq_1__VAL_1;
      WILL_FIRE_RL_controller_ttestStateFix:
	  controller_ic2mMsgFIFO$D_IN =
	      MUX_controller_ic2mMsgFIFO$enq_1__VAL_2;
      WILL_FIRE_RL_controller_ttestStateEnc:
	  controller_ic2mMsgFIFO$D_IN = 32'd65536;
      WILL_FIRE_RL_controller_ttestStateInit:
	  controller_ic2mMsgFIFO$D_IN = 32'd131072;
      default: controller_ic2mMsgFIFO$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign controller_ic2mMsgFIFO$ENQ =
	     WILL_FIRE_RL_controller_ttestStateRand ||
	     WILL_FIRE_RL_controller_ttestStateFix ||
	     WILL_FIRE_RL_controller_ttestStateEnc ||
	     WILL_FIRE_RL_controller_ttestStateInit ;
  assign controller_ic2mMsgFIFO$DEQ = WILL_FIRE_RL_ic2m_mkConnectionGetPut ;
  assign controller_ic2mMsgFIFO$CLR = MUX_controller_coinInd$write_1__SEL_1 ;

  // submodule mainComm_m2cMsgFIFO_f
  assign mainComm_m2cMsgFIFO_f$D_IN = cdcProc_m2cMsgReg ;
  assign mainComm_m2cMsgFIFO_f$ENQ = MUX_cdcProc_rxVld$write_1__SEL_2 ;
  assign mainComm_m2cMsgFIFO_f$DEQ = WILL_FIRE_RL_im2c_im2h ;
  assign mainComm_m2cMsgFIFO_f$CLR = 1'b0 ;

  // submodule usbComm_rxFIFO
  assign usbComm_rxFIFO$D_IN = usb_din ;
  assign usbComm_rxFIFO$ENQ = WILL_FIRE_RL_usbComm_rdStateRD ;
  assign usbComm_rxFIFO$DEQ = WILL_FIRE_RL_h2c_mkConnectionGetPut ;
  assign usbComm_rxFIFO$CLR = 1'b0 ;

  // submodule usbComm_txFIFO
  always@(hostTxMsgPack_state or
	  hostTxMsgPack_bodyL or y_avValue__h18589 or hostTxMsgPack_bodyH)
  begin
    case (hostTxMsgPack_state)
      2'd1: usbComm_txFIFO$D_IN = y_avValue__h18589;
      2'd2: usbComm_txFIFO$D_IN = hostTxMsgPack_bodyH;
      default: usbComm_txFIFO$D_IN = hostTxMsgPack_bodyL;
    endcase
  end
  assign usbComm_txFIFO$ENQ = WILL_FIRE_RL_c2h_mkConnectionGetPut ;
  assign usbComm_txFIFO$DEQ = MUX_usbComm_usbDioOe$write_1__SEL_1 ;
  assign usbComm_txFIFO$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d351 =
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd48) ?
	       controller_prngCoin_state == 2'd2 &&
	       controller_ic2hMsgFIFO$FULL_N :
	       { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } !=
	       7'd49 ||
	       controller_prngShare_state == 2'd2 &&
	       controller_ic2hMsgFIFO$FULL_N ;
  assign NOT_cdcProc_doneLvlReg3_63_EQ_cdcProc_doneLvlR_ETC___d765 =
	     cdcProc_doneLvlReg3 != cdcProc_doneLvlReg2 ;
  assign NOT_hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_ETC___d357 =
	     hostRxMsgRouter_headH[7:6] != 2'd1 ||
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd0 ||
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd16 ||
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd17 ||
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd32 ||
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd33 ||
	     IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d351 ;
  assign b__h37684 = { hostRxMsgRouter_bodyH[5:0], hostRxMsgRouter_bodyL } ;
  assign controller_ttestState_23_EQ_0_32_AND_hostRxMsg_ETC___d371 =
	     controller_ttestState == 3'd0 &&
	     (hostRxMsgRouter_headH[7:6] == 2'd0 ||
	      NOT_hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_ETC___d357 &&
	      (hostRxMsgRouter_headH[7:6] != 2'd1 ||
	       IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d367)) ;
  assign hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d395 =
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     hostRxMsgRouter_headH[7:6] == 2'd1 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd48 ;
  assign hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_0_3_ETC___d416 =
	     hostRxMsgRouter_headH[7:6] == 2'd0 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL } == 14'd2 ||
	     hostRxMsgRouter_headH[7:6] == 2'd1 &&
	     { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	     7'd49 ;
  assign hostRxMsgRouter_headH_90_BITS_7_TO_6_91_EQ_1_3_ETC___d449 =
	     hostRxMsgRouter_headH[7:6] == 2'd1 &&
	     ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd0 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd16 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd17 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd32 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd33 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd48 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd49 ||
	      { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } ==
	      7'd127) ;
  assign ic2mMsg_header_addr__h13243 =
	     { controller_curShareInd ? 7'd1 : 7'd0, controller_curPlnInd } ;
  assign shareNum__h18858 = { 15'd0, controller_maxShareInd } + 16'd1 ;
  assign t1__h21463 = x__h21680 ^ controller_prngCoin_triviumCore_regB[77] ;
  assign t1__h22013 =
	     x__h22230 ^ controller_prngShare_triviumCore_regB[77:62] ;
  assign t2__h21460 =
	     controller_prngCoin_triviumCore_regB[68] ^
	     controller_prngCoin_triviumCore_regB[83] ;
  assign t2__h21464 = x__h21849 ^ controller_prngCoin_triviumCore_regC[86] ;
  assign t2__h22010 =
	     controller_prngShare_triviumCore_regB[68:53] ^
	     controller_prngShare_triviumCore_regB[83:68] ;
  assign t2__h22014 =
	     x__h22399 ^ controller_prngShare_triviumCore_regC[86:71] ;
  assign t3__h21461 =
	     controller_prngCoin_triviumCore_regC[65] ^
	     controller_prngCoin_triviumCore_regC[110] ;
  assign t3__h21465 = x__h21511 ^ controller_prngCoin_triviumCore_regA[68] ;
  assign t3__h22011 =
	     controller_prngShare_triviumCore_regC[65:50] ^
	     controller_prngShare_triviumCore_regC[110:95] ;
  assign t3__h22015 =
	     x__h22061 ^ controller_prngShare_triviumCore_regA[68:53] ;
  assign v__h22000 = x__h22538 ^ t3__h22011 ;
  assign x1_avValue_body__h13222 =
	     controller_curShareInd ? v__h22000 : y_avValue_body__h12606 ;
  assign x__h13175 = controller_fixPlnSh0Mask ^ v__h22000 ;
  assign x__h18849 = { 2'd0, controller_seqNum } ;
  assign x__h20176 = { 13'd0, x__h20197 } ;
  assign x__h20197 =
	     { controller_seedCoin_9,
	       controller_seedCoin_8,
	       controller_seedCoin_7,
	       controller_seedCoin_6,
	       controller_seedCoin_5 } ;
  assign x__h21337 = { 4'd0, x__h21358 } ;
  assign x__h21358 =
	     { controller_seedCoin_4,
	       controller_seedCoin_3,
	       controller_seedCoin_2,
	       controller_seedCoin_1,
	       controller_seedCoin_0 } ;
  assign x__h21478 =
	     { controller_prngCoin_triviumCore_regA[91:0], t3__h21465 } ;
  assign x__h21511 = t3__h21461 ^ y__h21513 ;
  assign x__h21647 =
	     { controller_prngCoin_triviumCore_regB[82:0], t1__h21463 } ;
  assign x__h21680 = x__h21989 ^ y__h21682 ;
  assign x__h21816 =
	     { controller_prngCoin_triviumCore_regC[109:0], t2__h21464 } ;
  assign x__h21849 = t2__h21460 ^ y__h21851 ;
  assign x__h21988 = x__h21989 ^ t2__h21460 ;
  assign x__h21989 =
	     controller_prngCoin_triviumCore_regA[65] ^
	     controller_prngCoin_triviumCore_regA[92] ;
  assign x__h22028 =
	     { controller_prngShare_triviumCore_regA[76:0], t3__h22015 } ;
  assign x__h22061 = t3__h22011 ^ y__h22063 ;
  assign x__h22197 =
	     { controller_prngShare_triviumCore_regB[67:0], t1__h22013 } ;
  assign x__h22230 = x__h22539 ^ y__h22232 ;
  assign x__h22366 =
	     { controller_prngShare_triviumCore_regC[94:0], t2__h22014 } ;
  assign x__h22399 = t2__h22010 ^ y__h22401 ;
  assign x__h22538 = x__h22539 ^ t2__h22010 ;
  assign x__h22539 =
	     controller_prngShare_triviumCore_regA[65:50] ^
	     controller_prngShare_triviumCore_regA[92:77] ;
  assign x__h36091 = { 13'd0, x__h36112 } ;
  assign x__h36112 =
	     { controller_seedShare_9,
	       controller_seedShare_8,
	       controller_seedShare_7,
	       controller_seedShare_6,
	       controller_seedShare_5 } ;
  assign x__h37246 = { 4'd0, x__h37267 } ;
  assign x__h37267 =
	     { controller_seedShare_4,
	       controller_seedShare_3,
	       controller_seedShare_2,
	       controller_seedShare_1,
	       controller_seedShare_0 } ;
  assign x__h37517 = { 15'd0, x__h37527 } ;
  assign x__h37527 = x__h21988 ^ t3__h21461 ;
  assign x__h37688 = x__h38027 - 16'd1 ;
  assign x__h38027 = { hostRxMsgRouter_bodyH, hostRxMsgRouter_bodyL } ;
  assign y__h17212 = 16'd1 << controller_coinInd ;
  assign y__h21513 =
	     controller_prngCoin_triviumCore_regC[109] &
	     controller_prngCoin_triviumCore_regC[108] ;
  assign y__h21682 =
	     controller_prngCoin_triviumCore_regA[91] &
	     controller_prngCoin_triviumCore_regA[90] ;
  assign y__h21851 =
	     controller_prngCoin_triviumCore_regB[82] &
	     controller_prngCoin_triviumCore_regB[81] ;
  assign y__h22063 =
	     controller_prngShare_triviumCore_regC[109:94] &
	     controller_prngShare_triviumCore_regC[108:93] ;
  assign y__h22232 =
	     controller_prngShare_triviumCore_regA[91:76] &
	     controller_prngShare_triviumCore_regA[90:75] ;
  assign y__h22401 =
	     controller_prngShare_triviumCore_regB[82:67] &
	     controller_prngShare_triviumCore_regB[81:66] ;
  assign y_avValue__h18589 = { 7'd0, hostTxMsgPack_srcLabel } ;
  assign y_avValue_body__h12606 =
	     SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 ^
	     controller_fixPlnSh0Mask ;
  always@(hostRxMsgRouter_headL or
	  controller_fixPln_0 or
	  controller_fixPln_1 or
	  controller_fixPln_2 or
	  controller_fixPln_3 or
	  controller_fixPln_4 or
	  controller_fixPln_5 or
	  controller_fixPln_6 or
	  controller_fixPln_7 or
	  controller_fixPln_8 or
	  controller_fixPln_9 or
	  controller_fixPln_10 or
	  controller_fixPln_11 or
	  controller_fixPln_12 or
	  controller_fixPln_13 or
	  controller_fixPln_14 or
	  controller_fixPln_15 or
	  controller_fixPln_16 or
	  controller_fixPln_17 or
	  controller_fixPln_18 or
	  controller_fixPln_19 or
	  controller_fixPln_20 or
	  controller_fixPln_21 or
	  controller_fixPln_22 or
	  controller_fixPln_23 or
	  controller_fixPln_24 or
	  controller_fixPln_25 or
	  controller_fixPln_26 or
	  controller_fixPln_27 or
	  controller_fixPln_28 or
	  controller_fixPln_29 or
	  controller_fixPln_30 or
	  controller_fixPln_31 or
	  controller_fixPln_32 or
	  controller_fixPln_33 or
	  controller_fixPln_34 or
	  controller_fixPln_35 or
	  controller_fixPln_36 or
	  controller_fixPln_37 or
	  controller_fixPln_38 or
	  controller_fixPln_39 or
	  controller_fixPln_40 or
	  controller_fixPln_41 or
	  controller_fixPln_42 or
	  controller_fixPln_43 or
	  controller_fixPln_44 or
	  controller_fixPln_45 or
	  controller_fixPln_46 or
	  controller_fixPln_47 or
	  controller_fixPln_48 or
	  controller_fixPln_49 or
	  controller_fixPln_50 or
	  controller_fixPln_51 or
	  controller_fixPln_52 or
	  controller_fixPln_53 or
	  controller_fixPln_54 or
	  controller_fixPln_55 or
	  controller_fixPln_56 or
	  controller_fixPln_57 or
	  controller_fixPln_58 or
	  controller_fixPln_59 or
	  controller_fixPln_60 or
	  controller_fixPln_61 or
	  controller_fixPln_62 or
	  controller_fixPln_63 or
	  controller_fixPln_64 or
	  controller_fixPln_65 or
	  controller_fixPln_66 or
	  controller_fixPln_67 or
	  controller_fixPln_68 or
	  controller_fixPln_69 or
	  controller_fixPln_70 or
	  controller_fixPln_71 or
	  controller_fixPln_72 or
	  controller_fixPln_73 or
	  controller_fixPln_74 or
	  controller_fixPln_75 or
	  controller_fixPln_76 or
	  controller_fixPln_77 or
	  controller_fixPln_78 or
	  controller_fixPln_79 or
	  controller_fixPln_80 or
	  controller_fixPln_81 or
	  controller_fixPln_82 or
	  controller_fixPln_83 or
	  controller_fixPln_84 or
	  controller_fixPln_85 or
	  controller_fixPln_86 or
	  controller_fixPln_87 or
	  controller_fixPln_88 or
	  controller_fixPln_89 or
	  controller_fixPln_90 or
	  controller_fixPln_91 or
	  controller_fixPln_92 or
	  controller_fixPln_93 or
	  controller_fixPln_94 or
	  controller_fixPln_95 or
	  controller_fixPln_96 or
	  controller_fixPln_97 or
	  controller_fixPln_98 or controller_fixPln_99)
  begin
    case (hostRxMsgRouter_headL[6:0])
      7'd0: x__h18840 = controller_fixPln_0;
      7'd1: x__h18840 = controller_fixPln_1;
      7'd2: x__h18840 = controller_fixPln_2;
      7'd3: x__h18840 = controller_fixPln_3;
      7'd4: x__h18840 = controller_fixPln_4;
      7'd5: x__h18840 = controller_fixPln_5;
      7'd6: x__h18840 = controller_fixPln_6;
      7'd7: x__h18840 = controller_fixPln_7;
      7'd8: x__h18840 = controller_fixPln_8;
      7'd9: x__h18840 = controller_fixPln_9;
      7'd10: x__h18840 = controller_fixPln_10;
      7'd11: x__h18840 = controller_fixPln_11;
      7'd12: x__h18840 = controller_fixPln_12;
      7'd13: x__h18840 = controller_fixPln_13;
      7'd14: x__h18840 = controller_fixPln_14;
      7'd15: x__h18840 = controller_fixPln_15;
      7'd16: x__h18840 = controller_fixPln_16;
      7'd17: x__h18840 = controller_fixPln_17;
      7'd18: x__h18840 = controller_fixPln_18;
      7'd19: x__h18840 = controller_fixPln_19;
      7'd20: x__h18840 = controller_fixPln_20;
      7'd21: x__h18840 = controller_fixPln_21;
      7'd22: x__h18840 = controller_fixPln_22;
      7'd23: x__h18840 = controller_fixPln_23;
      7'd24: x__h18840 = controller_fixPln_24;
      7'd25: x__h18840 = controller_fixPln_25;
      7'd26: x__h18840 = controller_fixPln_26;
      7'd27: x__h18840 = controller_fixPln_27;
      7'd28: x__h18840 = controller_fixPln_28;
      7'd29: x__h18840 = controller_fixPln_29;
      7'd30: x__h18840 = controller_fixPln_30;
      7'd31: x__h18840 = controller_fixPln_31;
      7'd32: x__h18840 = controller_fixPln_32;
      7'd33: x__h18840 = controller_fixPln_33;
      7'd34: x__h18840 = controller_fixPln_34;
      7'd35: x__h18840 = controller_fixPln_35;
      7'd36: x__h18840 = controller_fixPln_36;
      7'd37: x__h18840 = controller_fixPln_37;
      7'd38: x__h18840 = controller_fixPln_38;
      7'd39: x__h18840 = controller_fixPln_39;
      7'd40: x__h18840 = controller_fixPln_40;
      7'd41: x__h18840 = controller_fixPln_41;
      7'd42: x__h18840 = controller_fixPln_42;
      7'd43: x__h18840 = controller_fixPln_43;
      7'd44: x__h18840 = controller_fixPln_44;
      7'd45: x__h18840 = controller_fixPln_45;
      7'd46: x__h18840 = controller_fixPln_46;
      7'd47: x__h18840 = controller_fixPln_47;
      7'd48: x__h18840 = controller_fixPln_48;
      7'd49: x__h18840 = controller_fixPln_49;
      7'd50: x__h18840 = controller_fixPln_50;
      7'd51: x__h18840 = controller_fixPln_51;
      7'd52: x__h18840 = controller_fixPln_52;
      7'd53: x__h18840 = controller_fixPln_53;
      7'd54: x__h18840 = controller_fixPln_54;
      7'd55: x__h18840 = controller_fixPln_55;
      7'd56: x__h18840 = controller_fixPln_56;
      7'd57: x__h18840 = controller_fixPln_57;
      7'd58: x__h18840 = controller_fixPln_58;
      7'd59: x__h18840 = controller_fixPln_59;
      7'd60: x__h18840 = controller_fixPln_60;
      7'd61: x__h18840 = controller_fixPln_61;
      7'd62: x__h18840 = controller_fixPln_62;
      7'd63: x__h18840 = controller_fixPln_63;
      7'd64: x__h18840 = controller_fixPln_64;
      7'd65: x__h18840 = controller_fixPln_65;
      7'd66: x__h18840 = controller_fixPln_66;
      7'd67: x__h18840 = controller_fixPln_67;
      7'd68: x__h18840 = controller_fixPln_68;
      7'd69: x__h18840 = controller_fixPln_69;
      7'd70: x__h18840 = controller_fixPln_70;
      7'd71: x__h18840 = controller_fixPln_71;
      7'd72: x__h18840 = controller_fixPln_72;
      7'd73: x__h18840 = controller_fixPln_73;
      7'd74: x__h18840 = controller_fixPln_74;
      7'd75: x__h18840 = controller_fixPln_75;
      7'd76: x__h18840 = controller_fixPln_76;
      7'd77: x__h18840 = controller_fixPln_77;
      7'd78: x__h18840 = controller_fixPln_78;
      7'd79: x__h18840 = controller_fixPln_79;
      7'd80: x__h18840 = controller_fixPln_80;
      7'd81: x__h18840 = controller_fixPln_81;
      7'd82: x__h18840 = controller_fixPln_82;
      7'd83: x__h18840 = controller_fixPln_83;
      7'd84: x__h18840 = controller_fixPln_84;
      7'd85: x__h18840 = controller_fixPln_85;
      7'd86: x__h18840 = controller_fixPln_86;
      7'd87: x__h18840 = controller_fixPln_87;
      7'd88: x__h18840 = controller_fixPln_88;
      7'd89: x__h18840 = controller_fixPln_89;
      7'd90: x__h18840 = controller_fixPln_90;
      7'd91: x__h18840 = controller_fixPln_91;
      7'd92: x__h18840 = controller_fixPln_92;
      7'd93: x__h18840 = controller_fixPln_93;
      7'd94: x__h18840 = controller_fixPln_94;
      7'd95: x__h18840 = controller_fixPln_95;
      7'd96: x__h18840 = controller_fixPln_96;
      7'd97: x__h18840 = controller_fixPln_97;
      7'd98: x__h18840 = controller_fixPln_98;
      7'd99: x__h18840 = controller_fixPln_99;
      default: x__h18840 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(hostRxMsgRouter_headL or
	  controller_seedShare_0 or
	  controller_seedShare_1 or
	  controller_seedShare_2 or
	  controller_seedShare_3 or
	  controller_seedShare_4 or
	  controller_seedShare_5 or
	  controller_seedShare_6 or
	  controller_seedShare_7 or
	  controller_seedShare_8 or controller_seedShare_9)
  begin
    case (hostRxMsgRouter_headL[3:0])
      4'd0: x__h18878 = controller_seedShare_0;
      4'd1: x__h18878 = controller_seedShare_1;
      4'd2: x__h18878 = controller_seedShare_2;
      4'd3: x__h18878 = controller_seedShare_3;
      4'd4: x__h18878 = controller_seedShare_4;
      4'd5: x__h18878 = controller_seedShare_5;
      4'd6: x__h18878 = controller_seedShare_6;
      4'd7: x__h18878 = controller_seedShare_7;
      4'd8: x__h18878 = controller_seedShare_8;
      4'd9: x__h18878 = controller_seedShare_9;
      default: x__h18878 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(hostRxMsgRouter_headL or
	  controller_seedCoin_0 or
	  controller_seedCoin_1 or
	  controller_seedCoin_2 or
	  controller_seedCoin_3 or
	  controller_seedCoin_4 or
	  controller_seedCoin_5 or
	  controller_seedCoin_6 or
	  controller_seedCoin_7 or
	  controller_seedCoin_8 or controller_seedCoin_9)
  begin
    case (hostRxMsgRouter_headL[3:0])
      4'd0: x__h18868 = controller_seedCoin_0;
      4'd1: x__h18868 = controller_seedCoin_1;
      4'd2: x__h18868 = controller_seedCoin_2;
      4'd3: x__h18868 = controller_seedCoin_3;
      4'd4: x__h18868 = controller_seedCoin_4;
      4'd5: x__h18868 = controller_seedCoin_5;
      4'd6: x__h18868 = controller_seedCoin_6;
      4'd7: x__h18868 = controller_seedCoin_7;
      4'd8: x__h18868 = controller_seedCoin_8;
      4'd9: x__h18868 = controller_seedCoin_9;
      default: x__h18868 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(controller_curPlnInd or
	  controller_fixPln_0 or
	  controller_fixPln_1 or
	  controller_fixPln_2 or
	  controller_fixPln_3 or
	  controller_fixPln_4 or
	  controller_fixPln_5 or
	  controller_fixPln_6 or
	  controller_fixPln_7 or
	  controller_fixPln_8 or
	  controller_fixPln_9 or
	  controller_fixPln_10 or
	  controller_fixPln_11 or
	  controller_fixPln_12 or
	  controller_fixPln_13 or
	  controller_fixPln_14 or
	  controller_fixPln_15 or
	  controller_fixPln_16 or
	  controller_fixPln_17 or
	  controller_fixPln_18 or
	  controller_fixPln_19 or
	  controller_fixPln_20 or
	  controller_fixPln_21 or
	  controller_fixPln_22 or
	  controller_fixPln_23 or
	  controller_fixPln_24 or
	  controller_fixPln_25 or
	  controller_fixPln_26 or
	  controller_fixPln_27 or
	  controller_fixPln_28 or
	  controller_fixPln_29 or
	  controller_fixPln_30 or
	  controller_fixPln_31 or
	  controller_fixPln_32 or
	  controller_fixPln_33 or
	  controller_fixPln_34 or
	  controller_fixPln_35 or
	  controller_fixPln_36 or
	  controller_fixPln_37 or
	  controller_fixPln_38 or
	  controller_fixPln_39 or
	  controller_fixPln_40 or
	  controller_fixPln_41 or
	  controller_fixPln_42 or
	  controller_fixPln_43 or
	  controller_fixPln_44 or
	  controller_fixPln_45 or
	  controller_fixPln_46 or
	  controller_fixPln_47 or
	  controller_fixPln_48 or
	  controller_fixPln_49 or
	  controller_fixPln_50 or
	  controller_fixPln_51 or
	  controller_fixPln_52 or
	  controller_fixPln_53 or
	  controller_fixPln_54 or
	  controller_fixPln_55 or
	  controller_fixPln_56 or
	  controller_fixPln_57 or
	  controller_fixPln_58 or
	  controller_fixPln_59 or
	  controller_fixPln_60 or
	  controller_fixPln_61 or
	  controller_fixPln_62 or
	  controller_fixPln_63 or
	  controller_fixPln_64 or
	  controller_fixPln_65 or
	  controller_fixPln_66 or
	  controller_fixPln_67 or
	  controller_fixPln_68 or
	  controller_fixPln_69 or
	  controller_fixPln_70 or
	  controller_fixPln_71 or
	  controller_fixPln_72 or
	  controller_fixPln_73 or
	  controller_fixPln_74 or
	  controller_fixPln_75 or
	  controller_fixPln_76 or
	  controller_fixPln_77 or
	  controller_fixPln_78 or
	  controller_fixPln_79 or
	  controller_fixPln_80 or
	  controller_fixPln_81 or
	  controller_fixPln_82 or
	  controller_fixPln_83 or
	  controller_fixPln_84 or
	  controller_fixPln_85 or
	  controller_fixPln_86 or
	  controller_fixPln_87 or
	  controller_fixPln_88 or
	  controller_fixPln_89 or
	  controller_fixPln_90 or
	  controller_fixPln_91 or
	  controller_fixPln_92 or
	  controller_fixPln_93 or
	  controller_fixPln_94 or
	  controller_fixPln_95 or
	  controller_fixPln_96 or
	  controller_fixPln_97 or
	  controller_fixPln_98 or controller_fixPln_99)
  begin
    case (controller_curPlnInd)
      7'd0:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_0;
      7'd1:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_1;
      7'd2:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_2;
      7'd3:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_3;
      7'd4:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_4;
      7'd5:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_5;
      7'd6:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_6;
      7'd7:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_7;
      7'd8:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_8;
      7'd9:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_9;
      7'd10:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_10;
      7'd11:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_11;
      7'd12:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_12;
      7'd13:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_13;
      7'd14:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_14;
      7'd15:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_15;
      7'd16:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_16;
      7'd17:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_17;
      7'd18:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_18;
      7'd19:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_19;
      7'd20:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_20;
      7'd21:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_21;
      7'd22:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_22;
      7'd23:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_23;
      7'd24:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_24;
      7'd25:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_25;
      7'd26:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_26;
      7'd27:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_27;
      7'd28:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_28;
      7'd29:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_29;
      7'd30:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_30;
      7'd31:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_31;
      7'd32:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_32;
      7'd33:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_33;
      7'd34:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_34;
      7'd35:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_35;
      7'd36:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_36;
      7'd37:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_37;
      7'd38:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_38;
      7'd39:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_39;
      7'd40:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_40;
      7'd41:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_41;
      7'd42:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_42;
      7'd43:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_43;
      7'd44:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_44;
      7'd45:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_45;
      7'd46:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_46;
      7'd47:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_47;
      7'd48:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_48;
      7'd49:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_49;
      7'd50:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_50;
      7'd51:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_51;
      7'd52:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_52;
      7'd53:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_53;
      7'd54:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_54;
      7'd55:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_55;
      7'd56:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_56;
      7'd57:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_57;
      7'd58:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_58;
      7'd59:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_59;
      7'd60:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_60;
      7'd61:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_61;
      7'd62:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_62;
      7'd63:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_63;
      7'd64:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_64;
      7'd65:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_65;
      7'd66:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_66;
      7'd67:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_67;
      7'd68:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_68;
      7'd69:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_69;
      7'd70:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_70;
      7'd71:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_71;
      7'd72:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_72;
      7'd73:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_73;
      7'd74:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_74;
      7'd75:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_75;
      7'd76:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_76;
      7'd77:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_77;
      7'd78:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_78;
      7'd79:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_79;
      7'd80:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_80;
      7'd81:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_81;
      7'd82:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_82;
      7'd83:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_83;
      7'd84:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_84;
      7'd85:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_85;
      7'd86:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_86;
      7'd87:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_87;
      7'd88:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_88;
      7'd89:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_89;
      7'd90:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_90;
      7'd91:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_91;
      7'd92:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_92;
      7'd93:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_93;
      7'd94:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_94;
      7'd95:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_95;
      7'd96:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_96;
      7'd97:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_97;
      7'd98:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_98;
      7'd99:
	  SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
	      controller_fixPln_99;
      default: SEL_ARR_controller_fixPln_0_57_controller_fixP_ETC___d258 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(hostRxMsgRouter_headH or
	  hostRxMsgRouter_headL or controller_ic2hMsgFIFO$FULL_N)
  begin
    case ({ hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] })
      7'd0, 7'd16, 7'd17, 7'd32, 7'd33:
	  IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d367 =
	      controller_ic2hMsgFIFO$FULL_N;
      default: IF_hostRxMsgRouter_headH_90_BITS_5_TO_0_36_CON_ETC___d367 =
		   { hostRxMsgRouter_headH[5:0], hostRxMsgRouter_headL[7] } !=
		   7'd127 ||
		   controller_ic2hMsgFIFO$FULL_N;
    endcase
  end
  always@(mainComm_c2mHeaderReg)
  begin
    case (mainComm_c2mHeaderReg[15:14])
      2'd0, 2'd1:
	  CASE_mainComm_c2mHeaderReg_BITS_15_TO_14_0_0_1_ETC__q1 = 2'd0;
      default: CASE_mainComm_c2mHeaderReg_BITS_15_TO_14_0_0_1_ETC__q1 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst_n == `BSV_RESET_VALUE)
      begin
        cdcProc_devRdyReg1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_devRdyReg2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_doneLvlReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_doneLvlReg1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_doneLvlReg2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_doneLvlReg3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_enLvlReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_enLvlReg1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_enLvlReg2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_enLvlReg3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_rxVld <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cdcProc_txRdy <= `BSV_ASSIGNMENT_DELAY 1'd1;
	controller_coinInd <= `BSV_ASSIGNMENT_DELAY 4'd0;
	controller_coinsChk <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_curPlnInd <= `BSV_ASSIGNMENT_DELAY 7'd0;
	controller_curSeqNum <= `BSV_ASSIGNMENT_DELAY 14'd0;
	controller_curShareInd <= `BSV_ASSIGNMENT_DELAY 1'd0;
	controller_fixPlnSh0Mask <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_24 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_25 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_26 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_27 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_28 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_29 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_30 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_31 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_32 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_33 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_34 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_35 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_36 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_37 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_38 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_39 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_40 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_41 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_42 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_43 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_44 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_45 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_46 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_47 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_48 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_49 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_50 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_51 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_52 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_53 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_54 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_55 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_56 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_57 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_58 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_59 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_60 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_61 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_62 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_63 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_64 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_65 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_66 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_67 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_68 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_69 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_70 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_71 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_72 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_73 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_74 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_75 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_76 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_77 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_78 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_79 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_80 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_81 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_82 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_83 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_84 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_85 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_86 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_87 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_88 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_89 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_90 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_91 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_92 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_93 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_94 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_95 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_96 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_97 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_98 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_fixPln_99 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_maxShareInd <= `BSV_ASSIGNMENT_DELAY 1'd0;
	controller_prngCoin_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	controller_prngCoin_warmUpCnt <= `BSV_ASSIGNMENT_DELAY 11'd0;
	controller_prngShare_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	controller_prngShare_warmUpCnt <= `BSV_ASSIGNMENT_DELAY 7'd0;
	controller_seedCoin_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedCoin_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seedShare_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	controller_seqNum <= `BSV_ASSIGNMENT_DELAY 14'd0;
	controller_ttestState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hostRxMsgRouter_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hostTxMsgPack_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mainComm_c2mState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	usbComm_rdState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	usbComm_usbDioOe <= `BSV_ASSIGNMENT_DELAY 1'd0;
	usbComm_usbDout <= `BSV_ASSIGNMENT_DELAY 8'd0;
	usbComm_usbRd <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_usbRxfReg1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_usbRxfReg2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_usbTxeReg1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_usbTxeReg2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_usbWr <= `BSV_ASSIGNMENT_DELAY 1'd1;
	usbComm_wrState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (cdcProc_devRdyReg1$EN)
	  cdcProc_devRdyReg1 <= `BSV_ASSIGNMENT_DELAY cdcProc_devRdyReg1$D_IN;
	if (cdcProc_devRdyReg2$EN)
	  cdcProc_devRdyReg2 <= `BSV_ASSIGNMENT_DELAY cdcProc_devRdyReg2$D_IN;
	if (cdcProc_doneLvlReg$EN)
	  cdcProc_doneLvlReg <= `BSV_ASSIGNMENT_DELAY cdcProc_doneLvlReg$D_IN;
	if (cdcProc_doneLvlReg1$EN)
	  cdcProc_doneLvlReg1 <= `BSV_ASSIGNMENT_DELAY
	      cdcProc_doneLvlReg1$D_IN;
	if (cdcProc_doneLvlReg2$EN)
	  cdcProc_doneLvlReg2 <= `BSV_ASSIGNMENT_DELAY
	      cdcProc_doneLvlReg2$D_IN;
	if (cdcProc_doneLvlReg3$EN)
	  cdcProc_doneLvlReg3 <= `BSV_ASSIGNMENT_DELAY
	      cdcProc_doneLvlReg3$D_IN;
	if (cdcProc_enLvlReg$EN)
	  cdcProc_enLvlReg <= `BSV_ASSIGNMENT_DELAY cdcProc_enLvlReg$D_IN;
	if (cdcProc_enLvlReg1$EN)
	  cdcProc_enLvlReg1 <= `BSV_ASSIGNMENT_DELAY cdcProc_enLvlReg1$D_IN;
	if (cdcProc_enLvlReg2$EN)
	  cdcProc_enLvlReg2 <= `BSV_ASSIGNMENT_DELAY cdcProc_enLvlReg2$D_IN;
	if (cdcProc_enLvlReg3$EN)
	  cdcProc_enLvlReg3 <= `BSV_ASSIGNMENT_DELAY cdcProc_enLvlReg3$D_IN;
	if (cdcProc_rxVld$EN)
	  cdcProc_rxVld <= `BSV_ASSIGNMENT_DELAY cdcProc_rxVld$D_IN;
	if (cdcProc_txRdy$EN)
	  cdcProc_txRdy <= `BSV_ASSIGNMENT_DELAY cdcProc_txRdy$D_IN;
	if (controller_coinInd$EN)
	  controller_coinInd <= `BSV_ASSIGNMENT_DELAY controller_coinInd$D_IN;
	if (controller_coinsChk$EN)
	  controller_coinsChk <= `BSV_ASSIGNMENT_DELAY
	      controller_coinsChk$D_IN;
	if (controller_curPlnInd$EN)
	  controller_curPlnInd <= `BSV_ASSIGNMENT_DELAY
	      controller_curPlnInd$D_IN;
	if (controller_curSeqNum$EN)
	  controller_curSeqNum <= `BSV_ASSIGNMENT_DELAY
	      controller_curSeqNum$D_IN;
	if (controller_curShareInd$EN)
	  controller_curShareInd <= `BSV_ASSIGNMENT_DELAY
	      controller_curShareInd$D_IN;
	if (controller_fixPlnSh0Mask$EN)
	  controller_fixPlnSh0Mask <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPlnSh0Mask$D_IN;
	if (controller_fixPln_0$EN)
	  controller_fixPln_0 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_0$D_IN;
	if (controller_fixPln_1$EN)
	  controller_fixPln_1 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_1$D_IN;
	if (controller_fixPln_10$EN)
	  controller_fixPln_10 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_10$D_IN;
	if (controller_fixPln_11$EN)
	  controller_fixPln_11 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_11$D_IN;
	if (controller_fixPln_12$EN)
	  controller_fixPln_12 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_12$D_IN;
	if (controller_fixPln_13$EN)
	  controller_fixPln_13 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_13$D_IN;
	if (controller_fixPln_14$EN)
	  controller_fixPln_14 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_14$D_IN;
	if (controller_fixPln_15$EN)
	  controller_fixPln_15 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_15$D_IN;
	if (controller_fixPln_16$EN)
	  controller_fixPln_16 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_16$D_IN;
	if (controller_fixPln_17$EN)
	  controller_fixPln_17 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_17$D_IN;
	if (controller_fixPln_18$EN)
	  controller_fixPln_18 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_18$D_IN;
	if (controller_fixPln_19$EN)
	  controller_fixPln_19 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_19$D_IN;
	if (controller_fixPln_2$EN)
	  controller_fixPln_2 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_2$D_IN;
	if (controller_fixPln_20$EN)
	  controller_fixPln_20 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_20$D_IN;
	if (controller_fixPln_21$EN)
	  controller_fixPln_21 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_21$D_IN;
	if (controller_fixPln_22$EN)
	  controller_fixPln_22 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_22$D_IN;
	if (controller_fixPln_23$EN)
	  controller_fixPln_23 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_23$D_IN;
	if (controller_fixPln_24$EN)
	  controller_fixPln_24 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_24$D_IN;
	if (controller_fixPln_25$EN)
	  controller_fixPln_25 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_25$D_IN;
	if (controller_fixPln_26$EN)
	  controller_fixPln_26 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_26$D_IN;
	if (controller_fixPln_27$EN)
	  controller_fixPln_27 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_27$D_IN;
	if (controller_fixPln_28$EN)
	  controller_fixPln_28 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_28$D_IN;
	if (controller_fixPln_29$EN)
	  controller_fixPln_29 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_29$D_IN;
	if (controller_fixPln_3$EN)
	  controller_fixPln_3 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_3$D_IN;
	if (controller_fixPln_30$EN)
	  controller_fixPln_30 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_30$D_IN;
	if (controller_fixPln_31$EN)
	  controller_fixPln_31 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_31$D_IN;
	if (controller_fixPln_32$EN)
	  controller_fixPln_32 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_32$D_IN;
	if (controller_fixPln_33$EN)
	  controller_fixPln_33 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_33$D_IN;
	if (controller_fixPln_34$EN)
	  controller_fixPln_34 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_34$D_IN;
	if (controller_fixPln_35$EN)
	  controller_fixPln_35 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_35$D_IN;
	if (controller_fixPln_36$EN)
	  controller_fixPln_36 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_36$D_IN;
	if (controller_fixPln_37$EN)
	  controller_fixPln_37 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_37$D_IN;
	if (controller_fixPln_38$EN)
	  controller_fixPln_38 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_38$D_IN;
	if (controller_fixPln_39$EN)
	  controller_fixPln_39 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_39$D_IN;
	if (controller_fixPln_4$EN)
	  controller_fixPln_4 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_4$D_IN;
	if (controller_fixPln_40$EN)
	  controller_fixPln_40 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_40$D_IN;
	if (controller_fixPln_41$EN)
	  controller_fixPln_41 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_41$D_IN;
	if (controller_fixPln_42$EN)
	  controller_fixPln_42 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_42$D_IN;
	if (controller_fixPln_43$EN)
	  controller_fixPln_43 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_43$D_IN;
	if (controller_fixPln_44$EN)
	  controller_fixPln_44 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_44$D_IN;
	if (controller_fixPln_45$EN)
	  controller_fixPln_45 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_45$D_IN;
	if (controller_fixPln_46$EN)
	  controller_fixPln_46 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_46$D_IN;
	if (controller_fixPln_47$EN)
	  controller_fixPln_47 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_47$D_IN;
	if (controller_fixPln_48$EN)
	  controller_fixPln_48 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_48$D_IN;
	if (controller_fixPln_49$EN)
	  controller_fixPln_49 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_49$D_IN;
	if (controller_fixPln_5$EN)
	  controller_fixPln_5 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_5$D_IN;
	if (controller_fixPln_50$EN)
	  controller_fixPln_50 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_50$D_IN;
	if (controller_fixPln_51$EN)
	  controller_fixPln_51 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_51$D_IN;
	if (controller_fixPln_52$EN)
	  controller_fixPln_52 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_52$D_IN;
	if (controller_fixPln_53$EN)
	  controller_fixPln_53 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_53$D_IN;
	if (controller_fixPln_54$EN)
	  controller_fixPln_54 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_54$D_IN;
	if (controller_fixPln_55$EN)
	  controller_fixPln_55 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_55$D_IN;
	if (controller_fixPln_56$EN)
	  controller_fixPln_56 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_56$D_IN;
	if (controller_fixPln_57$EN)
	  controller_fixPln_57 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_57$D_IN;
	if (controller_fixPln_58$EN)
	  controller_fixPln_58 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_58$D_IN;
	if (controller_fixPln_59$EN)
	  controller_fixPln_59 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_59$D_IN;
	if (controller_fixPln_6$EN)
	  controller_fixPln_6 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_6$D_IN;
	if (controller_fixPln_60$EN)
	  controller_fixPln_60 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_60$D_IN;
	if (controller_fixPln_61$EN)
	  controller_fixPln_61 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_61$D_IN;
	if (controller_fixPln_62$EN)
	  controller_fixPln_62 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_62$D_IN;
	if (controller_fixPln_63$EN)
	  controller_fixPln_63 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_63$D_IN;
	if (controller_fixPln_64$EN)
	  controller_fixPln_64 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_64$D_IN;
	if (controller_fixPln_65$EN)
	  controller_fixPln_65 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_65$D_IN;
	if (controller_fixPln_66$EN)
	  controller_fixPln_66 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_66$D_IN;
	if (controller_fixPln_67$EN)
	  controller_fixPln_67 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_67$D_IN;
	if (controller_fixPln_68$EN)
	  controller_fixPln_68 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_68$D_IN;
	if (controller_fixPln_69$EN)
	  controller_fixPln_69 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_69$D_IN;
	if (controller_fixPln_7$EN)
	  controller_fixPln_7 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_7$D_IN;
	if (controller_fixPln_70$EN)
	  controller_fixPln_70 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_70$D_IN;
	if (controller_fixPln_71$EN)
	  controller_fixPln_71 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_71$D_IN;
	if (controller_fixPln_72$EN)
	  controller_fixPln_72 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_72$D_IN;
	if (controller_fixPln_73$EN)
	  controller_fixPln_73 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_73$D_IN;
	if (controller_fixPln_74$EN)
	  controller_fixPln_74 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_74$D_IN;
	if (controller_fixPln_75$EN)
	  controller_fixPln_75 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_75$D_IN;
	if (controller_fixPln_76$EN)
	  controller_fixPln_76 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_76$D_IN;
	if (controller_fixPln_77$EN)
	  controller_fixPln_77 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_77$D_IN;
	if (controller_fixPln_78$EN)
	  controller_fixPln_78 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_78$D_IN;
	if (controller_fixPln_79$EN)
	  controller_fixPln_79 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_79$D_IN;
	if (controller_fixPln_8$EN)
	  controller_fixPln_8 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_8$D_IN;
	if (controller_fixPln_80$EN)
	  controller_fixPln_80 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_80$D_IN;
	if (controller_fixPln_81$EN)
	  controller_fixPln_81 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_81$D_IN;
	if (controller_fixPln_82$EN)
	  controller_fixPln_82 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_82$D_IN;
	if (controller_fixPln_83$EN)
	  controller_fixPln_83 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_83$D_IN;
	if (controller_fixPln_84$EN)
	  controller_fixPln_84 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_84$D_IN;
	if (controller_fixPln_85$EN)
	  controller_fixPln_85 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_85$D_IN;
	if (controller_fixPln_86$EN)
	  controller_fixPln_86 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_86$D_IN;
	if (controller_fixPln_87$EN)
	  controller_fixPln_87 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_87$D_IN;
	if (controller_fixPln_88$EN)
	  controller_fixPln_88 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_88$D_IN;
	if (controller_fixPln_89$EN)
	  controller_fixPln_89 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_89$D_IN;
	if (controller_fixPln_9$EN)
	  controller_fixPln_9 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_9$D_IN;
	if (controller_fixPln_90$EN)
	  controller_fixPln_90 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_90$D_IN;
	if (controller_fixPln_91$EN)
	  controller_fixPln_91 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_91$D_IN;
	if (controller_fixPln_92$EN)
	  controller_fixPln_92 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_92$D_IN;
	if (controller_fixPln_93$EN)
	  controller_fixPln_93 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_93$D_IN;
	if (controller_fixPln_94$EN)
	  controller_fixPln_94 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_94$D_IN;
	if (controller_fixPln_95$EN)
	  controller_fixPln_95 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_95$D_IN;
	if (controller_fixPln_96$EN)
	  controller_fixPln_96 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_96$D_IN;
	if (controller_fixPln_97$EN)
	  controller_fixPln_97 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_97$D_IN;
	if (controller_fixPln_98$EN)
	  controller_fixPln_98 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_98$D_IN;
	if (controller_fixPln_99$EN)
	  controller_fixPln_99 <= `BSV_ASSIGNMENT_DELAY
	      controller_fixPln_99$D_IN;
	if (controller_maxShareInd$EN)
	  controller_maxShareInd <= `BSV_ASSIGNMENT_DELAY
	      controller_maxShareInd$D_IN;
	if (controller_prngCoin_state$EN)
	  controller_prngCoin_state <= `BSV_ASSIGNMENT_DELAY
	      controller_prngCoin_state$D_IN;
	if (controller_prngCoin_warmUpCnt$EN)
	  controller_prngCoin_warmUpCnt <= `BSV_ASSIGNMENT_DELAY
	      controller_prngCoin_warmUpCnt$D_IN;
	if (controller_prngShare_state$EN)
	  controller_prngShare_state <= `BSV_ASSIGNMENT_DELAY
	      controller_prngShare_state$D_IN;
	if (controller_prngShare_warmUpCnt$EN)
	  controller_prngShare_warmUpCnt <= `BSV_ASSIGNMENT_DELAY
	      controller_prngShare_warmUpCnt$D_IN;
	if (controller_seedCoin_0$EN)
	  controller_seedCoin_0 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_0$D_IN;
	if (controller_seedCoin_1$EN)
	  controller_seedCoin_1 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_1$D_IN;
	if (controller_seedCoin_2$EN)
	  controller_seedCoin_2 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_2$D_IN;
	if (controller_seedCoin_3$EN)
	  controller_seedCoin_3 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_3$D_IN;
	if (controller_seedCoin_4$EN)
	  controller_seedCoin_4 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_4$D_IN;
	if (controller_seedCoin_5$EN)
	  controller_seedCoin_5 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_5$D_IN;
	if (controller_seedCoin_6$EN)
	  controller_seedCoin_6 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_6$D_IN;
	if (controller_seedCoin_7$EN)
	  controller_seedCoin_7 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_7$D_IN;
	if (controller_seedCoin_8$EN)
	  controller_seedCoin_8 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_8$D_IN;
	if (controller_seedCoin_9$EN)
	  controller_seedCoin_9 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedCoin_9$D_IN;
	if (controller_seedShare_0$EN)
	  controller_seedShare_0 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_0$D_IN;
	if (controller_seedShare_1$EN)
	  controller_seedShare_1 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_1$D_IN;
	if (controller_seedShare_2$EN)
	  controller_seedShare_2 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_2$D_IN;
	if (controller_seedShare_3$EN)
	  controller_seedShare_3 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_3$D_IN;
	if (controller_seedShare_4$EN)
	  controller_seedShare_4 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_4$D_IN;
	if (controller_seedShare_5$EN)
	  controller_seedShare_5 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_5$D_IN;
	if (controller_seedShare_6$EN)
	  controller_seedShare_6 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_6$D_IN;
	if (controller_seedShare_7$EN)
	  controller_seedShare_7 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_7$D_IN;
	if (controller_seedShare_8$EN)
	  controller_seedShare_8 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_8$D_IN;
	if (controller_seedShare_9$EN)
	  controller_seedShare_9 <= `BSV_ASSIGNMENT_DELAY
	      controller_seedShare_9$D_IN;
	if (controller_seqNum$EN)
	  controller_seqNum <= `BSV_ASSIGNMENT_DELAY controller_seqNum$D_IN;
	if (controller_ttestState$EN)
	  controller_ttestState <= `BSV_ASSIGNMENT_DELAY
	      controller_ttestState$D_IN;
	if (hostRxMsgRouter_state$EN)
	  hostRxMsgRouter_state <= `BSV_ASSIGNMENT_DELAY
	      hostRxMsgRouter_state$D_IN;
	if (hostTxMsgPack_state$EN)
	  hostTxMsgPack_state <= `BSV_ASSIGNMENT_DELAY
	      hostTxMsgPack_state$D_IN;
	if (mainComm_c2mState$EN)
	  mainComm_c2mState <= `BSV_ASSIGNMENT_DELAY mainComm_c2mState$D_IN;
	if (usbComm_rdState$EN)
	  usbComm_rdState <= `BSV_ASSIGNMENT_DELAY usbComm_rdState$D_IN;
	if (usbComm_usbDioOe$EN)
	  usbComm_usbDioOe <= `BSV_ASSIGNMENT_DELAY usbComm_usbDioOe$D_IN;
	if (usbComm_usbDout$EN)
	  usbComm_usbDout <= `BSV_ASSIGNMENT_DELAY usbComm_usbDout$D_IN;
	if (usbComm_usbRd$EN)
	  usbComm_usbRd <= `BSV_ASSIGNMENT_DELAY usbComm_usbRd$D_IN;
	if (usbComm_usbRxfReg1$EN)
	  usbComm_usbRxfReg1 <= `BSV_ASSIGNMENT_DELAY usbComm_usbRxfReg1$D_IN;
	if (usbComm_usbRxfReg2$EN)
	  usbComm_usbRxfReg2 <= `BSV_ASSIGNMENT_DELAY usbComm_usbRxfReg2$D_IN;
	if (usbComm_usbTxeReg1$EN)
	  usbComm_usbTxeReg1 <= `BSV_ASSIGNMENT_DELAY usbComm_usbTxeReg1$D_IN;
	if (usbComm_usbTxeReg2$EN)
	  usbComm_usbTxeReg2 <= `BSV_ASSIGNMENT_DELAY usbComm_usbTxeReg2$D_IN;
	if (usbComm_usbWr$EN)
	  usbComm_usbWr <= `BSV_ASSIGNMENT_DELAY usbComm_usbWr$D_IN;
	if (usbComm_wrState$EN)
	  usbComm_wrState <= `BSV_ASSIGNMENT_DELAY usbComm_wrState$D_IN;
      end
    if (cdcProc_c2mPktReg$EN)
      cdcProc_c2mPktReg <= `BSV_ASSIGNMENT_DELAY cdcProc_c2mPktReg$D_IN;
    if (cdcProc_m2cMsgReg$EN)
      cdcProc_m2cMsgReg <= `BSV_ASSIGNMENT_DELAY cdcProc_m2cMsgReg$D_IN;
    if (controller_prngCoin_triviumCore_regA$EN)
      controller_prngCoin_triviumCore_regA <= `BSV_ASSIGNMENT_DELAY
	  controller_prngCoin_triviumCore_regA$D_IN;
    if (controller_prngCoin_triviumCore_regB$EN)
      controller_prngCoin_triviumCore_regB <= `BSV_ASSIGNMENT_DELAY
	  controller_prngCoin_triviumCore_regB$D_IN;
    if (controller_prngCoin_triviumCore_regC$EN)
      controller_prngCoin_triviumCore_regC <= `BSV_ASSIGNMENT_DELAY
	  controller_prngCoin_triviumCore_regC$D_IN;
    if (controller_prngShare_triviumCore_regA$EN)
      controller_prngShare_triviumCore_regA <= `BSV_ASSIGNMENT_DELAY
	  controller_prngShare_triviumCore_regA$D_IN;
    if (controller_prngShare_triviumCore_regB$EN)
      controller_prngShare_triviumCore_regB <= `BSV_ASSIGNMENT_DELAY
	  controller_prngShare_triviumCore_regB$D_IN;
    if (controller_prngShare_triviumCore_regC$EN)
      controller_prngShare_triviumCore_regC <= `BSV_ASSIGNMENT_DELAY
	  controller_prngShare_triviumCore_regC$D_IN;
    if (hostRxMsgRouter_bodyH$EN)
      hostRxMsgRouter_bodyH <= `BSV_ASSIGNMENT_DELAY
	  hostRxMsgRouter_bodyH$D_IN;
    if (hostRxMsgRouter_bodyL$EN)
      hostRxMsgRouter_bodyL <= `BSV_ASSIGNMENT_DELAY
	  hostRxMsgRouter_bodyL$D_IN;
    if (hostRxMsgRouter_destLabel$EN)
      hostRxMsgRouter_destLabel <= `BSV_ASSIGNMENT_DELAY
	  hostRxMsgRouter_destLabel$D_IN;
    if (hostRxMsgRouter_headH$EN)
      hostRxMsgRouter_headH <= `BSV_ASSIGNMENT_DELAY
	  hostRxMsgRouter_headH$D_IN;
    if (hostRxMsgRouter_headL$EN)
      hostRxMsgRouter_headL <= `BSV_ASSIGNMENT_DELAY
	  hostRxMsgRouter_headL$D_IN;
    if (hostTxMsgPack_bodyH$EN)
      hostTxMsgPack_bodyH <= `BSV_ASSIGNMENT_DELAY hostTxMsgPack_bodyH$D_IN;
    if (hostTxMsgPack_bodyL$EN)
      hostTxMsgPack_bodyL <= `BSV_ASSIGNMENT_DELAY hostTxMsgPack_bodyL$D_IN;
    if (hostTxMsgPack_srcLabel$EN)
      hostTxMsgPack_srcLabel <= `BSV_ASSIGNMENT_DELAY
	  hostTxMsgPack_srcLabel$D_IN;
    if (mainComm_c2mBodyReg$EN)
      mainComm_c2mBodyReg <= `BSV_ASSIGNMENT_DELAY mainComm_c2mBodyReg$D_IN;
    if (mainComm_c2mHeaderReg$EN)
      mainComm_c2mHeaderReg <= `BSV_ASSIGNMENT_DELAY
	  mainComm_c2mHeaderReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cdcProc_c2mPktReg = 16'hAAAA;
    cdcProc_devRdyReg1 = 1'h0;
    cdcProc_devRdyReg2 = 1'h0;
    cdcProc_doneLvlReg = 1'h0;
    cdcProc_doneLvlReg1 = 1'h0;
    cdcProc_doneLvlReg2 = 1'h0;
    cdcProc_doneLvlReg3 = 1'h0;
    cdcProc_enLvlReg = 1'h0;
    cdcProc_enLvlReg1 = 1'h0;
    cdcProc_enLvlReg2 = 1'h0;
    cdcProc_enLvlReg3 = 1'h0;
    cdcProc_m2cMsgReg = 16'hAAAA;
    cdcProc_rxVld = 1'h0;
    cdcProc_txRdy = 1'h0;
    controller_coinInd = 4'hA;
    controller_coinsChk = 16'hAAAA;
    controller_curPlnInd = 7'h2A;
    controller_curSeqNum = 14'h2AAA;
    controller_curShareInd = 1'h0;
    controller_fixPlnSh0Mask = 16'hAAAA;
    controller_fixPln_0 = 16'hAAAA;
    controller_fixPln_1 = 16'hAAAA;
    controller_fixPln_10 = 16'hAAAA;
    controller_fixPln_11 = 16'hAAAA;
    controller_fixPln_12 = 16'hAAAA;
    controller_fixPln_13 = 16'hAAAA;
    controller_fixPln_14 = 16'hAAAA;
    controller_fixPln_15 = 16'hAAAA;
    controller_fixPln_16 = 16'hAAAA;
    controller_fixPln_17 = 16'hAAAA;
    controller_fixPln_18 = 16'hAAAA;
    controller_fixPln_19 = 16'hAAAA;
    controller_fixPln_2 = 16'hAAAA;
    controller_fixPln_20 = 16'hAAAA;
    controller_fixPln_21 = 16'hAAAA;
    controller_fixPln_22 = 16'hAAAA;
    controller_fixPln_23 = 16'hAAAA;
    controller_fixPln_24 = 16'hAAAA;
    controller_fixPln_25 = 16'hAAAA;
    controller_fixPln_26 = 16'hAAAA;
    controller_fixPln_27 = 16'hAAAA;
    controller_fixPln_28 = 16'hAAAA;
    controller_fixPln_29 = 16'hAAAA;
    controller_fixPln_3 = 16'hAAAA;
    controller_fixPln_30 = 16'hAAAA;
    controller_fixPln_31 = 16'hAAAA;
    controller_fixPln_32 = 16'hAAAA;
    controller_fixPln_33 = 16'hAAAA;
    controller_fixPln_34 = 16'hAAAA;
    controller_fixPln_35 = 16'hAAAA;
    controller_fixPln_36 = 16'hAAAA;
    controller_fixPln_37 = 16'hAAAA;
    controller_fixPln_38 = 16'hAAAA;
    controller_fixPln_39 = 16'hAAAA;
    controller_fixPln_4 = 16'hAAAA;
    controller_fixPln_40 = 16'hAAAA;
    controller_fixPln_41 = 16'hAAAA;
    controller_fixPln_42 = 16'hAAAA;
    controller_fixPln_43 = 16'hAAAA;
    controller_fixPln_44 = 16'hAAAA;
    controller_fixPln_45 = 16'hAAAA;
    controller_fixPln_46 = 16'hAAAA;
    controller_fixPln_47 = 16'hAAAA;
    controller_fixPln_48 = 16'hAAAA;
    controller_fixPln_49 = 16'hAAAA;
    controller_fixPln_5 = 16'hAAAA;
    controller_fixPln_50 = 16'hAAAA;
    controller_fixPln_51 = 16'hAAAA;
    controller_fixPln_52 = 16'hAAAA;
    controller_fixPln_53 = 16'hAAAA;
    controller_fixPln_54 = 16'hAAAA;
    controller_fixPln_55 = 16'hAAAA;
    controller_fixPln_56 = 16'hAAAA;
    controller_fixPln_57 = 16'hAAAA;
    controller_fixPln_58 = 16'hAAAA;
    controller_fixPln_59 = 16'hAAAA;
    controller_fixPln_6 = 16'hAAAA;
    controller_fixPln_60 = 16'hAAAA;
    controller_fixPln_61 = 16'hAAAA;
    controller_fixPln_62 = 16'hAAAA;
    controller_fixPln_63 = 16'hAAAA;
    controller_fixPln_64 = 16'hAAAA;
    controller_fixPln_65 = 16'hAAAA;
    controller_fixPln_66 = 16'hAAAA;
    controller_fixPln_67 = 16'hAAAA;
    controller_fixPln_68 = 16'hAAAA;
    controller_fixPln_69 = 16'hAAAA;
    controller_fixPln_7 = 16'hAAAA;
    controller_fixPln_70 = 16'hAAAA;
    controller_fixPln_71 = 16'hAAAA;
    controller_fixPln_72 = 16'hAAAA;
    controller_fixPln_73 = 16'hAAAA;
    controller_fixPln_74 = 16'hAAAA;
    controller_fixPln_75 = 16'hAAAA;
    controller_fixPln_76 = 16'hAAAA;
    controller_fixPln_77 = 16'hAAAA;
    controller_fixPln_78 = 16'hAAAA;
    controller_fixPln_79 = 16'hAAAA;
    controller_fixPln_8 = 16'hAAAA;
    controller_fixPln_80 = 16'hAAAA;
    controller_fixPln_81 = 16'hAAAA;
    controller_fixPln_82 = 16'hAAAA;
    controller_fixPln_83 = 16'hAAAA;
    controller_fixPln_84 = 16'hAAAA;
    controller_fixPln_85 = 16'hAAAA;
    controller_fixPln_86 = 16'hAAAA;
    controller_fixPln_87 = 16'hAAAA;
    controller_fixPln_88 = 16'hAAAA;
    controller_fixPln_89 = 16'hAAAA;
    controller_fixPln_9 = 16'hAAAA;
    controller_fixPln_90 = 16'hAAAA;
    controller_fixPln_91 = 16'hAAAA;
    controller_fixPln_92 = 16'hAAAA;
    controller_fixPln_93 = 16'hAAAA;
    controller_fixPln_94 = 16'hAAAA;
    controller_fixPln_95 = 16'hAAAA;
    controller_fixPln_96 = 16'hAAAA;
    controller_fixPln_97 = 16'hAAAA;
    controller_fixPln_98 = 16'hAAAA;
    controller_fixPln_99 = 16'hAAAA;
    controller_maxShareInd = 1'h0;
    controller_prngCoin_state = 2'h2;
    controller_prngCoin_triviumCore_regA = 93'h0AAAAAAAAAAAAAAAAAAAAAAA;
    controller_prngCoin_triviumCore_regB = 84'hAAAAAAAAAAAAAAAAAAAAA;
    controller_prngCoin_triviumCore_regC = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    controller_prngCoin_warmUpCnt = 11'h2AA;
    controller_prngShare_state = 2'h2;
    controller_prngShare_triviumCore_regA = 93'h0AAAAAAAAAAAAAAAAAAAAAAA;
    controller_prngShare_triviumCore_regB = 84'hAAAAAAAAAAAAAAAAAAAAA;
    controller_prngShare_triviumCore_regC = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    controller_prngShare_warmUpCnt = 7'h2A;
    controller_seedCoin_0 = 16'hAAAA;
    controller_seedCoin_1 = 16'hAAAA;
    controller_seedCoin_2 = 16'hAAAA;
    controller_seedCoin_3 = 16'hAAAA;
    controller_seedCoin_4 = 16'hAAAA;
    controller_seedCoin_5 = 16'hAAAA;
    controller_seedCoin_6 = 16'hAAAA;
    controller_seedCoin_7 = 16'hAAAA;
    controller_seedCoin_8 = 16'hAAAA;
    controller_seedCoin_9 = 16'hAAAA;
    controller_seedShare_0 = 16'hAAAA;
    controller_seedShare_1 = 16'hAAAA;
    controller_seedShare_2 = 16'hAAAA;
    controller_seedShare_3 = 16'hAAAA;
    controller_seedShare_4 = 16'hAAAA;
    controller_seedShare_5 = 16'hAAAA;
    controller_seedShare_6 = 16'hAAAA;
    controller_seedShare_7 = 16'hAAAA;
    controller_seedShare_8 = 16'hAAAA;
    controller_seedShare_9 = 16'hAAAA;
    controller_seqNum = 14'h2AAA;
    controller_ttestState = 3'h2;
    hostRxMsgRouter_bodyH = 8'hAA;
    hostRxMsgRouter_bodyL = 8'hAA;
    hostRxMsgRouter_destLabel = 1'h0;
    hostRxMsgRouter_headH = 8'hAA;
    hostRxMsgRouter_headL = 8'hAA;
    hostRxMsgRouter_state = 3'h2;
    hostTxMsgPack_bodyH = 8'hAA;
    hostTxMsgPack_bodyL = 8'hAA;
    hostTxMsgPack_srcLabel = 1'h0;
    hostTxMsgPack_state = 2'h2;
    mainComm_c2mBodyReg = 16'hAAAA;
    mainComm_c2mHeaderReg = 16'hAAAA;
    mainComm_c2mState = 2'h2;
    usbComm_rdState = 3'h2;
    usbComm_usbDioOe = 1'h0;
    usbComm_usbDout = 8'hAA;
    usbComm_usbRd = 1'h0;
    usbComm_usbRxfReg1 = 1'h0;
    usbComm_usbRxfReg2 = 1'h0;
    usbComm_usbTxeReg1 = 1'h0;
    usbComm_usbTxeReg2 = 1'h0;
    usbComm_usbWr = 1'h0;
    usbComm_wrState = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk)
  begin
    #0;
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_controller_prngShare_stateWarmUp &&
	  WILL_FIRE_RL_controller_ttestStateFix &&
	  controller_curShareInd)
	$display("Error: \"../trivium/TriviumDRBG.bsv\", line 35, column 8: (R0002)\n  Conflict-free rules RL_controller_prngShare_stateWarmUp and\n  RL_controller_ttestStateFix called conflicting methods read and write of\n  module instance controller_prngShare_triviumCore_regA.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_controller_prngShare_stateWarmUp &&
	  WILL_FIRE_RL_controller_ttestStateFix &&
	  controller_curShareInd)
	$display("Error: \"../trivium/TriviumDRBG.bsv\", line 35, column 8: (R0002)\n  Conflict-free rules RL_controller_prngShare_stateWarmUp and\n  RL_controller_ttestStateFix called conflicting methods read and write of\n  module instance controller_prngShare_triviumCore_regB.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_controller_prngShare_stateWarmUp &&
	  WILL_FIRE_RL_controller_ttestStateFix &&
	  controller_curShareInd)
	$display("Error: \"../trivium/TriviumDRBG.bsv\", line 35, column 8: (R0002)\n  Conflict-free rules RL_controller_prngShare_stateWarmUp and\n  RL_controller_ttestStateFix called conflicting methods read and write of\n  module instance controller_prngShare_triviumCore_regC.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateDone)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateDone called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateCoin &&
	  controller_coinInd == 4'd0)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateCoin called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateEnc)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateEnc called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateFix &&
	  _write_RL_controller_ttestStateFix$EN_controller_ttestState$wget)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateFix called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateRand &&
	  _write_RL_controller_ttestStateFix$EN_controller_ttestState$wget)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateRand called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateInit)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateInit called\n  conflicting methods read and write of module instance controller_ttestState.\n");
    if (rst_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_im2c_im2h && WILL_FIRE_RL_controller_ttestStateInit &&
	  controller_ttestState == 3'd5)
	$display("Error: \"CtrlFPGA.bsv\", line 66, column 8: (R0002)\n  Conflict-free rules RL_im2c_im2h and RL_controller_ttestStateInit called\n  conflicting methods read and write of module instance controller_curSeqNum.\n");
  end
  // synopsys translate_on
endmodule  // mkCtrlFPGA

